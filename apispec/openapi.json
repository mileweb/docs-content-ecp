{
  "openapi": "3.0.0",
  "info": {
    "title": "ECP API Specification",
    "version": "1.0",
    "contact": {
      "url": "https://www.cdnetworks.com"
    },
    "description": "The ECP API is a RESTful API that allows you to manage ECP services."
  },
  "servers": [
    {
      "url": "https://ngapi.cdnetworks.com"
    }
  ],
  "paths": {
    "/ecp/v1/imagepullsecrets": {
      "post": {
        "summary": "Create an imagePullSecret",
        "operationId": "post-imagepullsecrets",
        "description": "This interface enables you to create imagePullSecrets to be used by Kubernetes when pulling private images for your applications. \n\nNote that ECP apiserver itself will not attempt to use the username and password passed to authenticate against the image registry. Please make sure that the credentials are valid. Invalid credentials will cause failure in image pulling when deploying an application using that imagePullSecret.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "title": "",
                    "type": "string",
                    "description": "Name of the imagePullSecret. Shall be unique within a namespace. Allows lower case alphanumeric characters, ‘-’ and ‘.’ only, must start and end with an alphanumeric character, and must be no more than 63 characters."
                  },
                  "namespace": {
                    "title": "",
                    "type": "string",
                    "description": "Kubenetes namespace created for your ECP account"
                  },
                  "description": {
                    "title": "",
                    "type": "string",
                    "description": "Arbitrary text about the imagePullSecret"
                  },
                  "registry": {
                    "title": "",
                    "type": "string",
                    "description": "Your docker registry FQDN"
                  },
                  "username": {
                    "title": "",
                    "type": "string",
                    "description": "Your docker registry username"
                  },
                  "password": {
                    "type": "string",
                    "title": "",
                    "description": "Your docker registry password",
                    "format": "password"
                  }
                },
                "required": [
                  "name",
                  "namespace",
                  "registry",
                  "username",
                  "password"
                ]
              },
              "examples": {
                "example-1": {
                  "value": {
                    "name": "myregistrykey",
                    "namespace": "demo",
                    "description": "imagePullSecret for docker registry",
                    "registry": "docker.io",
                    "username": "demo",
                    "password": "123456"
                  }
                }
              }
            }
          },
          "description": ""
        },
        "tags": [
          "imagePullSecrets"
        ],
        "responses": {
          "201": {
            "description": "This response indicates the imagePullSecret is successfully created.",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "in": "header",
                "name": "Location",
                "description": "Location of the newly created resource.",
                "required": false
              },
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Refer to response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "InvalidSecretName": {
                    "value": {
                      "error": "InvalidSecretName",
                      "message": "Invalid secret name. A valid secret name must consist of lower-case alphanumeric characters, ‘-', or '.’, must start and end with a lower-case alphanumeric character, and must be no more than 63 characters."
                    }
                  },
                  "NamespaceNotExist": {
                    "value": {
                      "error": "NamespaceNotExist",
                      "message": "The namespace given does not exist."
                    }
                  },
                  "RequiredFieldMissing": {
                    "value": {
                      "error": "RequiredFieldMissing",
                      "message": "The field {field} is required."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "409": {
            "description": "This error is returned if you try to create an imagePullSecret that already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "SecretNameExists",
                      "message": "The secret name is already taken."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Query imagePullSecrets list",
        "operationId": "get-imagepullsecrets",
        "responses": {
          "200": {
            "description": "The response contains a list of imagePullSecrets.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ImagePullSecrets": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "imagepullsecretID": {
                            "title": "",
                            "type": "string"
                          },
                          "name": {
                            "title": "",
                            "type": "string",
                            "description": "Name of the imagePullSecret. Shall be unique within a namespace. Allows lower case alphanumeric characters, ‘-’ and ‘.’ only, must start and end with an alphanumeric character, and must be no more than 63 characters."
                          },
                          "namespace": {
                            "title": "",
                            "type": "string",
                            "description": "Kubenetes namespace created for your ECP account"
                          },
                          "description": {
                            "title": "",
                            "type": "string",
                            "description": "Arbitrary text about the imagePullSecret"
                          },
                          "creationTime": {
                            "title": "",
                            "format": "date-time",
                            "type": "string",
                            "description": "Datetime when the resource is created"
                          },
                          "lastUpdateTime": {
                            "type": "string",
                            "title": "",
                            "format": "date-time",
                            "description": "Datetime when the resource is last updated"
                          }
                        }
                      }
                    },
                    "totalCount": {
                      "title": "",
                      "type": "integer",
                      "description": "Total number of resources"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "ImagePullSecrets": [
                        {
                          "imagepullsecretID": "123456",
                          "name": "mysecret1",
                          "namespace": "demo",
                          "description": "image pull secret for qcc registry",
                          "creationTime": "2020-10-02T15:00:00Z",
                          "lastUpdateTime": "2020-10-02T15:00:00Z"
                        },
                        {
                          "imagepullsecretID": "123456",
                          "name": "mysecret2",
                          "namespace": "demo",
                          "description": "image pull secret for qcc registry",
                          "creationTime": "2020-10-02T15:00:00Z",
                          "lastUpdateTime": "2020-10-02T15:00:00Z"
                        },
                        {
                          "imagepullsecretID": "123456",
                          "name": "mysecret3",
                          "namespace": "demo",
                          "description": "image pull secret for qcc registry",
                          "creationTime": "2020-10-02T15:00:00Z",
                          "lastUpdateTime": "2020-10-02T15:00:00Z"
                        }
                      ],
                      "totalCount": 3
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Refer to response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "InvalidListOffset": {
                    "value": {
                      "error": "InvalidListOffset",
                      "message": "The value of offset must be a valid non-negative integer."
                    }
                  },
                  "InvalidListLimit": {
                    "value": {
                      "error": "InvalidListLimit",
                      "message": "The value of limit must be a valid integer between 1 and 200, both inclusive."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "description": "Get a list of imagePullSecrets. You can specify a search parameter, offset and limit to filter the results.",
        "tags": [
          "imagePullSecrets"
        ],
        "parameters": [
          {
            "name": "searchString",
            "in": "query",
            "description": "Keyword to search for particular resources. The value is matched against the \"name\" field of each resource.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates the first resource to return. The first has an offset of 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": "0"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of resources to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": "100",
              "maximum": 200,
              "minimum": 1
            }
          },
          {
            "name": "On-Behalf-Of",
            "in": "header",
            "description": "If you are a reseller, you can use this header to specify the ID of a child customer and make API call on their behalf.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "parameters": []
    },
    "/ecp/v1/imagepullsecrets/{imagepullsecretID}": {
      "parameters": [
        {
          "type": "string",
          "name": "imagepullsecretID",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "description": "ID of an imagePullSecret",
          "required": true
        }
      ],
      "get": {
        "summary": "Query an imagePullSecret",
        "tags": [
          "imagePullSecrets"
        ],
        "responses": {
          "200": {
            "description": "The response contains details of the imagePullSecret.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "imagepullsecretID": {
                      "title": "",
                      "type": "string"
                    },
                    "name": {
                      "title": "",
                      "type": "string",
                      "description": "Name of the imagePullSecret. Shall be unique within a namespace. Allows lower case alphanumeric characters, ‘-’ and ‘.’ only, must start and end with an alphanumeric character, and must be no more than 63 characters."
                    },
                    "namespace": {
                      "title": "",
                      "type": "string",
                      "description": "Kubenetes namespace created for your ECP account"
                    },
                    "description": {
                      "title": "",
                      "type": "string",
                      "description": "Arbitrary text about the imagePullSecret"
                    },
                    "registry": {
                      "title": "",
                      "type": "string",
                      "description": "Your docker registry FQDN"
                    },
                    "username": {
                      "title": "",
                      "type": "string",
                      "description": "Your docker registry username"
                    },
                    "password": {
                      "type": "string",
                      "title": "",
                      "description": "Your docker registry password",
                      "format": "password"
                    },
                    "creationTime": {
                      "title": "",
                      "format": "date-time",
                      "type": "string",
                      "description": "Datetime when the resource is created"
                    },
                    "lastUpdateTime": {
                      "type": "string",
                      "title": "",
                      "format": "date-time",
                      "description": "Datetime when the resource is last updated"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "imagepullsecretID": "32bd86d6312211eaae6398wc35ded775",
                      "name": "mysecret1",
                      "namespace": "demo",
                      "description": "image pull secret for qcc registry",
                      "registry": "docker.io",
                      "username": "demo",
                      "password": "123456",
                      "creationTime": "2020-10-02T15:00:00Z",
                      "lastUpdateTime": "2020-10-02T15:00:00Z"
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "SecretNotFound",
                      "message": "The secret ID given does not exist."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "operationId": "get-imagepullsecret-by-ID",
        "description": "Get the details of an imagePullSecret",
        "parameters": [
          {
            "name": "On-Behalf-Of",
            "in": "header",
            "description": "If you are a reseller, you can use this header to specify the ID of a child customer and make API call on their behalf.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "patch": {
        "summary": "Update an imagePullSecret",
        "operationId": "patch-imagepullsecret-by-ID",
        "responses": {
          "200": {
            "description": "This response indicates the imagePullSecret is successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "imagepullsecretID": {
                      "title": "",
                      "type": "string"
                    },
                    "name": {
                      "title": "",
                      "type": "string",
                      "description": "Name of the imagePullSecret. Shall be unique within a namespace. Allows lower case alphanumeric characters, ‘-’ and ‘.’ only, must start and end with an alphanumeric character, and must be no more than 63 characters."
                    },
                    "namespace": {
                      "title": "",
                      "type": "string",
                      "description": "Kubenetes namespace created for your ECP account"
                    },
                    "description": {
                      "title": "",
                      "type": "string",
                      "description": "Arbitrary text about the imagePullSecret"
                    },
                    "registry": {
                      "title": "",
                      "type": "string",
                      "description": "Your docker registry FQDN"
                    },
                    "username": {
                      "title": "",
                      "type": "string",
                      "description": "Your docker registry username"
                    },
                    "password": {
                      "type": "string",
                      "title": "",
                      "description": "Your docker registry password",
                      "format": "password"
                    },
                    "creationTime": {
                      "title": "",
                      "format": "date-time",
                      "type": "string",
                      "description": "Datetime when the resource is created"
                    },
                    "lastUpdateTime": {
                      "type": "string",
                      "title": "",
                      "format": "date-time",
                      "description": "Datetime when the resource is last updated"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "imagepullsecretID": "32bd86d6312211eaae6398wc35ded775",
                      "name": "mysecret1",
                      "namespace": "demo",
                      "description": "image pull secret for qcc registry",
                      "registry": "docker.io",
                      "username": "demo",
                      "password": "123456",
                      "creationTime": "2020-10-02T15:00:00Z",
                      "lastUpdateTime": "2020-10-02T15:05:00Z"
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "SecretNotFound",
                      "message": "The secret ID given does not exist."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "tags": [
          "imagePullSecrets"
        ],
        "description": "Update an existing imagePullSecret. The fields “name”, “namespace” and “registry” cannot be updated. If a request body includes any of these fields, they will simply be ignored.\n\nNote that updating an imagePullSecret in use might cause temporary failure in image pulling.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "title": "",
                    "type": "string",
                    "description": "Arbitrary text about the imagePullSecret"
                  },
                  "username": {
                    "title": "",
                    "type": "string",
                    "description": "Your docker registry username"
                  },
                  "password": {
                    "type": "string",
                    "title": "",
                    "description": "Your docker registry password",
                    "format": "password"
                  }
                }
              },
              "examples": {
                "example-1": {
                  "value": {
                    "description": "imagePullSecret for docker registry",
                    "username": "demo",
                    "password": "abcdef"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an imagePullSecret",
        "operationId": "delete-imagepullsecret-by-ID",
        "responses": {
          "204": {
            "description": "This response is returned if the imagePullSecret is successfully deleted.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Refer to response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "SecretBeingUsed",
                      "message": "The secret is being used by applications and cannot be deleted."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "SecretNotFound",
                      "message": "The secret ID given does not exist."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "tags": [
          "imagePullSecrets"
        ],
        "description": "Delete an existing imagePullSecret.\n\nNote that an imagePullSecret being referenced by an application cannot be deleted."
      }
    },
    "/ecp/v1/cnames": {
      "get": {
        "summary": "Query CNAMEs list",
        "tags": [
          "CNAMEs"
        ],
        "responses": {
          "200": {
            "description": "The response contains a list of CNAMEs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "cnames": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "cnameID": {
                            "title": "",
                            "type": "string",
                            "description": "ID of a CNAME"
                          },
                          "cname": {
                            "title": "",
                            "type": "string",
                            "description": "FQDN CNAME"
                          },
                          "applicationID": {
                            "title": "",
                            "type": "string",
                            "description": "ID of application that the CNAME is created for",
                            "x-examples": {}
                          },
                          "applicationName": {
                            "title": "",
                            "type": "string",
                            "description": "Name of application that the CNAME is created for"
                          },
                          "description": {
                            "title": "",
                            "type": "string",
                            "description": "Arbitrary text about the CNAME"
                          },
                          "creationTime": {
                            "title": "",
                            "format": "date-time",
                            "type": "string",
                            "description": "Datetime when the resource is created"
                          },
                          "lastUpdateTime": {
                            "type": "string",
                            "title": "",
                            "format": "date-time",
                            "description": "Datetime when the resource is last updated"
                          }
                        }
                      }
                    },
                    "totalCount": {
                      "title": "",
                      "type": "integer",
                      "description": "Total number of resources"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "cnames": [
                        {
                          "cnameID": "12345601",
                          "cname": "cnamedemo1.ecp.qtlcdn.com",
                          "applicationID": "123456abcdef01",
                          "applicationName": "myapp1",
                          "description": "CNAME for myapp1",
                          "creationTime": "2020-10-02T15:00:00Z",
                          "lastUpdateTime": "2020-10-02T15:00:00Z"
                        },
                        {
                          "cnameID": "12345602",
                          "cname": "cnamedemo2.ecp.qtlcdn.com",
                          "applicationID": "123456abcdef02",
                          "applicationName": "myapp2",
                          "description": "CNAME for myapp2",
                          "creationTime": "2020-10-02T15:00:00Z",
                          "lastUpdateTime": "2020-10-02T15:00:00Z"
                        },
                        {
                          "cnameID": "12345603",
                          "cname": "cnamedemo3.ecp.qtlcdn.com",
                          "applicationID": "123456abcdef03",
                          "applicationName": "myapp3",
                          "description": "CNAME for myapp3",
                          "creationTime": "2020-10-02T15:00:00Z",
                          "lastUpdateTime": "2020-10-02T15:00:00Z"
                        }
                      ],
                      "totalCount": 3
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Refer to response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "InvalidListOffset": {
                    "value": {
                      "error": "InvalidListOffset",
                      "message": "The value of offset must be a valid non-negative integer."
                    }
                  },
                  "InvalidListLimit": {
                    "value": {
                      "error": "InvalidListLimit",
                      "message": "The value of limit must be a valid integer between 1 and 200, both inclusive."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "operationId": "get-cnames",
        "description": "Get a list of CNAMEs. You can specify a search parameter, offset and limit to filter the results.",
        "parameters": [
          {
            "name": "On-Behalf-Of",
            "in": "header",
            "description": "If you are a reseller, you can use this header to specify the ID of a child customer and make API call on their behalf.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "searchString",
            "description": "Keywords to search for particular CNAMEs. The searchString will be matched against the full form of a CNAME, i.e. including the prefix and zone of a CNAME."
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates the first resource to return. The first has an offset of 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": "0"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of resources to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": "100",
              "maximum": 200,
              "minimum": 1
            }
          }
        ]
      },
      "post": {
        "summary": "Create a CNAME",
        "operationId": "post-cnames",
        "responses": {
          "201": {
            "description": "This response indicates the CNAME is successfully created.",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "in": "header",
                "name": "Location",
                "description": "Location of the newly created resource.",
                "required": false
              },
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Refer to response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "InvalidCnamePrefix": {
                    "value": {
                      "error": "InvalidCnamePrefix",
                      "message": "Invalid prefix. A valid prefix must consist of lower-case alphanumeric characters and must be no more than 63 characters."
                    }
                  },
                  "RequiredFieldMissing": {
                    "value": {
                      "error": "RequiredFieldMissing",
                      "message": "The field {field} is required."
                    }
                  },
                  "ApplicationNotFound": {
                    "value": {
                      "error": "ApplicationNotFound",
                      "message": "The application ID given does not exist."
                    }
                  },
                  "ApplicationHasCname": {
                    "value": {
                      "error": "ApplicationHasCname",
                      "message": "A CNAME for the application already exists."
                    }
                  },
                  "ApplicationNotLoadBalanced": {
                    "value": {
                      "error": "ApplicationNotLoadBalanced",
                      "message": "Creating a CNAME for an application requires that the application be exposed by ECP layer4 load balancers."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "409": {
            "description": "This error is returned if you try to create a CNAME that already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "CnamePrefixExists",
                      "message": "The prefix is already taken."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "tags": [
          "CNAMEs"
        ],
        "description": "This interface allows you to create a CNAME for your ECP application. The CNAME created will let ECP route global traffic for the application. \n\nNote that ECP can manage global traffic for your application only when the application instances distributed at the edge locations are exposed by ECP defined LoadBalancer4 objects.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "prefix": {
                    "title": "",
                    "type": "string",
                    "description": "Prefix of a CNAME. Must be unique. Allows lower case alphanumeric characters only, and must be no more than 63 characters. Will be auto-generated if unspecified. The prefix will be combined with a fixed DNS zone to form a FQDN."
                  },
                  "applicationID": {
                    "title": "",
                    "type": "string",
                    "description": "ID of application that the CNAME is created for",
                    "x-examples": {}
                  },
                  "description": {
                    "title": "",
                    "type": "string",
                    "description": "Arbitrary text about the CNAME"
                  }
                },
                "required": [
                  "prefix",
                  "applicationID"
                ]
              },
              "examples": {
                "example-1": {
                  "value": {
                    "prefix": "47fcac940c0311ea977416f2b85656ba",
                    "applicationID": "3068f973f47f11e9977416f2b85638cd",
                    "description": "cname for my demo application"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": []
    },
    "/ecp/v1/cnames/{cnameID}": {
      "parameters": [
        {
          "type": "string",
          "name": "cnameID",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "ID of a CNAME"
        }
      ],
      "get": {
        "summary": "Query a CNAME",
        "tags": [
          "CNAMEs"
        ],
        "responses": {
          "200": {
            "description": "The response contains details of the CNAME.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "cnameID": {
                      "title": "",
                      "type": "string",
                      "description": "ID of a CNAME"
                    },
                    "cname": {
                      "title": "",
                      "type": "string",
                      "description": "FQDN CNAME"
                    },
                    "applicationID": {
                      "title": "",
                      "type": "string",
                      "description": "ID of application that the CNAME is created for",
                      "x-examples": {}
                    },
                    "applicationName": {
                      "title": "",
                      "type": "string",
                      "description": "Name of application that the CNAME is created for"
                    },
                    "description": {
                      "title": "",
                      "type": "string",
                      "description": "Arbitrary text about the CNAME"
                    },
                    "creationTime": {
                      "title": "",
                      "format": "date-time",
                      "type": "string",
                      "description": "Datetime when the resource is created"
                    },
                    "lastUpdateTime": {
                      "type": "string",
                      "title": "",
                      "format": "date-time",
                      "description": "Datetime when the resource is last updated"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "cnameID": "4cbb31772e0211eaae6398ac35ded775",
                      "cname": "b82745fdcad891.ecp.qtlcdn.com",
                      "applicationID": "fb46b51c125411eae36396ac35ded775",
                      "applicationName": "myapp1",
                      "description": "demo cname for myapp1",
                      "creationTime": "2020-10-03T08:23:20Z",
                      "lastUpdateTime": "2020-10-03T08:23:20Z"
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "CnameNotFound",
                      "message": "The CNAME ID given does not exist."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "operationId": "get-cname-by-ID",
        "description": "Get the details of an existing CNAME.",
        "parameters": [
          {
            "name": "On-Behalf-Of",
            "in": "header",
            "description": "If you are a reseller, you can use this header to specify the ID of a child customer and make API call on their behalf.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "patch": {
        "summary": "Update a CNAME",
        "operationId": "patch-cnames-by-ID",
        "responses": {
          "200": {
            "description": "This response indicates the CNAME is successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "cnameID": {
                      "title": "",
                      "type": "string",
                      "description": "ID of a CNAME"
                    },
                    "cname": {
                      "title": "",
                      "type": "string",
                      "description": "FQDN CNAME"
                    },
                    "applicationID": {
                      "title": "",
                      "type": "string",
                      "description": "ID of application that the CNAME is created for",
                      "x-examples": {}
                    },
                    "description": {
                      "title": "",
                      "type": "string",
                      "description": "Arbitrary text about the CNAME"
                    },
                    "creationTime": {
                      "title": "",
                      "format": "date-time",
                      "type": "string",
                      "description": "Datetime when the resource is created"
                    },
                    "lastUpdateTime": {
                      "type": "string",
                      "title": "",
                      "format": "date-time",
                      "description": "Datetime when the resource is last updated"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "cnameID": "4cbb31772e0211eaae6398ac35ded775",
                      "cname": "b82745fdcad891.ecp.qtlcdn.com",
                      "applicationID": "fb46b51c125411eae36396ac35ded775",
                      "applicationName": "myapp1",
                      "description": "demo cname for myapp1",
                      "creationTime": "2020-10-03T08:23:20Z",
                      "lastUpdateTime": "2020-10-03T08:23:20Z"
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "CnameNotFound",
                      "message": "The CNAME ID given does not exist."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "tags": [
          "CNAMEs"
        ],
        "description": "Update an existing CNAME. Only the field \"description\" can be updated. The fields \"prefix\" and \"applicationID\" cannot be updated. If the prefix needs to be changed, please delete the CNAME and create a new one using a new prefix.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "title": "",
                    "type": "string",
                    "description": "Arbitrary text about the CNAME"
                  }
                }
              },
              "examples": {
                "example-1": {
                  "value": {
                    "description": "demo cname for myapp1"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a CNAME",
        "operationId": "delete-cnames-by-ID",
        "responses": {
          "204": {
            "description": "This response is returned if the CNAME is successfully deleted.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "CnameNotFound",
                      "message": "The CNAME ID given does not exist."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "tags": [
          "CNAMEs"
        ],
        "description": "Delete an existing CNAME.\n\nAfter the CNAME is deleted, ECP will stop routing traffic for your application. Please make sure you've made necessary changes to the DNS record(s) for your application before deleting the CNAME."
      }
    },
    "/ecp/v1/metrics/{metric}": {
      "parameters": [
        {
          "name": "metric",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "enum": [
              "inboundTraffic",
              "inboundBandwidth",
              "outboundTraffic",
              "outboundBandwidth",
              "totalTraffic",
              "totalBandwidth",
              "podCount",
              "vcpu",
              "mem",
              "local-ssd",
              "persist-ssd",
              "ipCount"
            ]
          },
          "description": "Usage metric on compute, storage and network resources.\n\nMetric | Description | Measured in\n--- | --- | --- \ninboundTraffic | amount of data transmitted to ECP during a time period | byte\ninboundBandwidth | rate of data transfer to ECP during a time period | bps\noutboundTraffic | amount of data transmitted from ECP during a time period | byte\noutboundBandwidth | rate of data transfer from ECP during a time period | bps\ntotalTraffic | amount of data transmitted to and from ECP during a time period | byte\ntotalBandwidth | rate of data transfer to and from ECP during a time period | bps\nvcpu | amount of CPU cores allocated and available during a time period | core\nmem | amount of memory allocated and available during a time peirod | byte\nlocal-ssd | amount of local storage capacity allocated and available during a time period | byte\npersist-ssd | amount of remote storage capacity allocated and available during a time period | byte\npodCount | number of kubernetes pods existing and maintained for your application(s) during a time period | ea\nipCount | number of public IPv4 addresses allocated and available during a time period | ea\n"
        }
      ],
      "get": {
        "summary": "Get resources usage across all PoPs",
        "tags": [
          "Reports"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "properties": {
                    "data": {
                      "type": "array",
                      "description": "array of time serialized metric values",
                      "items": {
                        "type": "object",
                        "properties": {
                          "timestamp": {
                            "type": "string",
                            "description": "timestamp"
                          },
                          "value": {
                            "type": "number",
                            "description": "metric value"
                          }
                        }
                      }
                    }
                  },
                  "type": "object"
                },
                "examples": {
                  "traffic report at 5 min interval": {
                    "value": {
                      "data": [
                        {
                          "timestamp": "2019-10-02T15:00:00Z",
                          "value": 216326
                        },
                        {
                          "timestamp": "2019-10-02T15:05:00Z",
                          "value": 214326
                        },
                        {
                          "timestamp": "2019-10-02T15:10:00Z",
                          "value": 216226
                        },
                        {
                          "timestamp": "2019-10-02T15:15:00Z",
                          "value": 212126
                        },
                        {
                          "timestamp": "2019-10-02T15:20:00Z",
                          "value": 215326
                        }
                      ]
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "InvalidDateFormat",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "InvalidDateFormat"
                        },
                        "message": {
                          "type": "string",
                          "description": "Invalid parameter {startTime / endTime}. {startTime/endTime} is not a valid RFC3339 timestamp. The timestamp should be in \"yyyy-MM-dd'T'HH:mm:ss'Z'\" format."
                        }
                      }
                    },
                    {
                      "title": "InvalidRange",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "InvalidRange"
                        },
                        "message": {
                          "type": "string",
                          "description": "One of: \"The max time span of {interval} report must be no more than {xxx days}.\" \"The parameter 'startTime' cannot be a time in the future.\" \"The parameter 'endTime' should be after 'startTime'.\""
                        }
                      }
                    },
                    {
                      "title": "InvalidInterval",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "InvalidInterval"
                        },
                        "message": {
                          "type": "string",
                          "description": "The interval requested is invalid."
                        }
                      }
                    },
                    {
                      "title": "InvalidReportRange",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "InvalidReportRange"
                        },
                        "message": {
                          "type": "string",
                          "description": "A valid report range shall be “self-only”, “children-only”, or “self+children”."
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "InvalidDateFormat",
                      "message": "The format of startTime or endTime is invalid."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "title": "InvalidMetric",
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "InvalidMetric"
                    },
                    "message": {
                      "type": "string",
                      "description": "The metric given is invalid."
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "InvalidMetric",
                      "message": "The metric given is invalid."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "operationId": "get-summary-reports",
        "description": "Get a summary of compute, storage and network resources usage across all PoPs. ",
        "parameters": [
          {
            "in": "query",
            "name": "startTime",
            "description": "RFC 3339 date indicating the beginning of a time period. Example: <code>startTime=2019-10-30T00:00:00Z</code>. Your startTime may be rounded down to the nearest minute, hour, or day depending on the interval parameter. For example, if you enter <code>startTime=2019-09-05T03:14:01Z&interval=hourly</code>, the response includes data beginning at 2019-09-05T03:00:00Z.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "endTime",
            "description": "RFC 3339 date indicating the end of a time period. Example: <code>endTime=2019-11-14T00:00:00Z</code> Your endTime may be rounded up to the nearest minute, hour, or day depending on the interval parameter. For example, if you enter <code>endTime=2019-09-05T03:14:01Z&interval=hourly</code>, the response includes data ending at 2019-09-05T04:00:00Z.",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "oneminute",
                "fiveminutes",
                "hourly",
                "daily",
                "monthly"
              ]
            },
            "name": "interval",
            "required": true,
            "description": "The granularity of returned data. Raw report data is generated per 1 minute. The data is aggregated to give reports of different granularities. The aggregation method is “sum” for the metrics \"inboundTraffic\", \"outboundTraffic\" and \"totalTraffic\". For all other metrics, the aggregation method is \"average\". \n\n\"oneminute\" interval is supported only when the timespan is not longer than 7 days. \"fiveminutes\" interval is supported only when the timespan is not longer than 31 days.",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "default": "self-only",
              "enum": [
                "self-only",
                "children-only",
                "self+children"
              ]
            },
            "name": "Report-Range",
            "description": "An optional header that resellers can use to specify whether to include data from children customers.",
            "in": "header"
          },
          {
            "name": "On-Behalf-Of",
            "in": "header",
            "description": "If you are a reseller, you can use this header to specify the ID of a child customer and make API call on their behalf.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/ecp/v1/metrics/{metric}/servicezones": {
      "parameters": [
        {
          "name": "metric",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "enum": [
              "inboundTraffic",
              "inboundBandwidth",
              "outboundTraffic",
              "outboundBandwidth",
              "totalTraffic",
              "totalBandwidth",
              "podCount",
              "vcpu",
              "mem",
              "local-ssd",
              "persist-ssd",
              "ipCount"
            ]
          },
          "description": "Usage metric on compute, storage and network resources.\n\nMetric | Description | Measured in\n--- | --- | --- \ninboundTraffic | amount of data transmitted to ECP during a time period | byte\ninboundBandwidth | rate of data transfer to ECP during a time period | bps\noutboundTraffic | amount of data transmitted from ECP during a time period | byte\noutboundBandwidth | rate of data transfer from ECP during a time period | bps\ntotalTraffic | amount of data transmitted to and from ECP during a time period | byte\ntotalBandwidth | rate of data transfer to and from ECP during a time period | bps\nvcpu | amount of CPU cores allocated and available during a time period | core\nmem | amount of memory allocated and available during a time peirod | byte\nlocal-ssd | amount of local storage capacity allocated and available during a time period | byte\npersist-ssd | amount of remote storage capacity allocated and available during a time period | byte\npodCount | number of kubernetes pods existing and maintained for your application(s) during a time period | ea\nipCount | number of public IPv4 addresses allocated and available during a time period | ea\n"
        }
      ],
      "get": {
        "summary": "Get resources usage per service zones",
        "tags": [
          "Reports"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "properties": {
                    "series": {
                      "type": "array",
                      "description": "usage reports grouped per service zones",
                      "items": {
                        "type": "object",
                        "properties": {
                          "serviceZone": {
                            "type": "string",
                            "enum": [
                              "business",
                              "standard",
                              "premium"
                            ]
                          },
                          "data": {
                            "type": "array",
                            "description": "array of time serialized metric values",
                            "items": {
                              "type": "object",
                              "properties": {
                                "timestamp": {
                                  "type": "string",
                                  "description": "timestamp"
                                },
                                "value": {
                                  "type": "number",
                                  "description": "metric value"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "traffic report at 5 minute interval": {
                    "value": {
                      "series": [
                        {
                          "serviceZone": "business",
                          "data": [
                            {
                              "timestamp": "2019-10-02T15:00:00Z",
                              "value": 216326
                            },
                            {
                              "timestamp": "2019-10-02T15:05:00Z",
                              "value": 214326
                            },
                            {
                              "timestamp": "2019-10-02T15:10:00Z",
                              "value": 216226
                            },
                            {
                              "timestamp": "2019-10-02T15:15:00Z",
                              "value": 212126
                            },
                            {
                              "timestamp": "2019-10-02T15:20:00Z",
                              "value": 215326
                            }
                          ]
                        },
                        {
                          "serviceZone": "standard",
                          "data": [
                            {
                              "timestamp": "2019-10-02T15:00:00Z",
                              "value": 0
                            },
                            {
                              "timestamp": "2019-10-02T15:05:00Z",
                              "value": 0
                            },
                            {
                              "timestamp": "2019-10-02T15:10:00Z",
                              "value": 0
                            },
                            {
                              "timestamp": "2019-10-02T15:15:00Z",
                              "value": 0
                            },
                            {
                              "timestamp": "2019-10-02T15:20:00Z",
                              "value": 0
                            }
                          ]
                        },
                        {
                          "serviceZone": "premium",
                          "data": [
                            {
                              "timestamp": "2019-10-02T15:00:00Z",
                              "value": 0
                            },
                            {
                              "timestamp": "2019-10-02T15:05:00Z",
                              "value": 0
                            },
                            {
                              "timestamp": "2019-10-02T15:10:00Z",
                              "value": 0
                            },
                            {
                              "timestamp": "2019-10-02T15:15:00Z",
                              "value": 0
                            },
                            {
                              "timestamp": "2019-10-02T15:20:00Z",
                              "value": 0
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "InvalidDateFormat",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "InvalidDateFormat"
                        },
                        "message": {
                          "type": "string",
                          "description": "Invalid parameter {startTime / endTime}. {startTime/endTime} is not a valid RFC3339 timestamp. The timestamp should be in \"yyyy-MM-dd'T'HH:mm:ss'Z'\" format."
                        }
                      }
                    },
                    {
                      "title": "InvalidRange",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "InvalidRange"
                        },
                        "message": {
                          "type": "string",
                          "description": "One of: \"The max time span of {interval} report must be no more than {xxx days}.\" \"The parameter 'startTime' cannot be a time in the future.\" \"The parameter 'endTime' should be after 'startTime'.\""
                        }
                      }
                    },
                    {
                      "title": "InvalidInterval",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "InvalidInterval"
                        },
                        "message": {
                          "type": "string",
                          "description": "The interval requested is invalid."
                        }
                      }
                    },
                    {
                      "title": "InvalidReportRange",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "InvalidReportRange"
                        },
                        "message": {
                          "type": "string",
                          "description": "A valid report range shall be “self-only”, “children-only”, or “self+children”."
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "InvalidDateFormat",
                      "message": "The format of startTime or endTime is invalid."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "title": "InvalidMetric",
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "InvalidMetric"
                    },
                    "message": {
                      "type": "string",
                      "description": "The metric given is invalid."
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "InvalidMetric",
                      "message": "The metric given is invalid."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "operationId": "get-reports-by-servicezones",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "default": "self-only",
              "enum": [
                "self-only",
                "children-only",
                "self+children"
              ]
            },
            "name": "Report-Range",
            "description": "An optional header that resellers can use to specify whether to include data from children customers.",
            "in": "header"
          },
          {
            "in": "query",
            "name": "startTime",
            "description": "RFC 3339 date indicating the beginning of a time period. Example: <code>startTime=2019-10-30T00:00:00Z</code>. Your startTime may be rounded down to the nearest minute, hour, or day depending on the interval parameter. For example, if you enter <code>startTime=2019-09-05T03:14:01Z&interval=hourly</code>, the response includes data beginning at 2019-09-05T03:00:00Z.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "endTime",
            "description": "RFC 3339 date indicating the end of a time period. Example: <code>endTime=2019-11-14T00:00:00Z</code> Your endTime may be rounded up to the nearest minute, hour, or day depending on the interval parameter. For example, if you enter <code>endTime=2019-09-05T03:14:01Z&interval=hourly</code>, the response includes data ending at 2019-09-05T04:00:00Z.",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "oneminute",
                "fiveminutes",
                "hourly",
                "daily",
                "monthly"
              ]
            },
            "name": "interval",
            "required": true,
            "description": "The granularity of returned data. Raw report data is generated per 1 minute. The data is aggregated to give reports of different granularities. The aggregation method is “sum” for the metrics \"inboundTraffic\", \"outboundTraffic\" and \"totalTraffic\". For all other metrics, the aggregation method is \"average\". \n\n\"oneminute\" interval is supported only when the timespan is not longer than 7 days. \"fiveminutes\" interval is supported only when the timespan is not longer than 31 days.",
            "in": "query"
          },
          {
            "name": "On-Behalf-Of",
            "in": "header",
            "description": "If you are a reseller, you can use this header to specify the ID of a child customer and make API call on their behalf.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Get reports on resources usage grouped per service zone"
      }
    },
    "/ecp/v1/metrics/{metric}/applications/{applicationID}/instances/{instanceID}": {
      "parameters": [
        {
          "type": "string",
          "name": "instanceID",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "ID of a pod created for an ECP application"
        },
        {
          "name": "metric",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "enum": [
              "inboundTraffic",
              "inboundBandwidth",
              "outboundTraffic",
              "outboundBandwidth",
              "cpuUsage",
              "memUsage",
              "diskUsage"
            ]
          },
          "description": "Usage metric on compute, storage and network resources.\n\nMetric | Description | Measured in\n--- | --- | ---\ninboundTraffic | amount of data transmitted to a pod during a time period | byte\ninboundBandwidth | rate of data transfer to a pod during a time period | bps\noutboundTraffic | amount of data transmitted from a pod during a time period | byte\noutboundBandwidth | rate of data transfer from a pod during a time period | bps\ncpuUsage | amount of CPU cores consumed by container process(es) in a pod during a time period | core\nmemUsage | amount of memory consumed by container process(es) in a pod during a time period | byte\ndiskUsage | Disk usage rate. Here \"disk\" could be the rootFS of a container in a pod, or a PVC volume attached to a pod. | --\n"
        },
        {
          "name": "applicationID",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "ID of an ECP application"
        }
      ],
      "get": {
        "summary": "Get resources usage by an instance",
        "tags": [
          "Reports"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "CPU/memory/traffic report",
                      "properties": {
                        "data": {
                          "type": "array",
                          "description": "Array of time serialized metric values. This schema is used when the queried metric is a metric other than 'diskUsage'",
                          "items": {
                            "type": "object",
                            "properties": {
                              "timestamp": {
                                "type": "string",
                                "description": "timestamp"
                              },
                              "value": {
                                "type": "number",
                                "description": "metric value"
                              }
                            }
                          }
                        }
                      },
                      "type": "object"
                    },
                    {
                      "title": "Storage report",
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "description": "Array of time serialized metric values. This schema is used when the queried metric is 'diskUsage'",
                          "items": {
                            "type": "object",
                            "properties": {
                              "timestamp": {
                                "type": "string",
                                "description": "timestamp"
                              },
                              "volumes": {
                                "type": "array",
                                "description": "metric value",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "volume": {
                                      "type": "string",
                                      "description": "Could be a container rootFS or a PVC volume attached to a pod"
                                    },
                                    "value": {
                                      "type": "number",
                                      "description": "Disk usage rate, e.g. \"0.2\" means 20% of disk capacity is used."
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "description": "If the metric is \"diskUsage\", the response will be in this format."
                    }
                  ],
                  "description": "There are 2 response schemas. The schema for \"diskUsage\" metric is different from the schema for all other metrics."
                },
                "examples": {
                  "cpuUsage": {
                    "value": {
                      "data": [
                        {
                          "timestamp": "2019-10-02T15:00:00Z",
                          "value": 1.3
                        },
                        {
                          "timestamp": "2019-10-02T15:05:00Z",
                          "value": 1.2
                        },
                        {
                          "timestamp": "2019-10-02T15:10:00Z",
                          "value": 1.5
                        },
                        {
                          "timestamp": "2019-10-02T15:15:00Z",
                          "value": 1.3
                        },
                        {
                          "timestamp": "2019-10-02T15:20:00Z",
                          "value": 1.2
                        }
                      ]
                    }
                  },
                  "diskUsage": {
                    "value": {
                      "data": [
                        {
                          "timestamp": "2019-10-02T15:00:00Z",
                          "volumes": [
                            {
                              "volume": "Root_container1",
                              "value": 0.22
                            },
                            {
                              "volume": "Root_container2",
                              "value": 0.36
                            },
                            {
                              "volume": "PVC_data",
                              "value": 0.27
                            }
                          ]
                        },
                        {
                          "timestamp": "2019-10-02T15:05:00Z",
                          "volumes": [
                            {
                              "volume": "Root_container1",
                              "value": 0.22
                            },
                            {
                              "volume": "Root_container2",
                              "value": 0.16
                            },
                            {
                              "volume": "PVC_data",
                              "value": 0.27
                            }
                          ]
                        },
                        {
                          "timestamp": "2019-10-02T15:10:00Z",
                          "volumes": [
                            {
                              "volume": "Root_container1",
                              "value": 0.22
                            },
                            {
                              "volume": "Root_container2",
                              "value": 0.22
                            },
                            {
                              "volume": "PVC_data",
                              "value": 0.28
                            }
                          ]
                        },
                        {
                          "timestamp": "2019-10-02T15:15:00Z",
                          "volumes": [
                            {
                              "volume": "Root_container1",
                              "value": 0.22
                            },
                            {
                              "volume": "Root_container2",
                              "value": 0.36
                            },
                            {
                              "volume": "PVC_data",
                              "value": 0.27
                            }
                          ]
                        },
                        {
                          "timestamp": "2019-10-02T15:20:00Z",
                          "volumes": [
                            {
                              "volume": "Root_container1",
                              "value": 0.22
                            },
                            {
                              "volume": "Root_container2",
                              "value": 0.16
                            },
                            {
                              "volume": "PVC_data",
                              "value": 0.26
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "InvalidDateFormat",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "InvalidDateFormat"
                        },
                        "message": {
                          "type": "string",
                          "description": "Invalid parameter {startTime / endTime}. {startTime/endTime} is not a valid RFC3339 timestamp. The timestamp should be in \"yyyy-MM-dd'T'HH:mm:ss'Z'\" format."
                        }
                      }
                    },
                    {
                      "title": "InvalidRange",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "InvalidRange"
                        },
                        "message": {
                          "type": "string",
                          "description": "One of: \"The max time span of {interval} report must be no more than {xxx days}.\" \"The parameter 'startTime' cannot be a time in the future.\" \"The parameter 'endTime' should be after 'startTime'.\""
                        }
                      }
                    },
                    {
                      "title": "InvalidInterval",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "InvalidInterval"
                        },
                        "message": {
                          "type": "string",
                          "description": "The interval requested is invalid."
                        }
                      }
                    },
                    {
                      "title": "InvalidReportRange",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "InvalidReportRange"
                        },
                        "message": {
                          "type": "string",
                          "description": "A valid report range shall be “self-only”, “children-only”, or “self+children”."
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "InvalidDateFormat",
                      "message": "The format of startTime or endTime is invalid."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "InvalidMetric",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "InvalidMetric"
                        },
                        "message": {
                          "type": "string",
                          "description": "The metric given is invalid."
                        }
                      }
                    },
                    {
                      "title": "ApplicationNotExist",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "ApplicationNotExist"
                        },
                        "message": {
                          "type": "string",
                          "description": "The application ID given does not exist."
                        }
                      }
                    },
                    {
                      "title": "InstanceNotFound",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "InstanceNotFound"
                        },
                        "message": {
                          "type": "string",
                          "description": "The instance specified does not exist, or is not an instance of the given application."
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "InvalidMetric",
                      "message": "The metric given is invalid."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "operationId": "get-reports-for-an-instance",
        "description": "Get reports on resources usage by a specific ECP application instance. An instance means a kubernetes pod.",
        "parameters": [
          {
            "in": "query",
            "name": "startTime",
            "description": "RFC 3339 date indicating the beginning of a time period. Example: <code>startTime=2019-10-30T00:00:00Z</code>. Your startTime may be rounded down to the nearest minute, hour, or day depending on the interval parameter. For example, if you enter <code>startTime=2019-09-05T03:14:01Z&interval=hourly</code>, the response includes data beginning at 2019-09-05T03:00:00Z.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "endTime",
            "description": "RFC 3339 date indicating the end of a time period. Example: <code>endTime=2019-11-14T00:00:00Z</code> Your endTime may be rounded up to the nearest minute, hour, or day depending on the interval parameter. For example, if you enter <code>endTime=2019-09-05T03:14:01Z&interval=hourly</code>, the response includes data ending at 2019-09-05T04:00:00Z.",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "oneminute",
                "fiveminutes",
                "hourly",
                "daily",
                "monthly"
              ]
            },
            "name": "interval",
            "required": true,
            "description": "The granularity of returned data. Raw report data is generated per 1 minute. The data is aggregated to give reports of different granularities. The aggregation method is “sum” for the metrics \"inboundTraffic\", and \"outboundTraffic\". For all other metrics, the aggregation method is \"average\".",
            "in": "query"
          },
          {
            "name": "On-Behalf-Of",
            "in": "header",
            "description": "If you are a reseller, you can use this header to specify the ID of a child customer and make API call on their behalf.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/ecp/v1/resourcequota/{quotaname}": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "enum": [
              "cpu",
              "mem",
              "ip",
              "local-ssd",
              "persist-ssd"
            ]
          },
          "name": "quotaname",
          "in": "path",
          "required": true,
          "description": "Name of a compute, storage or network resource quota.\n\nQuota | Description\n--- | ---\ncpu | Quota on the maximum amount of CPU cores that can be requested \nmem | Quota on the maximum amount of memory that can be requested\nip | Quota on the maximum number of public IPv4 addresses that can be requested\nlocal-ssd | Quota on the maximum capacity of local storage that can be requested\npersist-ssd | Quota on the maximum capacity of remote storage that can be requested\n"
        }
      ],
      "get": {
        "summary": "Get resource quota consumption",
        "tags": [
          "Reports"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "available": {
                      "type": "number",
                      "description": "Amount of balance resource quota"
                    },
                    "used": {
                      "type": "number",
                      "description": "Amount of resource quota that has been consumed"
                    }
                  }
                },
                "examples": {
                  "CPU quota": {
                    "value": {
                      "available": 78,
                      "used": 32
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "title": "InvalidQuota",
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "InvalidQuota"
                    },
                    "message": {
                      "type": "string",
                      "description": "The quota name given is invalid."
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "InvalidQuota",
                      "message": "The quota name given is invalid."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "used": {
                      "type": "number",
                      "description": "Amount of resource quota that has been consumed"
                    },
                    "available": {
                      "type": "number",
                      "description": "Amount of balance resource quota"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-resourcequota",
        "description": "Query the amount of quotas on compute, storage and network resources available to your ECP account.",
        "parameters": [
          {
            "name": "On-Behalf-Of",
            "in": "header",
            "description": "If you are a reseller, you can use this header to specify the ID of a child customer and make API call on their behalf.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/ecp/v1/metrics/{metric}/pops/{pop}": {
      "parameters": [
        {
          "name": "metric",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "enum": [
              "inboundTraffic",
              "inboundBandwidth",
              "outboundTraffic",
              "outboundBandwidth",
              "totalTraffic",
              "totalBandwidth",
              "podCount",
              "vcpu",
              "mem",
              "local-ssd",
              "persist-ssd",
              "ipCount"
            ]
          },
          "description": "Usage metric on compute, storage and network resources.\n\nMetric | Description | Measured in\n--- | --- | --- \ninboundTraffic | amount of data transmitted to ECP during a time period | byte\ninboundBandwidth | rate of data transfer to ECP during a time period | bps\noutboundTraffic | amount of data transmitted from ECP during a time period | byte\noutboundBandwidth | rate of data transfer from ECP during a time period | bps\ntotalTraffic | amount of data transmitted to and from ECP during a time period | byte\ntotalBandwidth | rate of data transfer to and from ECP during a time period | bps\nvcpu | amount of CPU cores allocated and available during a time period | core\nmem | amount of memory allocated and available during a time peirod | byte\nlocal-ssd | amount of local storage capacity allocated and available during a time period | byte\npersist-ssd | amount of remote storage capacity allocated and available during a time period | byte\npodCount | number of kubernetes pods existing and maintained for your application(s) during a time period | ea\nipCount | number of public IPv4 addresses allocated and available during a time period | ea\n"
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "pop",
          "description": "Code of an ECP PoP",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get resources usage at a PoP",
        "tags": [
          "Reports"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "properties": {
                    "data": {
                      "type": "array",
                      "description": "array of time serialized metric values",
                      "items": {
                        "type": "object",
                        "properties": {
                          "timestamp": {
                            "type": "string",
                            "description": "timestamp"
                          },
                          "value": {
                            "type": "number",
                            "description": "metric value"
                          }
                        }
                      }
                    }
                  },
                  "type": "object"
                },
                "examples": {
                  "traffic report at 5 minute interval": {
                    "value": {
                      "data": [
                        {
                          "timestamp": "2019-10-02T15:00:00Z",
                          "value": 216326
                        },
                        {
                          "timestamp": "2019-10-02T15:05:00Z",
                          "value": 214326
                        },
                        {
                          "timestamp": "2019-10-02T15:10:00Z",
                          "value": 216226
                        },
                        {
                          "timestamp": "2019-10-02T15:15:00Z",
                          "value": 212126
                        },
                        {
                          "timestamp": "2019-10-02T15:20:00Z",
                          "value": 215326
                        }
                      ]
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "InvalidDateFormat",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "InvalidDateFormat"
                        },
                        "message": {
                          "type": "string",
                          "description": "Invalid parameter {startTime / endTime}. {startTime/endTime} is not a valid RFC3339 timestamp. The timestamp should be in \"yyyy-MM-dd'T'HH:mm:ss'Z'\" format."
                        }
                      }
                    },
                    {
                      "title": "InvalidRange",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "InvalidRange"
                        },
                        "message": {
                          "type": "string",
                          "description": "One of: \"The max time span of {interval} report must be no more than {xxx days}.\" \"The parameter 'startTime' cannot be a time in the future.\" \"The parameter 'endTime' should be after 'startTime'.\""
                        }
                      }
                    },
                    {
                      "title": "InvalidInterval",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "InvalidInterval"
                        },
                        "message": {
                          "type": "string",
                          "description": "The interval requested is invalid."
                        }
                      }
                    },
                    {
                      "title": "InvalidReportRange",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "InvalidReportRange"
                        },
                        "message": {
                          "type": "string",
                          "description": "A valid report range shall be “self-only”, “children-only”, or “self+children”."
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "InvalidDateFormat",
                      "message": "The format of startTime or endTime is invalid."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "InvalidMetric",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "InvalidMetric"
                        },
                        "message": {
                          "type": "string",
                          "description": "The metric given is invalid."
                        }
                      }
                    },
                    {
                      "title": "PoPNotExist",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "PoPNotExist"
                        },
                        "message": {
                          "type": "string",
                          "description": "The PoP given is invalid or does not exist."
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "InvalidMetric",
                      "message": "The metric given is invalid."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "operationId": "get-reports-for-a-pop",
        "description": "Get reports on resources usage at a specific PoP",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "default": "self-only",
              "enum": [
                "self-only",
                "children-only",
                "self+children"
              ]
            },
            "name": "Report-Range",
            "description": "An optional header that resellers can use to specify whether to include data from children customers.",
            "in": "header"
          },
          {
            "in": "query",
            "name": "startTime",
            "description": "RFC 3339 date indicating the beginning of a time period. Example: <code>startTime=2019-10-30T00:00:00Z</code>. Your startTime may be rounded down to the nearest minute, hour, or day depending on the interval parameter. For example, if you enter <code>startTime=2019-09-05T03:14:01Z&interval=hourly</code>, the response includes data beginning at 2019-09-05T03:00:00Z.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "endTime",
            "description": "RFC 3339 date indicating the end of a time period. Example: <code>endTime=2019-11-14T00:00:00Z</code> Your endTime may be rounded up to the nearest minute, hour, or day depending on the interval parameter. For example, if you enter <code>endTime=2019-09-05T03:14:01Z&interval=hourly</code>, the response includes data ending at 2019-09-05T04:00:00Z.",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "oneminute",
                "fiveminutes",
                "hourly",
                "daily",
                "monthly"
              ]
            },
            "name": "interval",
            "required": true,
            "description": "The granularity of returned data. Raw report data is generated per 1 minute. The data is aggregated to give reports of different granularities. The aggregation method is “sum” for the metrics \"inboundTraffic\", \"outboundTraffic\" and \"totalTraffic\". For all other metrics, the aggregation method is \"average\". \n\n\"oneminute\" interval is supported only when the timespan is not longer than 7 days. \"fiveminutes\" interval is supported only when the timespan is not longer than 31 days.",
            "in": "query"
          },
          {
            "name": "On-Behalf-Of",
            "in": "header",
            "description": "If you are a reseller, you can use this header to specify the ID of a child customer and make API call on their behalf.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/ecp/v1/regions": {
      "get": {
        "summary": "Query list of ECP regions",
        "responses": {
          "200": {
            "description": "This response contains a list of ECP regions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "regions": {
                      "type": "array",
                      "description": "Array of ECP regions",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string",
                            "description": "Code of an ECP region, e.g. \"APAC\""
                          },
                          "description": {
                            "type": "string",
                            "description": "Some text describing a region, e.g. “Asia Pacific without mainland China” for the region “APAC”."
                          },
                          "priority": {
                            "type": "integer",
                            "description": "Priority of a region which affects how instances of an application are distributed. Valid value is within the range 1~100. Higher value means higher priority. Each ECP PoP might be grouped into multiple ECP regions of differnt priorities. When ECP distributes application instances to ECP PoPs, regions of higher priority will be satisfied firt."
                          }
                        }
                      }
                    },
                    "totalCount": {
                      "title": "",
                      "type": "integer",
                      "description": "Total number of resources"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "regions": [
                        {
                          "code": "NA-WEST",
                          "description": "East of North America",
                          "priority": 10
                        },
                        {
                          "code": "NA-EAST",
                          "description": "West of North America",
                          "priority": 10
                        },
                        {
                          "code": "EU",
                          "description": "Europe",
                          "priority": 10
                        },
                        {
                          "code": "APAC",
                          "description": "Asia Pacific excluding mainland China",
                          "priority": 10
                        },
                        {
                          "code": "CN",
                          "description": "mainland China",
                          "priority": 10
                        }
                      ],
                      "totalCount": 5
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Refer to response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "InvalidListOffset": {
                    "value": {
                      "error": "InvalidListOffset",
                      "message": "The value of offset must be a valid non-negative integer."
                    }
                  },
                  "InvalidListLimit": {
                    "value": {
                      "error": "InvalidListLimit",
                      "message": "The value of limit must be a valid integer between 0 and 200, both inclusive. Set limit to 0 to retrieve a complete list."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "operationId": "get-regions",
        "description": "Get a list of ECP regions.",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates the first resource to return. The first has an offset of 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": "0"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of resources to return. To retrieve a complete list of resources, please pass this parameter with value “0”.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": "100",
              "maximum": 200,
              "minimum": 0
            }
          }
        ],
        "tags": [
          "ECP Locations"
        ]
      },
      "parameters": []
    },
    "/ecp/v1/pops": {
      "get": {
        "summary": "Query list of ECP PoPs",
        "responses": {
          "200": {
            "description": "The response contains a list of ECP PoPs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "PoPs": {
                      "type": "array",
                      "description": "Array of ECP PoPs",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string",
                            "description": "Code of an ECP PoP"
                          },
                          "description": {
                            "type": "string",
                            "description": "Full name of an ECP PoP, indicating country and city where the PoP is located"
                          },
                          "status": {
                            "type": "string",
                            "enum": [
                              "online",
                              "offline",
                              "suspended"
                            ],
                            "description": "Status of an ECP PoP"
                          },
                          "serviceZone": {
                            "type": "string",
                            "enum": [
                              "business",
                              "standard",
                              "premium"
                            ],
                            "description": "Service zone that reflects the costs of an ECP PoP",
                            "deprecated": true
                          },
                          "serverGroup": {
                            "type": "string",
                            "enum": [
                              "standard",
                              "premium",
                              "premium+",
                              "ultra"
                            ],
                            "description": "Server group that reflects the costs of an ECP PoP"
                          },
                          "longitude": {
                            "description": "Geographic longtitude of an ECP PoP",
                            "type": "string"
                          },
                          "latitude": {
                            "description": "Geographic latitude of an ECP PoP",
                            "type": "string"
                          },
                          "regions": {
                            "type": "array",
                            "description": "Array of ECP regions that an ECP PoP is grouped into",
                            "items": {
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": "string",
                                  "description": "Code of an ECP region"
                                },
                                "description": {
                                  "type": "string",
                                  "description": "Description of an ECP region"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "totalCount": {
                      "title": "",
                      "type": "integer",
                      "description": "Total number of resources"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "PoPs": [
                        {
                          "code": "den",
                          "description": "Denver,US",
                          "latitude": "39.4421",
                          "longitude": "-104.5905",
                          "regions": [
                            {
                              "code": "NA-WEST",
                              "description": "West of North America"
                            }
                          ],
                          "serviceZone": "business",
                          "serverGroup": "standard",
                          "status": "online"
                        },
                        {
                          "code": "jfk",
                          "description": "New York,US",
                          "latitude": "40.40",
                          "longitude": "-73.56",
                          "regions": [
                            {
                              "code": "NA-EAST",
                              "description": "East of North America"
                            }
                          ],
                          "serviceZone": "business",
                          "serverGroup": "standard",
                          "status": "online"
                        },
                        {
                          "code": "iad",
                          "description": "Ashburn,US",
                          "latitude": "39.03",
                          "longitude": "-77.48",
                          "regions": [
                            {
                              "code": "NA-EAST",
                              "description": "East of North America"
                            }
                          ],
                          "serviceZone": "business",
                          "serverGroup": "standard",
                          "status": "online"
                        },
                        {
                          "code": "sjc",
                          "description": "San Jose,US",
                          "latitude": "37.1815",
                          "longitude": "-121.2252",
                          "regions": [
                            {
                              "code": "NA-WEST",
                              "description": "West of North America"
                            }
                          ],
                          "serviceZone": "business",
                          "serverGroup": "standard",
                          "status": "online"
                        },
                        {
                          "code": "mxp",
                          "description": "Milan,IT",
                          "latitude": "45.2801",
                          "longitude": "9.1124",
                          "regions": [
                            {
                              "code": "EU",
                              "description": "Europe"
                            }
                          ],
                          "serviceZone": "business",
                          "serverGroup": "standard",
                          "status": "online"
                        },
                        {
                          "code": "waw",
                          "description": "Warsaw,PL",
                          "latitude": "52.1348",
                          "longitude": "21.0039",
                          "regions": [
                            {
                              "code": "EU",
                              "description": "Europe"
                            }
                          ],
                          "serviceZone": "business",
                          "serverGroup": "standard",
                          "status": "online"
                        }
                      ],
                      "totalCount": 6
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Refer to response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "InvalidListOffset": {
                    "value": {
                      "error": "InvalidListOffset",
                      "message": "The value of offset must be a valid non-negative integer."
                    }
                  },
                  "InvalidListLimit": {
                    "value": {
                      "error": "InvalidListLimit",
                      "message": "The value of limit must be a valid integer between 0 and 200, both inclusive. Set limit to 0 to retrieve a complete list."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "operationId": "get-pops",
        "description": "Get a list of ECP PoPs.",
        "parameters": [
          {
            "in": "query",
            "name": "searchString",
            "description": "Keywords to search for particular resources. The value is matched against the code and description of a PoP."
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "online",
                "offline",
                "suspended"
              ]
            },
            "in": "query",
            "name": "status",
            "description": "Status of an ECP PoP"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "region",
            "description": "Code of an ECP region which represents a set of ECP PoPs grouped together"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "business",
                "standard",
                "premium"
              ]
            },
            "in": "query",
            "name": "serviceZone",
            "description": "Code of an ECP service zone which represents a set of ECP PoPs grouped per costs for billing purpose",
            "deprecated": true
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "standard",
                "premium",
                "premium+",
                "ultra"
              ]
            },
            "in": "query",
            "name": "serverGroup",
            "description": "ECP server group which represents a set of ECP PoPs grouped per costs for billing purpose"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates the first resource to return. The first has an offset of 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": "0"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of resources to return. To retrieve a complete list of resources, please pass this parameter with value “0”.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": "100",
              "maximum": 200,
              "minimum": 0
            }
          }
        ],
        "tags": [
          "ECP Locations"
        ]
      },
      "parameters": []
    },
    "/ecp/v1/applications": {
      "get": {
        "summary": "Query applications list",
        "tags": [
          "Applications"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "applications": {
                      "type": "array",
                      "description": "Array of ECP applications",
                      "items": {
                        "type": "object",
                        "properties": {
                          "applicationID": {
                            "title": "",
                            "type": "string",
                            "description": "ID of an ECP application"
                          },
                          "appName": {
                            "title": "",
                            "type": "string",
                            "description": "Name of an ECP application. A valid name consists of lower-case alphanumeric characters or ‘-', must start and end with a lower-case alphanumeric character, and must be no more than 48 characters."
                          },
                          "createdBy": {
                            "title": "",
                            "type": "string",
                            "description": "API account or user that creates an ECP resource"
                          },
                          "creationTime": {
                            "title": "",
                            "format": "date-time",
                            "type": "string",
                            "description": "Datetime when the resource is created"
                          },
                          "lastUpdateTime": {
                            "type": "string",
                            "title": "",
                            "format": "date-time",
                            "description": "Datetime when the resource is last updated"
                          },
                          "status": {
                            "type": "string",
                            "description": "The deployment status of an application",
                            "enum": [
                              "waiting",
                              "deploying",
                              "deployed",
                              "failed"
                            ]
                          },
                          "podCount": {
                            "title": "",
                            "type": "object",
                            "description": "An object indicating the expectation and availability of pods for an application",
                            "properties": {
                              "desired": {
                                "type": "integer",
                                "description": "Count of pods desired for an application across all ECP PoPs"
                              },
                              "current": {
                                "type": "integer",
                                "description": "Count of pods that are created and existing for an application across all ECP PoPs. Pods in different phases (i.e. pending, running, failed) are all counted."
                              },
                              "running": {
                                "type": "integer",
                                "description": "Count of running pods that have been created and existing for an application across all PoPs"
                              }
                            }
                          },
                          "ipCount": {
                            "title": "",
                            "type": "integer",
                            "description": "Count of public IPv4 addresses requested by an application. Can be the addresses of layer4 load balancers or pods."
                          },
                          "isLoadBalanced": {
                            "title": "",
                            "type": "boolean",
                            "description": "A flag indicating if layer 4 load balancer is used to expose an ECP application"
                          },
                          "cpuLimitsTotal": {
                            "title": "",
                            "type": "number",
                            "description": "Sum of “limits.cpu” requested by an application for pods across all PoPs. Measured in cores."
                          },
                          "memLimitsTotal": {
                            "title": "",
                            "type": "integer",
                            "description": "Sum of “limits.mem” requested by an application for pods across all PoPs. Measured in bytes."
                          },
                          "localSSDTotal": {
                            "title": "",
                            "description": "Sum of local-ssd storage capacity requested by an application for pods across all PoPs. Measured in bytes.",
                            "type": "integer"
                          },
                          "persistSSDTotal": {
                            "title": "",
                            "type": "integer",
                            "description": "Sum of persist-ssd storage capacity requested by an application for pods across all PoPs. Measured in bytes."
                          },
                          "configuration": {
                            "title": "",
                            "type": "string",
                            "description": "The latest version of an application specification"
                          },
                          "message": {
                            "title": "",
                            "type": "string",
                            "description": "Detailed message explaining the status of deployment"
                          }
                        }
                      }
                    },
                    "totalCount": {
                      "title": "",
                      "type": "integer",
                      "description": "Total number of resources"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "totalCount": 1,
                      "applications": [
                        {
                          "applicationID": "2a766f310f5411ea977445f2b85638ba",
                          "appName": "myapp1",
                          "createdBy": "demo",
                          "creationTime": "2019-11-25T07:21:15Z",
                          "lastUpdateTime": "2019-12-26T03:06:32Z",
                          "status": "deployed",
                          "message": "",
                          "podCount": {
                            "desired": 2,
                            "current": 2,
                            "running": 2
                          },
                          "isLoadBalanced": true,
                          "cpuLimitsTotal": 0.4,
                          "memLimitsTotal": 536870912,
                          "localSSDTotal": 2000000000,
                          "persistSSDTotal": 0,
                          "ipCount": 2,
                          "configuration": "apiVersion: v1\nkind: RegionPreference\nmetadata:\n  namespace: demo\nspec:\n  regions:\n    - name: EU\n      replicas: 1\n    - name: NA-EAST\n      replicas: 1\n---\r\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  labels:\n    app: myapp1\n  namespace: demo\nspec:\n  selector:\n    matchLabels:\n      app: myapp1\n  template:\n    metadata:\n      labels:\n        app: myapp1\n    spec:\n      containers:\n        - image: nginx\n          name: myapp1\n          ports:\n            - containerPort: 80\n              protocol: TCP\n          resources:\n            limits:\n              cpu: 200m\n              memory: 256Mi\n            requests:\n              cpu: 200m\n              memory: 256Mi\n          volumeMounts:\n            - mountPath: /tmp\n              name: data\n  volumeClaimTemplates:\n    - metadata:\n        annotations:\n          volume.beta.kubernetes.io/storage-class: local-ssd\n        name: data\n      spec:\n        accessModes:\n          - ReadWriteOnce\n        resources:\n          requests:\n            storage: 1G\n---\r\napiVersion: v1\nkind: LoadBalancer4\nmetadata:\n  namespace: demo\nspec:\n  listeners:\n    - backendPort: 80\n      backendSelector:\n        app: myapp1\n      healthCheck: false\n      listenerPort: 80\n      name: listener-80\n      protocol: tcp\n      scheduler: wlc\n"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "InvalidListOffset",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "InvalidListOffset"
                        },
                        "message": {
                          "type": "string",
                          "description": "The value of offset must be a valid non-negative integer."
                        }
                      }
                    },
                    {
                      "title": "InvalidListLimit",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "InvalidListLimit"
                        },
                        "message": {
                          "type": "string",
                          "description": "The value of limit must be a valid integer between 1 and 200, both inclusive."
                        }
                      }
                    },
                    {
                      "title": "InvalidStatus",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "InvalidStatus"
                        },
                        "message": {
                          "type": "string",
                          "description": "The value of the “status” parameter is invalid. Should be “waiting”, “deploying”, “deployed”, or “failed.”"
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "InvalidListOffset",
                      "message": "The value of offset must be a valid non-negative integer."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "operationId": "get-applications",
        "description": "Get a list of applications. You can specify a search parameter, status, offset and limit to filter your results.",
        "parameters": [
          {
            "name": "searchString",
            "in": "query",
            "description": "Keyword to search for particular resources. The value is matched against the \"name\" field of each resource.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "waiting",
                "deploying",
                "deployed",
                "failed"
              ]
            },
            "description": "The deployment status of an application"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates the first resource to return. The first has an offset of 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": "0"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of resources to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": "100",
              "maximum": 200,
              "minimum": 1
            }
          },
          {
            "name": "On-Behalf-Of",
            "in": "header",
            "description": "If you are a reseller, you can use this header to specify the ID of a child customer and make API call on their behalf.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "post": {
        "summary": "Create an application",
        "operationId": "post-applications",
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "in": "header",
                "name": "Location",
                "description": "Location of the newly created resource.",
                "required": false
              },
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "InvalidAppName",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "InvalidAppName"
                        },
                        "message": {
                          "type": "string",
                          "description": "Invalid app name. A valid app name must consist of lower-case alphanumeric characters or ‘-', must start and end with a lower-case alphanumeric character, and must be no more than 48 characters."
                        }
                      }
                    },
                    {
                      "title": "NamespaceNotSpecified",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "NamespaceNotSpecified"
                        },
                        "message": {
                          "type": "string",
                          "description": "The “metadata.namespace” field must be specified for each object of an application."
                        }
                      }
                    },
                    {
                      "title": "AppNameInconsistent",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "AppNameInconsistent"
                        },
                        "message": {
                          "type": "string",
                          "description": "The \"appName\" parameter value is inconsistent with the YAML/JSON file in request body. The \"metadata.name\" field of each object to be deployed must use the same app name."
                        }
                      }
                    },
                    {
                      "title": "QuotaExceeded",
                      "type": "object",
                      "description": "",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "QuotaExceeded"
                        },
                        "message": {
                          "type": "string",
                          "description": "The application could not be deployed because it requires {resource requests}. You have a quota of {resources available}."
                        }
                      }
                    },
                    {
                      "title": "ConflictNetworkConfiguration",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "ConflictNetworkConfiguration"
                        },
                        "message": {
                          "type": "string",
                          "description": "Requesting public IPv4 addresses for pods is not allowed when a LoadBalancer4 object is already specified. Please remove the LoadBalancer4 object if your pods need to have publicly accessible IPv4 addresses."
                        }
                      }
                    },
                    {
                      "title": "WorkloadObjectNotFound",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "WorkloadObjectNotFound"
                        },
                        "message": {
                          "type": "string",
                          "description": "No workload object is found. Each application should define one and only workload object."
                        }
                      }
                    },
                    {
                      "title": "MultipleResourceObjectsNotAllowed",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "MultipleResourceObjectsNotAllowed"
                        },
                        "message": {
                          "type": "string",
                          "description": "Defining multiple objects of the resource {kind} is not allowed."
                        }
                      }
                    },
                    {
                      "title": "SyntaxError",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "SyntaxError"
                        },
                        "message": {
                          "type": "string",
                          "description": "{error message}"
                        }
                      }
                    },
                    {
                      "title": "IncorrectApiVersion",
                      "type": "object",
                      "description": "",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "IncorrectApiVersion"
                        },
                        "message": {
                          "type": "string",
                          "description": "No kind {kind} is registered for version {version}."
                        }
                      }
                    },
                    {
                      "title": "InvalidResourceRequirement",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "InvalidResourceRequirement"
                        },
                        "message": {
                          "type": "string",
                          "description": "The resource requirement is invalid. {Reason}\n\nPossible reasons:\n1. The requests.cpu of a container should not be lower than 0.05 core. \n2. The sum of limits.cpu of a pod should not be higher than 24 cores. \n3. The requests.cpu should be less than or equal to limits.cpu. \n4. The CPU requirement (measured in cores) should be expressed in plain numbers or with “m” suffix. \n5. The requests.mem of a container should not be lower than 50MB.\n6. The sum of limits.mem of a pod should not be higher than 128GB. \n7. The requests.mem should be less than or equal to limits.mem.\n8. The memory requirement (measured in bytes) should be expressed in plain numbers or with these suffixes: E, P, T, G, M, K, Ei, Pi, Ti, Gi, Mi, Ki.\n9. The requests.storage of a PVC should be not lower than 500MB and not higher than 100GB.\n10. The storage requirement (measured in bytes) should be expressed in plain numbers or with these suffixes: E, P, T, G, M, K, Ei, Pi, Ti, Gi, Mi, Ki."
                        }
                      }
                    },
                    {
                      "title": "MultipleControllerTypesNotAllowed",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "MultipleControllerTypesNotAllowed"
                        },
                        "message": {
                          "type": "string",
                          "description": "Defining multiple controller types for an application is not allowed."
                        }
                      }
                    },
                    {
                      "title": "TargetsNotSpecified",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "TargetsNotSpecified"
                        },
                        "message": {
                          "type": "string",
                          "description": "No “Location” or “RegionPreference” object is found. Please specify."
                        }
                      }
                    },
                    {
                      "title": "RepeatedTarget",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "RepeatedTarget"
                        },
                        "message": {
                          "type": "string",
                          "description": "The target {location/region} is repeated in your specification. Please combine them into one target."
                        }
                      }
                    },
                    {
                      "title": "ConflictTargets",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "ConflictTargets"
                        },
                        "message": {
                          "type": "string",
                          "description": "Specifying a “Location” object and a “RegionPreference” object together is not allowed."
                        }
                      }
                    },
                    {
                      "title": "PoPDoesNotExist",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "PoPDoesNotExist"
                        },
                        "message": {
                          "type": "string",
                          "description": "The PoP {pop code} specified is invalid or does not exist."
                        }
                      }
                    },
                    {
                      "title": "PoPNotAvailable",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "PoPNotAvailable"
                        },
                        "message": {
                          "type": "string",
                          "description": "The PoP {pop code} specified is offline and currently not available."
                        }
                      }
                    },
                    {
                      "title": "PoPFullyLoaded",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "PoPFullyLoaded"
                        },
                        "message": {
                          "type": "string",
                          "description": "The PoP {pop code} specified is fully loaded and cannot provision resources requested. Please choose a different location."
                        }
                      }
                    },
                    {
                      "title": "RegionDoesNotExist",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "RegionDoesNotExist"
                        },
                        "message": {
                          "type": "string",
                          "description": "The region {region} is invalid or does not exist."
                        }
                      }
                    },
                    {
                      "title": "RegionNotAvailable",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "RegionNotAvailable"
                        },
                        "message": {
                          "type": "string",
                          "description": "There are currently no available PoPs under the region {region}."
                        }
                      }
                    },
                    {
                      "title": "VolumeNotDefined",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "VolumeNotDefined"
                        },
                        "message": {
                          "type": "string",
                          "description": "The volume {volume name} in “volumeMounts” is not defined."
                        }
                      }
                    },
                    {
                      "title": "VolumeNotMounted",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "VolumeNotMounted"
                        },
                        "message": {
                          "type": "string",
                          "description": "One of: \"The volume {volume name} defined is not mounted to any mount points.\" \"The volume {volume name} is not properly mounted. The field “volumeMounts[].mountPath” is required.\""
                        }
                      }
                    },
                    {
                      "title": "ConflictVolumeName",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "ConflictVolumeName"
                        },
                        "message": {
                          "type": "string",
                          "description": "A volume name must be unique across volumes of all types."
                        }
                      }
                    },
                    {
                      "title": "ConflictVolumeMountPath",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "ConflictVolumeMountPath"
                        },
                        "message": {
                          "type": "string",
                          "description": "The mountPath in volumeMounts must be unique and without overlapping."
                        }
                      }
                    },
                    {
                      "title": "PVCVolumeNotAllowed",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "PVCVolumeNotAllowed"
                        },
                        "message": {
                          "type": "string",
                          "description": "Using PVC volumes with a kubernetes Controller of type other than StatefulSet is not allowed."
                        }
                      }
                    },
                    {
                      "title": "VolumeTypeNotAllowed",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "VolumeTypeNotAllowed"
                        },
                        "message": {
                          "type": "string",
                          "description": "Only “configMap” and “secret” volumes are allowed. If a PVC volume is desired, please use a StatefulSet Controller and define the volume in “spec.volumeClaimTemplates”."
                        }
                      }
                    },
                    {
                      "title": "ConflictPVCStorageClass",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "ConflictPVCStorageClass"
                        },
                        "message": {
                          "type": "string",
                          "description": "Using PVC volumes of different storage classes is not allowed."
                        }
                      }
                    },
                    {
                      "title": "InvalidLoadBalancer4Listener",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "InvalidLoadBalancer4Listener"
                        },
                        "message": {
                          "type": "string",
                          "description": "The LoadBalancer4 listener {listener name} is invalid. The “backendSelector” does not match {ReplicaSet/StatefulSet/Deployment}.spec.template.metadata.labels."
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "InvalidAppName",
                      "message": "Invalid app name. A valid app name must consist of lower-case alphanumeric characters or ‘-', must start and end with a lower-case alphanumeric character, and must be no more than 48 characters."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "title": "AppNameExists",
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "AppNameExists"
                    },
                    "message": {
                      "type": "string",
                      "description": "The app name is already taken."
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "AppNameExists",
                      "message": "The app name is already taken."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "tags": [
          "Applications"
        ],
        "description": "This interface enables you to create an ECP application and have the application deployed to ECP edge locations. A typical ECP application consists of 3 objects.\n\n1. A kubernetes StatefulSet, ReplicaSet or Deployment object to specify how your application shall be deployed, e.g. what containers images you want to run, how the containers shall be started, and how many resources the containers would require. In general, using ReplicaSet as pod controller is recommended and shall meet your basic requirements. However, if your application requires persistent storage, please use StatefulSet.\n2. An ECP custom \"LoadBalancer4\" object to expose your application. If such object is specified, ECP will create a layer 4 load balancer in each location where your application is distributed to expose and load balance the pods created for your application in that location. Alternatively, you can annotate your pods in the StatefulSet, ReplicaSet or Deployment object to enable public IPv4/IPv6 network interfaces for the pods and thus directly expose the pods.\n3. An object that specifies how the application shall be distributed. You can specify an ECP custom \"RegionPreference\" object if you would like to have your application evenly and automatically distributed in certain geographic <a href=\"#operation/get-regions\">regions</a>. If you would like to have your application precisely placed, you can specify an ECP custom \"Location\" object to pick the target <a href=\"#operation/get-pops\">locations</a>.\n\n**Please pass specifications of all objects comprising an ECP application as an array in the request body. The array shall be in YAML or JSON format.**",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "appName",
            "description": "Name of your ECP application. Must consist of lower-case alphanumeric characters or ‘-', must start and end with a lower-case alphanumeric character, and must be no more than 48 characters.",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/yaml": {
              "schema": {
                "title": "",
                "description": "",
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "title": "App Configuration",
                      "oneOf": [
                        {
                          "title": "ReplicaSet",
                          "type": "object",
                          "x-examples": {
                            "example-1": {}
                          },
                          "description": "ReplicaSet",
                          "properties": {
                            "apiVersion": {
                              "type": "string",
                              "enum": [
                                "apps/v1"
                              ]
                            },
                            "Kind": {
                              "type": "string",
                              "description": "Use \"ReplicaSet\" as pod controller if your application does not require persistent storage",
                              "enum": [
                                "ReplicaSet"
                              ]
                            },
                            "metadata": {
                              "type": "object",
                              "required": [
                                "namespace"
                              ],
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of a \"StatefulSet\" resource. Must be the same as the query param \"appName\"."
                                },
                                "namespace": {
                                  "type": "string",
                                  "description": "The kubernetes namespace created for your ECP account"
                                }
                              }
                            },
                            "spec": {
                              "type": "object",
                              "description": "This document only focuses on some typical configs of  a ReplicaSet object. For more about how to specify a ReplicaSet, please refer to the official kubernetes API reference https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.16/#replicaset-v1-apps",
                              "required": [
                                "selector",
                                "template"
                              ],
                              "properties": {
                                "selector": {
                                  "type": "object",
                                  "description": "A label query over pods. Must match the pod template's labels.",
                                  "required": [
                                    "matchLabels"
                                  ],
                                  "properties": {
                                    "matchLabels": {
                                      "type": "object",
                                      "description": "A map of {key,value} pairs"
                                    }
                                  }
                                },
                                "template": {
                                  "type": "object",
                                  "description": "Template of the pods that will be created by the ReplicaSet",
                                  "required": [
                                    "metadata",
                                    "spec"
                                  ],
                                  "properties": {
                                    "metadata": {
                                      "type": "object",
                                      "required": [
                                        "labels"
                                      ],
                                      "properties": {
                                        "labels": {
                                          "type": "object",
                                          "description": "Map of string keys and values that can be used to organize and categorize pods. Must match selector of the ReplicaSet"
                                        },
                                        "annotations": {
                                          "type": "object",
                                          "description": "An unstructured key value map stored with a pod",
                                          "properties": {
                                            "quantil.com/enableExternalIP": {
                                              "type": "boolean",
                                              "default": false,
                                              "description": "Set this annotation to true if you would like to have a public IPv4 address for the pod. Alternatively, you can create an ECP custom \"LoadBalancer4\" object for your ECP application to expose the pod. "
                                            },
                                            "quantil.com/enableIpv6ExternalIP": {
                                              "type": "boolean",
                                              "default": false,
                                              "description": "Set this annotation to true if you would like to have a public IPv6 address for the pod. Alternatively, you can create an ECP custom \"LoadBalancer4\" object for your ECP application to expose the pod. "
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "spec": {
                                      "type": "object",
                                      "description": "Specification of desired behavior of the pod",
                                      "required": [
                                        "containers"
                                      ],
                                      "properties": {
                                        "containers": {
                                          "type": "array",
                                          "description": "List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "image": {
                                                "type": "string",
                                                "description": "Docker image name"
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "Name of the container specified as a DNS_LABEL"
                                              },
                                              "resources": {
                                                "type": "object",
                                                "description": "Compute Resources required by this container. Cannot be updated.",
                                                "required": [
                                                  "limits"
                                                ],
                                                "properties": {
                                                  "limits": {
                                                    "type": "object",
                                                    "description": "The maximum amount of compute resources required",
                                                    "required": [
                                                      "cpu",
                                                      "memory"
                                                    ],
                                                    "properties": {
                                                      "cpu": {
                                                        "type": "string",
                                                        "description": "The amount of CPU required. Minimum 0.05 core. The sum of limits.cpu required by all containers in the pod must not exceed 24 cores."
                                                      },
                                                      "memory": {
                                                        "type": "string",
                                                        "description": "The amount of memory required. Minimum 50 MB. The sum of limits.memory required by all containers in the pod must not exceed 128 GB."
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "required": [
                                              "image",
                                              "name",
                                              "resources"
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "required": [
                            "apiVersion",
                            "Kind",
                            "metadata",
                            "spec"
                          ]
                        },
                        {
                          "title": "StatefulSet",
                          "type": "object",
                          "description": "StatefulSet",
                          "x-examples": {
                            "example-1": {}
                          },
                          "properties": {
                            "apiVersion": {
                              "type": "string",
                              "enum": [
                                "apps/v1"
                              ]
                            },
                            "Kind": {
                              "type": "string",
                              "description": "Use \"StatefulSet\" as pod controller if your application needs to use persistent volumes",
                              "enum": [
                                "StatefulSet"
                              ]
                            },
                            "metadata": {
                              "type": "object",
                              "required": [
                                "namespace"
                              ],
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of a \"StatefulSet\" resource. Must be the same as the query param \"appName\"."
                                },
                                "namespace": {
                                  "type": "string",
                                  "description": "The kubernetes namespace created for your ECP account"
                                }
                              }
                            },
                            "spec": {
                              "type": "object",
                              "description": "This document only focuses on some typical configs of  a StatefulSet object. For more about how to specify a StatefulSet, please refer to the official kubernetes API reference https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.16/#statefulset-v1-apps",
                              "required": [
                                "selector",
                                "template"
                              ],
                              "properties": {
                                "selector": {
                                  "type": "object",
                                  "description": "A label query over pods. Must match the pod template's labels.",
                                  "required": [
                                    "matchLabels"
                                  ],
                                  "properties": {
                                    "matchLabels": {
                                      "type": "object",
                                      "description": "A map of {key,value} pairs"
                                    }
                                  }
                                },
                                "template": {
                                  "type": "object",
                                  "description": "Template of the pods that will be created by the StatefulSet",
                                  "required": [
                                    "metadata",
                                    "spec"
                                  ],
                                  "properties": {
                                    "metadata": {
                                      "type": "object",
                                      "required": [
                                        "labels"
                                      ],
                                      "properties": {
                                        "labels": {
                                          "type": "object",
                                          "description": "Map of string keys and values that can be used to organize and categorize pods. Must match selector of the StatefulSet"
                                        },
                                        "annotations": {
                                          "type": "object",
                                          "description": "An unstructured key value map stored with a pod",
                                          "properties": {
                                            "quantil.com/enableExternalIP": {
                                              "type": "boolean",
                                              "default": false,
                                              "description": "Set this annotation to true if you would like to have a public IPv4 address for the pod. Alternatively, you can create an ECP custom \"LoadBalancer4\" object for your ECP application to expose the pod. "
                                            },
                                            "quantil.com/enableIpv6ExternalIP": {
                                              "type": "boolean",
                                              "default": false,
                                              "description": "Set this annotation to true if you would like to have a public IPv6 address for the pod. Alternatively, you can create an ECP custom \"LoadBalancer4\" object for your ECP application to expose the pod. "
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "spec": {
                                      "type": "object",
                                      "required": [
                                        "containers"
                                      ],
                                      "description": "Specification of desired behavior of the pod",
                                      "properties": {
                                        "containers": {
                                          "type": "array",
                                          "description": "List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "image": {
                                                "type": "string",
                                                "description": "Docker image name"
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "Name of the container specified as a DNS_LABEL"
                                              },
                                              "resources": {
                                                "type": "object",
                                                "required": [
                                                  "limits"
                                                ],
                                                "description": "Compute Resources required by this container. Cannot be updated.",
                                                "properties": {
                                                  "limits": {
                                                    "type": "object",
                                                    "required": [
                                                      "cpu",
                                                      "memory"
                                                    ],
                                                    "description": "The maximum amount of compute resources required",
                                                    "properties": {
                                                      "cpu": {
                                                        "type": "string",
                                                        "description": "The amount of CPU required. Minimum 0.05 core. The sum of limits.cpu required by all containers in the pod must not exceed 24 cores."
                                                      },
                                                      "memory": {
                                                        "type": "string",
                                                        "description": "The amount of memory required. Minimum 50 MB. The sum of limits.memory required by all containers in the pod must not exceed 128 GB."
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              "volumeMounts": {
                                                "type": "array",
                                                "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "name": {
                                                      "type": "string",
                                                      "description": "This must match the Name of a Volume"
                                                    },
                                                    "mountPath": {
                                                      "type": "string",
                                                      "description": "Path within the container at which the volume should be mounted. Must not contain ':'."
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "required": [
                                              "image",
                                              "name",
                                              "resources"
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                "volumeClaimTemplates": {
                                  "type": "array",
                                  "description": "A list of persistent volume claims that pods are allowed to reference. Every claim in this list must have at least one matching (by name) volumeMount in one container in the pod template.",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "metadata": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "description": "Name of a volume claim"
                                          },
                                          "annotations": {
                                            "type": "object",
                                            "properties": {
                                              "volume.beta.kubernetes.io/storage-class": {
                                                "type": "string",
                                                "enum": [
                                                  "local-ssd",
                                                  "persist-ssd"
                                                ],
                                                "description": "Specifiy the storageClass of a volume claim. Options include \"local-ssd\" and \"persist-ssd\". \"local-ssd\" means local persistent SSD storage, in which case data will be lost when a pod is rescheduled to another node. \"persist-ssd\" means remote persistent SSD storage, in which case data will be persisted even when the pod is rescheduled."
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "spec": {
                                        "type": "object",
                                        "properties": {
                                          "accessModes": {
                                            "type": "array",
                                            "description": "The desired access modes the volume claim should have. Should be \"ReadWriteOnce\".",
                                            "items": {
                                              "type": "string"
                                            }
                                          },
                                          "resources": {
                                            "type": "object",
                                            "description": "The resources the volume claim should have",
                                            "properties": {
                                              "requests": {
                                                "type": "object",
                                                "description": "The minimum amount of resources required",
                                                "properties": {
                                                  "storage": {
                                                    "type": "string",
                                                    "description": "The storage capacity required. Must be not less than 500MB and not higher than 100GB."
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "required": [
                            "apiVersion",
                            "Kind",
                            "metadata",
                            "spec"
                          ]
                        }
                      ]
                    },
                    {
                      "title": "App Exposure",
                      "type": "object",
                      "description": "LoadBalancer4",
                      "properties": {
                        "apiVersion": {
                          "type": "string",
                          "enum": [
                            "v1"
                          ]
                        },
                        "Kind": {
                          "type": "string",
                          "enum": [
                            "LoadBalancer4"
                          ],
                          "description": "Use \"LoadBalancer4\", an ECP custom resource, to expose your application"
                        },
                        "metadata": {
                          "type": "object",
                          "required": [
                            "namespace"
                          ],
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Name of a \"LoadBalancer4\" object. Must be the same as the query param \"appName\"."
                            },
                            "namespace": {
                              "type": "string",
                              "description": "The kubernetes namespace created for your ECP account"
                            }
                          }
                        },
                        "spec": {
                          "type": "object",
                          "required": [
                            "listeners"
                          ],
                          "properties": {
                            "listeners": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "Name of a listener. Must be unique across a \"LoadBalancer4\" obejct. Allows lower-case letters, digits and hyphens only. Must not start or end with a hyphen, and must be less than 63 characters."
                                  },
                                  "backendSelector": {
                                    "type": "object",
                                    "description": "Key value pair that is used to match target pods as backend of the LoadBalancer4."
                                  },
                                  "listenerPort": {
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 65535,
                                    "description": "Number of port that the LoadBalancer4 listens on"
                                  },
                                  "backendPort": {
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 65535,
                                    "description": "Number of the backend pods' port that receives traffic forwarded by the LoadBalancer4. Must be the same as \"listenerPort\"."
                                  },
                                  "protocol": {
                                    "type": "string",
                                    "enum": [
                                      "TCP",
                                      "UDP"
                                    ]
                                  },
                                  "scheduler": {
                                    "type": "string",
                                    "enum": [
                                      "rr",
                                      "lc",
                                      "sh"
                                    ],
                                    "description": "Load balancing algorithm used to make load balancing decision. Can be \"rr\" (round robin), \"lc\" (least conncetions) or \"sh\" (Source Hash). Defaults to \"rr\"."
                                  },
                                  "healthCheck": {
                                    "type": "boolean",
                                    "default": false,
                                    "description": "Periodic health check of backend pods. Pod that fails health check will be removed by the load balancer."
                                  },
                                  "healthCheckType": {
                                    "type": "string",
                                    "enum": [
                                      "TCP",
                                      "HTTP"
                                    ],
                                    "description": "If \"protocol\" is set to \"TCP\", the health check type can be \"TCP\" or \"HTTP\". If the \"protocol\" field is set to \"UDP\", no health check can be configured."
                                  },
                                  "healthCheckDomain": {
                                    "type": "string",
                                    "description": "Host name to connect to. Acceptable only when the health check type is \"HTTP\"."
                                  },
                                  "healthCheckURI": {
                                    "type": "string",
                                    "description": "Path to access. Acceptable only when the health check type is \"HTTP\"."
                                  },
                                  "healthCheckConnectPort": {
                                    "type": "integer",
                                    "description": "Number of the port to access on the backend pods. Set to same as the \"backendPort\" by default.",
                                    "minimum": 1,
                                    "maximum": 65535
                                  },
                                  "healthCheckInterval": {
                                    "type": "integer",
                                    "default": 1,
                                    "description": "How often (in seconds) to perform the health check",
                                    "minimum": 1,
                                    "maximum": 5
                                  }
                                },
                                "required": [
                                  "name",
                                  "backendSelector",
                                  "listenerPort",
                                  "backendPort"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "required": [
                        "apiVersion",
                        "Kind",
                        "metadata",
                        "spec"
                      ]
                    },
                    {
                      "title": "App Distribution",
                      "oneOf": [
                        {
                          "title": "RegionPreference",
                          "type": "object",
                          "x-examples": {
                            "example-1": {
                              "apiVersion": "v1",
                              "kind": "RegionPreference",
                              "metadata": {
                                "name": "myapp",
                                "namespace": "demo"
                              },
                              "spec": {
                                "regions": [
                                  {
                                    "name": "NA-WEST",
                                    "replicas": 6
                                  },
                                  {
                                    "name": "EU",
                                    "replicas": 4
                                  }
                                ]
                              }
                            }
                          },
                          "description": "Region",
                          "properties": {
                            "apiVersion": {
                              "type": "string",
                              "enum": [
                                "v1"
                              ]
                            },
                            "Kind": {
                              "type": "string",
                              "description": "Use \"RegionPreference\", an ECP custom resource, to specify ECP regions where you would like to have your application distributed. ",
                              "enum": [
                                "RegionPreference"
                              ]
                            },
                            "metadata": {
                              "type": "object",
                              "required": [
                                "namespace"
                              ],
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of a \"RegionPreference\" resource. Must be the same as the query param \"appName\"."
                                },
                                "namespace": {
                                  "type": "string",
                                  "description": "The kubernetes namespace created for your ECP account"
                                }
                              }
                            },
                            "spec": {
                              "type": "object",
                              "required": [
                                "regions"
                              ],
                              "properties": {
                                "regions": {
                                  "type": "array",
                                  "description": "Array of target ECP regions to distribute your application",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "type": "string",
                                        "description": "Code of an ECP region, e.g. \"NA-WEST\" which stands for west of North America."
                                      },
                                      "replicas": {
                                        "type": "integer",
                                        "description": "The total number of pod instances that you would like to maintain for your application within an ECP region",
                                        "minimum": 1
                                      }
                                    },
                                    "required": [
                                      "name",
                                      "replicas"
                                    ]
                                  }
                                }
                              }
                            }
                          },
                          "required": [
                            "apiVersion",
                            "Kind",
                            "metadata",
                            "spec"
                          ]
                        },
                        {
                          "title": "Location",
                          "type": "object",
                          "description": "Location",
                          "x-examples": {
                            "example-1": {
                              "apiVersion": "v1",
                              "kind": "Location",
                              "metadata": {
                                "name": "myapp",
                                "namespace": "demo"
                              },
                              "spec": {
                                "locations": [
                                  {
                                    "name": "sjc",
                                    "replicas": 2
                                  },
                                  {
                                    "name": "ams",
                                    "replicas": 1
                                  }
                                ]
                              }
                            }
                          },
                          "properties": {
                            "apiVersion": {
                              "type": "string",
                              "enum": [
                                "v1"
                              ]
                            },
                            "Kind": {
                              "type": "string",
                              "enum": [
                                "Location"
                              ],
                              "description": "Use \"Location\", an ECP custom resource, to pick ECP PoPs where you would like to run your application. "
                            },
                            "metadata": {
                              "type": "object",
                              "required": [
                                "namespace"
                              ],
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of a \"Location\" resource. Must be the same as the query param \"appName\"."
                                },
                                "namespace": {
                                  "type": "string",
                                  "description": "The kubernetes namespace created for your ECP account"
                                }
                              }
                            },
                            "spec": {
                              "type": "object",
                              "required": [
                                "locations"
                              ],
                              "properties": {
                                "locations": {
                                  "type": "array",
                                  "description": "Array of target ECP PoPs to run your application",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "type": "string",
                                        "description": "Code of an ECP PoP, e.g. \"sjc\" which stands for the PoP at San Jose, US."
                                      },
                                      "replicas": {
                                        "type": "integer",
                                        "description": "Number of pod instances that you would like to maintain for your application at an ECP PoP",
                                        "minimum": 1
                                      }
                                    },
                                    "required": [
                                      "name",
                                      "replicas"
                                    ]
                                  }
                                }
                              }
                            }
                          },
                          "required": [
                            "apiVersion",
                            "Kind",
                            "metadata",
                            "spec"
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              "examples": {
                "Typical usage": {
                  "value": "apiVersion: v1\nkind: RegionPreference\nmetadata:\n  name: myapp\n  namespace: demo\nspec:\n  regions:\n    - name: NA-WEST\n      replicas: 6\n    - name: EU\n      replicas: 4\n--- \napiVersion: apps/v1\nkind: ReplicaSet\nmetadata:\n  name: myapp\n  namespace: demo\nspec:\n  selector:\n    matchLabels:\n      app: myapp\n  template:\n    metadata:\n      labels:\n        app: myapp\n    spec:\n      imagePullSecrets:\n        - name: myregistrykey\n      containers:\n        - name: myapp\n          image: 'myregistry/myproject/myapp:1.0'\n          resources:\n            limits:\n              cpu: 200m\n              memory: 128Mi\n            requests:\n              cpu: 200m\n              memory: 128Mi\n---\napiVersion: v1\nkind: LoadBalancer4\nmetadata:\n  name: myapp\n  namespace: demo\nspec:\n  listeners:\n    - backendPort: 80\n      backendSelector:\n        app: myapp\n      healthCheck: true\n      healthCheckType: tcp\n      healthCheckConnectPort: 80\n      healthCheckTimeout: 10\n      listenerPort: 80\n      name: listener-80\n      protocol: tcp\n      scheduler: lc"
                },
                "Pick locations to distribute an app": {
                  "value": "apiVersion: v1\nkind: Location\nmetadata:\n  name: myapp\n  namespace: demo\nspec:\n  locations:\n    - name: sjc\n      replicas: 2\n    - name: ams\n      replicas: 1\n--- \napiVersion: apps/v1\nkind: ReplicaSet\nmetadata:\n  name: myapp\n  namespace: demo\nspec:\n  selector:\n    matchLabels:\n      app: myapp\n  template:\n    metadata:\n      labels:\n        app: myapp\n    spec:\n      imagePullSecrets:\n        - name: myregistrykey\n      containers:\n        - name: myapp\n          image: 'myregistry/myproject/myapp:1.0'\n          resources:\n            limits:\n              cpu: 200m\n              memory: 128Mi\n            requests:\n              cpu: 200m\n              memory: 128Mi\n---\napiVersion: v1\nkind: LoadBalancer4\nmetadata:\n  name: myapp\n  namespace: demo\nspec:\n  listeners:\n    - backendPort: 80\n      backendSelector:\n        app: myapp\n      healthCheck: true\n      healthCheckType: tcp\n      healthCheckConnectPort: 80\n      healthCheckTimeout: 10\n      listenerPort: 80\n      name: listener-80\n      protocol: tcp\n      scheduler: lc"
                },
                "Expose an app via public network interface(s) of pods": {
                  "value": "apiVersion: v1\nkind: RegionPreference\nmetadata:\n  name: myapp\n  namespace: demo\nspec:\n  regions:\n    - name: NA-WEST\n      replicas: 6\n    - name: EU\n      replicas: 4\n--- \napiVersion: apps/v1\nkind: ReplicaSet\nmetadata:\n  name: myapp\n  namespace: demo\nspec:\n  selector:\n    matchLabels:\n      app: myapp\n  template:\n    metadata:\n      labels:\n        app: myapp\n      annotations:\n        quantil.com/enableExternalIP: 'true'\n        quantil.com/enableIpv6ExternalIP: 'true'\n  spec:\n    imagePullSecrets:\n      - name: myregistrykey\n    containers:\n      - name: myapp\n        image: 'myregistry/myproject/myapp:1.0'\n        resources:\n          limits:\n            cpu: 200m\n            memory: 128Mi\n          requests:\n            cpu: 200m\n            memory: 128Mi"
                },
                "Create an app that requires persistent storage": {
                  "value": "apiVersion: v1\nkind: RegionPreference\nmetadata:\n  name: myapp\n  namespace: demo\nspec:\n  regions:\n    - name: NA\n      replicas: 6\n    - name: EU\n      replicas: 4\n--- \napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: myapp\n  namespace: demo\nspec:\n  selector:\n    matchLabels:\n      app: myapp\n  template:\n    metadata:\n      labels:\n        app: myapp\n    spec:\n      imagePullSecrets:\n        - name: myregistrykey\n      containers:\n        - name: myapp\n          image: 'myregistry/myproject/myapp:1.0'\n          resources:\n            limits:\n              cpu: 200m\n              memory: 256Mi\n            requests:\n              cpu: 200m\n              memory: 256Mi\n          volumeMounts:\n            - mountPath: /tmp\n              name: data\n  volumeClaimTemplates:\n    - metadata:\n        annotations:\n          volume.beta.kubernetes.io/storage-class: local-ssd\n        name: data\n      spec:\n        accessModes:\n          - ReadWriteOnce\n        resources:\n          requests:\n            storage: 1G\n---\napiVersion: v1\nkind: LoadBalancer4\nmetadata:\n  name: myapp\n  namespace: demo\nspec:\n  listeners:\n    - backendPort: 80\n      backendSelector:\n        app: myapp\n      healthCheck: true\n      healthCheckType: tcp\n      healthCheckConnectPort: 80\n      healthCheckTimeout: 10\n      listenerPort: 80\n      name: listener-80\n      protocol: tcp\n      scheduler: lc"
                }
              }
            }
          },
          "description": ""
        }
      },
      "parameters": []
    },
    "/ecp/v1/applications/{applicationID}": {
      "parameters": [
        {
          "name": "applicationID",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "ID of an ECP application"
        }
      ],
      "get": {
        "summary": "Query an application",
        "tags": [
          "Applications"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "applicationID": {
                      "title": "",
                      "type": "string",
                      "description": "ID of an ECP application"
                    },
                    "appName": {
                      "title": "",
                      "type": "string",
                      "description": "Name of an ECP application. A valid name consists of lower-case alphanumeric characters or ‘-', must start and end with a lower-case alphanumeric character, and must be no more than 48 characters."
                    },
                    "createdBy": {
                      "title": "",
                      "type": "string",
                      "description": "API account or user that creates an ECP resource"
                    },
                    "creationTime": {
                      "title": "",
                      "format": "date-time",
                      "type": "string",
                      "description": "Datetime when the resource is created"
                    },
                    "lastUpdateTime": {
                      "type": "string",
                      "title": "",
                      "format": "date-time",
                      "description": "Datetime when the resource is last updated"
                    },
                    "status": {
                      "type": "string",
                      "description": "The deployment status of an application",
                      "enum": [
                        "waiting",
                        "deploying",
                        "deployed",
                        "failed"
                      ]
                    },
                    "podCount": {
                      "title": "",
                      "type": "object",
                      "description": "An object indicating the expectation and availability of pods for an application",
                      "properties": {
                        "desired": {
                          "type": "integer",
                          "description": "Count of pods desired for an application across all ECP PoPs"
                        },
                        "current": {
                          "type": "integer",
                          "description": "Count of pods that are created and existing for an application across all ECP PoPs. Pods in different phases (i.e. pending, running, failed) are all counted."
                        },
                        "running": {
                          "type": "integer",
                          "description": "Count of running pods that have been created and existing for an application across all PoPs"
                        }
                      }
                    },
                    "ipCount": {
                      "title": "",
                      "type": "integer",
                      "description": "Count of public IPv4 addresses requested by an application. Can be the addresses of layer4 load balancers or pods."
                    },
                    "cpuLimitsTotal": {
                      "title": "",
                      "type": "number",
                      "description": "Sum of “limits.cpu” requested by an application for pods across all PoPs. Measured in cores."
                    },
                    "memLimitsTotal": {
                      "title": "",
                      "type": "integer",
                      "description": "Sum of “limits.mem” requested by an application for pods across all PoPs. Measured in bytes."
                    },
                    "localSSDTotal": {
                      "title": "",
                      "description": "Sum of local-ssd storage capacity requested by an application for pods across all PoPs. Measured in bytes.",
                      "type": "integer"
                    },
                    "persistSSDTotal": {
                      "title": "",
                      "type": "integer",
                      "description": "Sum of persist-ssd storage capacity requested by an application for pods across all PoPs. Measured in bytes."
                    },
                    "isLoadBalanced": {
                      "title": "",
                      "type": "boolean",
                      "description": "A flag indicating if layer 4 load balancer is used to expose an ECP application"
                    },
                    "configuration": {
                      "title": "",
                      "type": "string",
                      "description": "The latest version of an application specification"
                    },
                    "regions": {
                      "title": "",
                      "type": "array",
                      "description": "Array of regions where the application is deployed",
                      "items": {
                        "type": "object",
                        "properties": {
                          "region": {
                            "type": "string",
                            "description": "Code of an ECP region, e.g. “NA-WEST”"
                          },
                          "PoPs": {
                            "type": "array",
                            "description": "Array of PoPs where an application is deployed",
                            "items": {
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": "string",
                                  "description": "Short form of an ECP PoP"
                                },
                                "description": {
                                  "type": "string",
                                  "description": "Full name of an ECP PoP"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "message": {
                      "title": "",
                      "type": "string",
                      "description": "Detailed message explaining the status of deployment"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "applicationID": "2a766f310f5411ea977445f2b85638ba",
                      "appName": "myapp1",
                      "createdBy": "demo",
                      "creationTime": "2019-11-25T07:21:15Z",
                      "lastUpdateTime": "2019-12-26T03:06:32Z",
                      "status": "deployed",
                      "message": "",
                      "podCount": {
                        "desired": 2,
                        "current": 2,
                        "running": 2
                      },
                      "isLoadBalanced": true,
                      "cpuLimitsTotal": 0.4,
                      "memLimitsTotal": 536870912,
                      "localSSDTotal": 2000000000,
                      "persistSSDTotal": 0,
                      "ipCount": 2,
                      "regions": [
                        {
                          "region": "EU",
                          "PoPs": [
                            {
                              "code": "waw",
                              "description": "Warsaw PL"
                            }
                          ]
                        },
                        {
                          "region": "NA-EAST",
                          "PoPs": [
                            {
                              "code": "iad",
                              "description": "Ashburn US"
                            }
                          ]
                        }
                      ],
                      "configuration": "apiVersion: v1\nkind: RegionPreference\nmetadata:\n  namespace: demo\nspec:\n  regions:\n    - name: EU\n      replicas: 1\n    - name: NA-EAST\n      replicas: 1\n---\r\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  labels:\n    app: myapp1\n  namespace: demo\nspec:\n  selector:\n    matchLabels:\n      app: myapp1\n  template:\n    metadata:\n      labels:\n        app: myapp1\n    spec:\n      containers:\n        - image: nginx\n          name: myapp1\n          ports:\n            - containerPort: 80\n              protocol: TCP\n          resources:\n            limits:\n              cpu: 200m\n              memory: 256Mi\n            requests:\n              cpu: 200m\n              memory: 256Mi\n          volumeMounts:\n            - mountPath: /tmp\n              name: data\n  volumeClaimTemplates:\n    - metadata:\n        annotations:\n          volume.beta.kubernetes.io/storage-class: local-ssd\n        name: data\n      spec:\n        accessModes:\n          - ReadWriteOnce\n        resources:\n          requests:\n            storage: 1G\n---\r\napiVersion: v1\nkind: LoadBalancer4\nmetadata:\n  namespace: demo\nspec:\n  listeners:\n    - backendPort: 80\n      backendSelector:\n        app: myapp1\n      healthCheck: false\n      listenerPort: 80\n      name: listener-80\n      protocol: tcp\n      scheduler: wlc\n"
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ApplicationNotFound",
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "ApplicationNotFound"
                    },
                    "message": {
                      "type": "string",
                      "description": "The application ID given does not exist."
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "ApplicationNotFound",
                      "message": "The application ID given does not exist."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "operationId": "get-application-by-ID",
        "description": "Get the details of an ECP application",
        "parameters": [
          {
            "name": "On-Behalf-Of",
            "in": "header",
            "description": "If you are a reseller, you can use this header to specify the ID of a child customer and make API call on their behalf.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "delete": {
        "summary": "Delete an application",
        "operationId": "delete-application-by-ID",
        "responses": {
          "204": {
            "description": "No Content",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "ApplicationBeingDeleted",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "ApplicationBeingDeleted"
                        },
                        "message": {
                          "type": "string",
                          "description": "The application is being deleted and cannot be updated or deleted again."
                        }
                      }
                    },
                    {
                      "title": "ApplicationHasCname",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "ApplicationHasCname"
                        },
                        "message": {
                          "type": "string",
                          "description": "A CNAME for the application exists. Please delete the CNAME first."
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "ApplicationBeingDeployed",
                      "message": "The application is being deployed and cannot be updated/deleted."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ApplicationNotFound",
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "ApplicationNotFound"
                    },
                    "message": {
                      "type": "string",
                      "description": "The application ID given does not exist."
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "ApplicationNotFound",
                      "message": "The application ID given does not exist."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "tags": [
          "Applications"
        ],
        "description": "Delete an existing ECP application. \n\n**Note that deleting an application will cause all objects created for the application to be deleted, including persistent storage volumes (if any).**"
      },
      "put": {
        "summary": "Replace an application",
        "operationId": "put-application-by-ID",
        "responses": {
          "204": {
            "description": "No Content",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "ApplicationBeingDeleted",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "ApplicationBeingDeleted"
                        },
                        "message": {
                          "type": "string",
                          "description": "The application is being deleted and cannot be updated or deleted again."
                        }
                      }
                    },
                    {
                      "title": "AppNameInconsistent",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "AppNameInconsistent"
                        },
                        "message": {
                          "type": "string",
                          "description": "The \"appName\" parameter value is inconsistent with the YAML/JSON file in request body. The \"metadata.name\" field of each object to be deployed must use the same app name."
                        }
                      }
                    },
                    {
                      "title": "QuotaExceeded",
                      "type": "object",
                      "description": "",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "QuotaExceeded"
                        },
                        "message": {
                          "type": "string",
                          "description": "The application could not be deployed because it requires {resource requests}. You have a quota of {resources available}."
                        }
                      }
                    },
                    {
                      "title": "ConflictNetworkConfiguration",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "ConflictNetworkConfiguration"
                        },
                        "message": {
                          "type": "string",
                          "description": "Requesting public IPv4 addresses for pods is not allowed when a LoadBalancer4 object is already specified. Please remove the LoadBalancer4 object if your pods need to have publicly accessible IPv4 addresses."
                        }
                      }
                    },
                    {
                      "title": "WorkloadObjectNotFound",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "WorkloadObjectNotFound"
                        },
                        "message": {
                          "type": "string",
                          "description": "No workload object is found. Each application should define one and only workload object."
                        }
                      }
                    },
                    {
                      "title": "MultipleResourceObjectsNotAllowed",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "MultipleResourceObjectsNotAllowed"
                        },
                        "message": {
                          "type": "string",
                          "description": "Defining multiple objects of the resource {kind} is not allowed."
                        }
                      }
                    },
                    {
                      "title": "SyntaxError",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "SyntaxError"
                        },
                        "message": {
                          "type": "string",
                          "description": "{error message}"
                        }
                      }
                    },
                    {
                      "title": "IncorrectApiVersion",
                      "type": "object",
                      "description": "",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "IncorrectApiVersion"
                        },
                        "message": {
                          "type": "string",
                          "description": "No kind {kind} is registered for version {version}."
                        }
                      }
                    },
                    {
                      "title": "InvalidResourceRequirement",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "InvalidResourceRequirement"
                        },
                        "message": {
                          "type": "string",
                          "description": "The resource requirement is invalid. {Reason}\n\nPossible reasons:\n1. The requests.cpu of a container should not be lower than 0.05 core. \n2. The sum of limits.cpu of a pod should not be higher than 24 cores. \n3. The requests.cpu should be less than or equal to limits.cpu. \n4. The CPU requirement (measured in cores) should be expressed in plain numbers or with “m” suffix. \n5. The requests.mem of a container should not be lower than 50MB.\n6. The sum of limits.mem of a pod should not be higher than 128GB. \n7. The requests.mem should be less than or equal to limits.mem.\n8. The memory requirement (measured in bytes) should be expressed in plain numbers or with these suffixes: E, P, T, G, M, K, Ei, Pi, Ti, Gi, Mi, Ki.\n9. The requests.storage of a PVC should be not lower than 500MB and not higher than 100GB.\n10. The storage requirement (measured in bytes) should be expressed in plain numbers or with these suffixes: E, P, T, G, M, K, Ei, Pi, Ti, Gi, Mi, Ki."
                        }
                      }
                    },
                    {
                      "title": "MultipleControllerTypesNotAllowed",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "MultipleControllerTypesNotAllowed"
                        },
                        "message": {
                          "type": "string",
                          "description": "Defining multiple controller types for an application is not allowed."
                        }
                      }
                    },
                    {
                      "title": "TargetsNotSpecified",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "TargetsNotSpecified"
                        },
                        "message": {
                          "type": "string",
                          "description": "No “Location” or “RegionPreference” object is found. Please specify."
                        }
                      }
                    },
                    {
                      "title": "RepeatedTarget",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "RepeatedTarget"
                        },
                        "message": {
                          "type": "string",
                          "description": "The target {location/region} is repeated in your specification. Please combine them into one target."
                        }
                      }
                    },
                    {
                      "title": "ConflictTargets",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "ConflictTargets"
                        },
                        "message": {
                          "type": "string",
                          "description": "Specifying a “Location” object and a “RegionPreference” object together is not allowed."
                        }
                      }
                    },
                    {
                      "title": "PoPDoesNotExist",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "PoPDoesNotExist"
                        },
                        "message": {
                          "type": "string",
                          "description": "The PoP {pop code} specified is invalid or does not exist."
                        }
                      }
                    },
                    {
                      "title": "PoPNotAvailable",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "PoPNotAvailable"
                        },
                        "message": {
                          "type": "string",
                          "description": "The PoP {pop code} specified is offline and currently not available."
                        }
                      }
                    },
                    {
                      "title": "PoPFullyLoaded",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "PoPFullyLoaded"
                        },
                        "message": {
                          "type": "string",
                          "description": "The PoP {pop code} specified is fully loaded and cannot provision resources requested. Please choose a different location."
                        }
                      }
                    },
                    {
                      "title": "RegionDoesNotExist",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "RegionDoesNotExist"
                        },
                        "message": {
                          "type": "string",
                          "description": "The region {region} is invalid or does not exist."
                        }
                      }
                    },
                    {
                      "title": "RegionNotAvailable",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "RegionNotAvailable"
                        },
                        "message": {
                          "type": "string",
                          "description": "There are currently no available PoPs under the region {region}."
                        }
                      }
                    },
                    {
                      "title": "PVCUpdateNotAllowed",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "PVCUpdateNotAllowed"
                        },
                        "message": {
                          "type": "string",
                          "description": "Updating PVCs in use is not allowed."
                        }
                      }
                    },
                    {
                      "title": "VolumeNotDefined",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "VolumeNotDefined"
                        },
                        "message": {
                          "type": "string",
                          "description": "The volume {volume name} in “volumeMounts” is not defined."
                        }
                      }
                    },
                    {
                      "title": "VolumeNotMounted",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "VolumeNotMounted"
                        },
                        "message": {
                          "type": "string",
                          "description": "One of: \"The volume {volume name} defined is not mounted to any mount points.\" \"The volume {volume name} is not properly mounted. The field “volumeMounts[].mountPath” is required.\""
                        }
                      }
                    },
                    {
                      "title": "ConflictVolumeName",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "ConflictVolumeName"
                        },
                        "message": {
                          "type": "string",
                          "description": "A volume name must be unique across volumes of all types."
                        }
                      }
                    },
                    {
                      "title": "ConflictVolumeMountPath",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "ConflictVolumeMountPath"
                        },
                        "message": {
                          "type": "string",
                          "description": "The mountPath in volumeMounts must be unique and without overlapping."
                        }
                      }
                    },
                    {
                      "title": "PVCVolumeNotAllowed",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "PVCVolumeNotAllowed"
                        },
                        "message": {
                          "type": "string",
                          "description": "Using PVC volumes with a kubernetes Controller of type other than StatefulSet is not allowed."
                        }
                      }
                    },
                    {
                      "title": "VolumeTypeNotAllowed",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "VolumeTypeNotAllowed"
                        },
                        "message": {
                          "type": "string",
                          "description": "Only “configMap” and “secret” volumes are allowed. If a PVC volume is desired, please use a StatefulSet Controller and define the volume in “spec.volumeClaimTemplates”."
                        }
                      }
                    },
                    {
                      "title": "ConflictPVCStorageClass",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "ConflictPVCStorageClass"
                        },
                        "message": {
                          "type": "string",
                          "description": "Using PVC volumes of different storage classes is not allowed."
                        }
                      }
                    },
                    {
                      "title": "InvalidLoadBalancer4Listener",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "InvalidLoadBalancer4Listener"
                        },
                        "message": {
                          "type": "string",
                          "description": "The LoadBalancer4 listener {listener name} is invalid. The “backendSelector” does not match {ReplicaSet/StatefulSet/Deployment}.spec.template.metadata.labels."
                        }
                      }
                    },
                    {
                      "title": "ApplicationHasCname",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "ApplicationHasCname"
                        },
                        "message": {
                          "type": "string",
                          "description": "A CNAME for the application exists. Please delete the CNAME first before removing layer 4 load balancers from this application."
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "ApplicationBeingDeployed",
                      "message": "The application is being deployed and cannot be updated/deleted."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ApplicationNotFound",
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "ApplicationNotFound"
                    },
                    "message": {
                      "type": "string",
                      "description": "The application ID given does not exist."
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "ApplicationNotFound",
                      "message": "The application ID given does not exist."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "tags": [
          "Applications"
        ],
        "description": "Update an ECP application by using the HTTP method “PUT”. This operation will cause all existing objects (including persistent storage volumes, if any) of an application to be replaced.",
        "requestBody": {
          "content": {
            "application/yaml": {
              "schema": {
                "title": "",
                "description": "",
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "title": "App Configuration",
                      "oneOf": [
                        {
                          "title": "ReplicaSet",
                          "type": "object",
                          "x-examples": {
                            "example-1": {}
                          },
                          "description": "ReplicaSet",
                          "properties": {
                            "apiVersion": {
                              "type": "string",
                              "enum": [
                                "apps/v1"
                              ]
                            },
                            "Kind": {
                              "type": "string",
                              "description": "Use \"ReplicaSet\" as pod controller if your application does not require persistent storage",
                              "enum": [
                                "ReplicaSet"
                              ]
                            },
                            "metadata": {
                              "type": "object",
                              "required": [
                                "namespace"
                              ],
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of a \"StatefulSet\" resource. Must be the same as the query param \"appName\"."
                                },
                                "namespace": {
                                  "type": "string",
                                  "description": "The kubernetes namespace created for your ECP account"
                                }
                              }
                            },
                            "spec": {
                              "type": "object",
                              "description": "This document only focuses on some typical configs of  a ReplicaSet object. For more about how to specify a ReplicaSet, please refer to the official kubernetes API reference https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.16/#replicaset-v1-apps",
                              "required": [
                                "selector",
                                "template"
                              ],
                              "properties": {
                                "selector": {
                                  "type": "object",
                                  "description": "A label query over pods. Must match the pod template's labels.",
                                  "required": [
                                    "matchLabels"
                                  ],
                                  "properties": {
                                    "matchLabels": {
                                      "type": "object",
                                      "description": "A map of {key,value} pairs"
                                    }
                                  }
                                },
                                "template": {
                                  "type": "object",
                                  "description": "Template of the pods that will be created by the ReplicaSet",
                                  "required": [
                                    "metadata",
                                    "spec"
                                  ],
                                  "properties": {
                                    "metadata": {
                                      "type": "object",
                                      "required": [
                                        "labels"
                                      ],
                                      "properties": {
                                        "labels": {
                                          "type": "object",
                                          "description": "Map of string keys and values that can be used to organize and categorize pods. Must match selector of the ReplicaSet"
                                        },
                                        "annotations": {
                                          "type": "object",
                                          "description": "An unstructured key value map stored with a pod",
                                          "properties": {
                                            "quantil.com/enableExternalIP": {
                                              "type": "boolean",
                                              "default": false,
                                              "description": "Set this annotation to true if you would like to have a public IPv4 address for the pod. Alternatively, you can create an ECP custom \"LoadBalancer4\" object for your ECP application to expose the pod. "
                                            },
                                            "quantil.com/enableIpv6ExternalIP": {
                                              "type": "boolean",
                                              "default": false,
                                              "description": "Set this annotation to true if you would like to have a public IPv6 address for the pod. Alternatively, you can create an ECP custom \"LoadBalancer4\" object for your ECP application to expose the pod. "
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "spec": {
                                      "type": "object",
                                      "description": "Specification of desired behavior of the pod",
                                      "required": [
                                        "containers"
                                      ],
                                      "properties": {
                                        "containers": {
                                          "type": "array",
                                          "description": "List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "image": {
                                                "type": "string",
                                                "description": "Docker image name"
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "Name of the container specified as a DNS_LABEL"
                                              },
                                              "resources": {
                                                "type": "object",
                                                "description": "Compute Resources required by this container. Cannot be updated.",
                                                "required": [
                                                  "limits"
                                                ],
                                                "properties": {
                                                  "limits": {
                                                    "type": "object",
                                                    "description": "The maximum amount of compute resources required",
                                                    "required": [
                                                      "cpu",
                                                      "memory"
                                                    ],
                                                    "properties": {
                                                      "cpu": {
                                                        "type": "string",
                                                        "description": "The amount of CPU required. Minimum 0.05 core. The sum of limits.cpu required by all containers in the pod must not exceed 24 cores."
                                                      },
                                                      "memory": {
                                                        "type": "string",
                                                        "description": "The amount of memory required. Minimum 50 MB. The sum of limits.memory required by all containers in the pod must not exceed 128 GB."
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "required": [
                                              "image",
                                              "name",
                                              "resources"
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "required": [
                            "apiVersion",
                            "Kind",
                            "metadata",
                            "spec"
                          ]
                        },
                        {
                          "title": "StatefulSet",
                          "type": "object",
                          "description": "StatefulSet",
                          "x-examples": {
                            "example-1": {}
                          },
                          "properties": {
                            "apiVersion": {
                              "type": "string",
                              "enum": [
                                "apps/v1"
                              ]
                            },
                            "Kind": {
                              "type": "string",
                              "description": "Use \"StatefulSet\" as pod controller if your application needs to use persistent volumes",
                              "enum": [
                                "StatefulSet"
                              ]
                            },
                            "metadata": {
                              "type": "object",
                              "required": [
                                "namespace"
                              ],
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of a \"StatefulSet\" resource. Must be the same as the query param \"appName\"."
                                },
                                "namespace": {
                                  "type": "string",
                                  "description": "The kubernetes namespace created for your ECP account"
                                }
                              }
                            },
                            "spec": {
                              "type": "object",
                              "description": "This document only focuses on some typical configs of  a StatefulSet object. For more about how to specify a StatefulSet, please refer to the official kubernetes API reference https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.16/#statefulset-v1-apps",
                              "required": [
                                "selector",
                                "template"
                              ],
                              "properties": {
                                "selector": {
                                  "type": "object",
                                  "description": "A label query over pods. Must match the pod template's labels.",
                                  "required": [
                                    "matchLabels"
                                  ],
                                  "properties": {
                                    "matchLabels": {
                                      "type": "object",
                                      "description": "A map of {key,value} pairs"
                                    }
                                  }
                                },
                                "template": {
                                  "type": "object",
                                  "description": "Template of the pods that will be created by the StatefulSet",
                                  "required": [
                                    "metadata",
                                    "spec"
                                  ],
                                  "properties": {
                                    "metadata": {
                                      "type": "object",
                                      "required": [
                                        "labels"
                                      ],
                                      "properties": {
                                        "labels": {
                                          "type": "object",
                                          "description": "Map of string keys and values that can be used to organize and categorize pods. Must match selector of the StatefulSet"
                                        },
                                        "annotations": {
                                          "type": "object",
                                          "description": "An unstructured key value map stored with a pod",
                                          "properties": {
                                            "quantil.com/enableExternalIP": {
                                              "type": "boolean",
                                              "default": false,
                                              "description": "Set this annotation to true if you would like to have a public IPv4 address for the pod. Alternatively, you can create an ECP custom \"LoadBalancer4\" object for your ECP application to expose the pod. "
                                            },
                                            "quantil.com/enableIpv6ExternalIP": {
                                              "type": "boolean",
                                              "default": false,
                                              "description": "Set this annotation to true if you would like to have a public IPv6 address for the pod. Alternatively, you can create an ECP custom \"LoadBalancer4\" object for your ECP application to expose the pod. "
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "spec": {
                                      "type": "object",
                                      "required": [
                                        "containers"
                                      ],
                                      "description": "Specification of desired behavior of the pod",
                                      "properties": {
                                        "containers": {
                                          "type": "array",
                                          "description": "List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "image": {
                                                "type": "string",
                                                "description": "Docker image name"
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "Name of the container specified as a DNS_LABEL"
                                              },
                                              "resources": {
                                                "type": "object",
                                                "required": [
                                                  "limits"
                                                ],
                                                "description": "Compute Resources required by this container. Cannot be updated.",
                                                "properties": {
                                                  "limits": {
                                                    "type": "object",
                                                    "required": [
                                                      "cpu",
                                                      "memory"
                                                    ],
                                                    "description": "The maximum amount of compute resources required",
                                                    "properties": {
                                                      "cpu": {
                                                        "type": "string",
                                                        "description": "The amount of CPU required. Minimum 0.05 core. The sum of limits.cpu required by all containers in the pod must not exceed 24 cores."
                                                      },
                                                      "memory": {
                                                        "type": "string",
                                                        "description": "The amount of memory required. Minimum 50 MB. The sum of limits.memory required by all containers in the pod must not exceed 128 GB."
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              "volumeMounts": {
                                                "type": "array",
                                                "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "name": {
                                                      "type": "string",
                                                      "description": "This must match the Name of a Volume"
                                                    },
                                                    "mountPath": {
                                                      "type": "string",
                                                      "description": "Path within the container at which the volume should be mounted. Must not contain ':'."
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "required": [
                                              "image",
                                              "name",
                                              "resources"
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                "volumeClaimTemplates": {
                                  "type": "array",
                                  "description": "A list of persistent volume claims that pods are allowed to reference. Every claim in this list must have at least one matching (by name) volumeMount in one container in the pod template.",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "metadata": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "description": "Name of a volume claim"
                                          },
                                          "annotations": {
                                            "type": "object",
                                            "properties": {
                                              "volume.beta.kubernetes.io/storage-class": {
                                                "type": "string",
                                                "enum": [
                                                  "local-ssd",
                                                  "persist-ssd"
                                                ],
                                                "description": "Specifiy the storageClass of a volume claim. Options include \"local-ssd\" and \"persist-ssd\". \"local-ssd\" means local persistent SSD storage, in which case data will be lost when a pod is rescheduled to another node. \"persist-ssd\" means remote persistent SSD storage, in which case data will be persisted even when the pod is rescheduled."
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "spec": {
                                        "type": "object",
                                        "properties": {
                                          "accessModes": {
                                            "type": "array",
                                            "description": "The desired access modes the volume claim should have. Should be \"ReadWriteOnce\".",
                                            "items": {
                                              "type": "string"
                                            }
                                          },
                                          "resources": {
                                            "type": "object",
                                            "description": "The resources the volume claim should have",
                                            "properties": {
                                              "requests": {
                                                "type": "object",
                                                "description": "The minimum amount of resources required",
                                                "properties": {
                                                  "storage": {
                                                    "type": "string",
                                                    "description": "The storage capacity required. Must be not less than 500MB and not higher than 100GB."
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "required": [
                            "apiVersion",
                            "Kind",
                            "metadata",
                            "spec"
                          ]
                        }
                      ]
                    },
                    {
                      "title": "App Exposure",
                      "type": "object",
                      "description": "LoadBalancer4",
                      "properties": {
                        "apiVersion": {
                          "type": "string",
                          "enum": [
                            "v1"
                          ]
                        },
                        "Kind": {
                          "type": "string",
                          "enum": [
                            "LoadBalancer4"
                          ],
                          "description": "Use \"LoadBalancer4\", an ECP custom resource, to expose your application"
                        },
                        "metadata": {
                          "type": "object",
                          "required": [
                            "namespace"
                          ],
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Name of a \"LoadBalancer4\" object. Must be the same as the query param \"appName\"."
                            },
                            "namespace": {
                              "type": "string",
                              "description": "The kubernetes namespace created for your ECP account"
                            }
                          }
                        },
                        "spec": {
                          "type": "object",
                          "required": [
                            "listeners"
                          ],
                          "properties": {
                            "listeners": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "Name of a listener. Must be unique across a \"LoadBalancer4\" obejct. Allows lower-case letters, digits and hyphens only. Must not start or end with a hyphen, and must be less than 63 characters."
                                  },
                                  "backendSelector": {
                                    "type": "object",
                                    "description": "Key value pair that is used to match target pods as backend of the LoadBalancer4."
                                  },
                                  "listenerPort": {
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 65535,
                                    "description": "Number of port that the LoadBalancer4 listens on"
                                  },
                                  "backendPort": {
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 65535,
                                    "description": "Number of the backend pods' port that receives traffic forwarded by the LoadBalancer4. Must be the same as \"listenerPort\"."
                                  },
                                  "protocol": {
                                    "type": "string",
                                    "enum": [
                                      "TCP",
                                      "UDP"
                                    ]
                                  },
                                  "scheduler": {
                                    "type": "string",
                                    "enum": [
                                      "rr",
                                      "lc",
                                      "sh"
                                    ],
                                    "description": "Load balancing algorithm used to make load balancing decision. Can be \"rr\" (round robin), \"lc\" (least conncetions) or \"sh\" (Source Hash). Defaults to \"rr\"."
                                  },
                                  "healthCheck": {
                                    "type": "boolean",
                                    "default": false,
                                    "description": "Periodic health check of backend pods. Pod that fails health check will be removed by the load balancer."
                                  },
                                  "healthCheckType": {
                                    "type": "string",
                                    "enum": [
                                      "TCP",
                                      "HTTP"
                                    ],
                                    "description": "If \"protocol\" is set to \"TCP\", the health check type can be \"TCP\" or \"HTTP\". If the \"protocol\" field is set to \"UDP\", no health check can be configured."
                                  },
                                  "healthCheckDomain": {
                                    "type": "string",
                                    "description": "Host name to connect to. Acceptable only when the health check type is \"HTTP\"."
                                  },
                                  "healthCheckURI": {
                                    "type": "string",
                                    "description": "Path to access. Acceptable only when the health check type is \"HTTP\"."
                                  },
                                  "healthCheckConnectPort": {
                                    "type": "integer",
                                    "description": "Number of the port to access on the backend pods. Set to same as the \"backendPort\" by default.",
                                    "minimum": 1,
                                    "maximum": 65535
                                  },
                                  "healthCheckInterval": {
                                    "type": "integer",
                                    "default": 1,
                                    "description": "How often (in seconds) to perform the health check",
                                    "minimum": 1,
                                    "maximum": 5
                                  }
                                },
                                "required": [
                                  "name",
                                  "backendSelector",
                                  "listenerPort",
                                  "backendPort"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "required": [
                        "apiVersion",
                        "Kind",
                        "metadata",
                        "spec"
                      ]
                    },
                    {
                      "title": "App Distribution",
                      "oneOf": [
                        {
                          "title": "RegionPreference",
                          "type": "object",
                          "x-examples": {
                            "example-1": {
                              "apiVersion": "v1",
                              "kind": "RegionPreference",
                              "metadata": {
                                "name": "myapp",
                                "namespace": "demo"
                              },
                              "spec": {
                                "regions": [
                                  {
                                    "name": "NA-WEST",
                                    "replicas": 6
                                  },
                                  {
                                    "name": "EU",
                                    "replicas": 4
                                  }
                                ]
                              }
                            }
                          },
                          "description": "Region",
                          "properties": {
                            "apiVersion": {
                              "type": "string",
                              "enum": [
                                "v1"
                              ]
                            },
                            "Kind": {
                              "type": "string",
                              "description": "Use \"RegionPreference\", an ECP custom resource, to specify ECP regions where you would like to have your application distributed. ",
                              "enum": [
                                "RegionPreference"
                              ]
                            },
                            "metadata": {
                              "type": "object",
                              "required": [
                                "namespace"
                              ],
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of a \"RegionPreference\" resource. Must be the same as the query param \"appName\"."
                                },
                                "namespace": {
                                  "type": "string",
                                  "description": "The kubernetes namespace created for your ECP account"
                                }
                              }
                            },
                            "spec": {
                              "type": "object",
                              "required": [
                                "regions"
                              ],
                              "properties": {
                                "regions": {
                                  "type": "array",
                                  "description": "Array of target ECP regions to distribute your application",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "type": "string",
                                        "description": "Code of an ECP region, e.g. \"NA-WEST\" which stands for west of North America."
                                      },
                                      "replicas": {
                                        "type": "integer",
                                        "description": "The total number of pod instances that you would like to maintain for your application within an ECP region",
                                        "minimum": 1
                                      }
                                    },
                                    "required": [
                                      "name",
                                      "replicas"
                                    ]
                                  }
                                }
                              }
                            }
                          },
                          "required": [
                            "apiVersion",
                            "Kind",
                            "metadata",
                            "spec"
                          ]
                        },
                        {
                          "title": "Location",
                          "type": "object",
                          "description": "Location",
                          "x-examples": {
                            "example-1": {
                              "apiVersion": "v1",
                              "kind": "Location",
                              "metadata": {
                                "name": "myapp",
                                "namespace": "demo"
                              },
                              "spec": {
                                "locations": [
                                  {
                                    "name": "sjc",
                                    "replicas": 2
                                  },
                                  {
                                    "name": "ams",
                                    "replicas": 1
                                  }
                                ]
                              }
                            }
                          },
                          "properties": {
                            "apiVersion": {
                              "type": "string",
                              "enum": [
                                "v1"
                              ]
                            },
                            "Kind": {
                              "type": "string",
                              "enum": [
                                "Location"
                              ],
                              "description": "Use \"Location\", an ECP custom resource, to pick ECP PoPs where you would like to run your application. "
                            },
                            "metadata": {
                              "type": "object",
                              "required": [
                                "namespace"
                              ],
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of a \"Location\" resource. Must be the same as the query param \"appName\"."
                                },
                                "namespace": {
                                  "type": "string",
                                  "description": "The kubernetes namespace created for your ECP account"
                                }
                              }
                            },
                            "spec": {
                              "type": "object",
                              "required": [
                                "locations"
                              ],
                              "properties": {
                                "locations": {
                                  "type": "array",
                                  "description": "Array of target ECP PoPs to run your application",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "type": "string",
                                        "description": "Code of an ECP PoP, e.g. \"sjc\" which stands for the PoP at San Jose, US."
                                      },
                                      "replicas": {
                                        "type": "integer",
                                        "description": "Number of pod instances that you would like to maintain for your application at an ECP PoP",
                                        "minimum": 1
                                      }
                                    },
                                    "required": [
                                      "name",
                                      "replicas"
                                    ]
                                  }
                                }
                              }
                            }
                          },
                          "required": [
                            "apiVersion",
                            "Kind",
                            "metadata",
                            "spec"
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Partially update an application",
        "operationId": "patch-application-by-ID",
        "responses": {
          "204": {
            "description": "No Content",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "ApplicationBeingDeleted",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "ApplicationBeingDeleted"
                        },
                        "message": {
                          "type": "string",
                          "description": "The application is being deleted and cannot be updated or deleted again."
                        }
                      }
                    },
                    {
                      "title": "AppNameInconsistent",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "AppNameInconsistent"
                        },
                        "message": {
                          "type": "string",
                          "description": "The \"appName\" parameter value is inconsistent with the YAML/JSON file in request body. The \"metadata.name\" field of each object to be deployed must use the same app name."
                        }
                      }
                    },
                    {
                      "title": "QuotaExceeded",
                      "type": "object",
                      "description": "",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "QuotaExceeded"
                        },
                        "message": {
                          "type": "string",
                          "description": "The application could not be deployed because it requires {resource requests}. You have a quota of {resources available}."
                        }
                      }
                    },
                    {
                      "title": "ConflictNetworkConfiguration",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "ConflictNetworkConfiguration"
                        },
                        "message": {
                          "type": "string",
                          "description": "Requesting public IPv4 addresses for pods is not allowed when a LoadBalancer4 object is already specified. Please remove the LoadBalancer4 object if your pods need to have publicly accessible IPv4 addresses."
                        }
                      }
                    },
                    {
                      "title": "MultipleResourceObjectsNotAllowed",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "MultipleResourceObjectsNotAllowed"
                        },
                        "message": {
                          "type": "string",
                          "description": "Defining multiple objects of the resource {kind} is not allowed."
                        }
                      }
                    },
                    {
                      "title": "ResourceObjectNotExist",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "ResourceObjectNotExist"
                        },
                        "message": {
                          "type": "string",
                          "description": "The application does not contain a {kind} object. Please use PUT method if you would like to add a new object."
                        }
                      }
                    },
                    {
                      "title": "SyntaxError",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "SyntaxError"
                        },
                        "message": {
                          "type": "string",
                          "description": "{error message}"
                        }
                      }
                    },
                    {
                      "title": "IncorrectApiVersion",
                      "type": "object",
                      "description": "",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "IncorrectApiVersion"
                        },
                        "message": {
                          "type": "string",
                          "description": "No kind {kind} is registered for version {version}."
                        }
                      }
                    },
                    {
                      "title": "InvalidResourceRequirement",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "InvalidResourceRequirement"
                        },
                        "message": {
                          "type": "string",
                          "description": "The resource requirement is invalid. {Reason}\n\nPossible reasons:\n1. The requests.cpu of a container should not be lower than 0.05 core. \n2. The sum of limits.cpu of a pod should not be higher than 24 cores. \n3. The requests.cpu should be less than or equal to limits.cpu. \n4. The CPU requirement (measured in cores) should be expressed in plain numbers or with “m” suffix. \n5. The requests.mem of a container should not be lower than 50MB.\n6. The sum of limits.mem of a pod should not be higher than 128GB. \n7. The requests.mem should be less than or equal to limits.mem.\n8. The memory requirement (measured in bytes) should be expressed in plain numbers or with these suffixes: E, P, T, G, M, K, Ei, Pi, Ti, Gi, Mi, Ki.\n9. The requests.storage of a PVC should be not lower than 500MB and not higher than 100GB.\n10. The storage requirement (measured in bytes) should be expressed in plain numbers or with these suffixes: E, P, T, G, M, K, Ei, Pi, Ti, Gi, Mi, Ki."
                        }
                      }
                    },
                    {
                      "title": "RepeatedTarget",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "RepeatedTarget"
                        },
                        "message": {
                          "type": "string",
                          "description": "The target {location/region} is repeated in your specification. Please combine them into one target."
                        }
                      }
                    },
                    {
                      "title": "PoPDoesNotExist",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "PoPDoesNotExist"
                        },
                        "message": {
                          "type": "string",
                          "description": "The PoP {pop code} specified is invalid or does not exist."
                        }
                      }
                    },
                    {
                      "title": "PoPNotAvailable",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "PoPNotAvailable"
                        },
                        "message": {
                          "type": "string",
                          "description": "The PoP {pop code} specified is offline and currently not available."
                        }
                      }
                    },
                    {
                      "title": "PoPFullyLoaded",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "PoPFullyLoaded"
                        },
                        "message": {
                          "type": "string",
                          "description": "The PoP {pop code} specified is fully loaded and cannot provision resources requested. Please choose a different location."
                        }
                      }
                    },
                    {
                      "title": "RegionDoesNotExist",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "RegionDoesNotExist"
                        },
                        "message": {
                          "type": "string",
                          "description": "The region {region} is invalid or does not exist."
                        }
                      }
                    },
                    {
                      "title": "RegionNotAvailable",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "RegionNotAvailable"
                        },
                        "message": {
                          "type": "string",
                          "description": "There are currently no available PoPs under the region {region}."
                        }
                      }
                    },
                    {
                      "title": "PVCUpdateNotAllowed",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "PVCUpdateNotAllowed"
                        },
                        "message": {
                          "type": "string",
                          "description": "Updating PVCs in use is not allowed."
                        }
                      }
                    },
                    {
                      "title": "VolumeNotDefined",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "VolumeNotDefined"
                        },
                        "message": {
                          "type": "string",
                          "description": "The volume {volume name} in “volumeMounts” is not defined."
                        }
                      }
                    },
                    {
                      "title": "VolumeNotMounted",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "VolumeNotMounted"
                        },
                        "message": {
                          "type": "string",
                          "description": "One of: \"The volume {volume name} defined is not mounted to any mount points.\" \"The volume {volume name} is not properly mounted. The field “volumeMounts[].mountPath” is required.\""
                        }
                      }
                    },
                    {
                      "title": "ConflictVolumeName",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "ConflictVolumeName"
                        },
                        "message": {
                          "type": "string",
                          "description": "A volume name must be unique across volumes of all types."
                        }
                      }
                    },
                    {
                      "title": "ConflictVolumeMountPath",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "ConflictVolumeMountPath"
                        },
                        "message": {
                          "type": "string",
                          "description": "The mountPath in volumeMounts must be unique and without overlapping."
                        }
                      }
                    },
                    {
                      "title": "PVCVolumeNotAllowed",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "PVCVolumeNotAllowed"
                        },
                        "message": {
                          "type": "string",
                          "description": "Using PVC volumes with a kubernetes Controller of type other than StatefulSet is not allowed."
                        }
                      }
                    },
                    {
                      "title": "VolumeTypeNotAllowed",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "VolumeTypeNotAllowed"
                        },
                        "message": {
                          "type": "string",
                          "description": "Only “configMap” and “secret” volumes are allowed. If a PVC volume is desired, please use a StatefulSet Controller and define the volume in “spec.volumeClaimTemplates”."
                        }
                      }
                    },
                    {
                      "title": "ConflictPVCStorageClass",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "ConflictPVCStorageClass"
                        },
                        "message": {
                          "type": "string",
                          "description": "Using PVC volumes of different storage classes is not allowed."
                        }
                      }
                    },
                    {
                      "title": "InvalidLoadBalancer4Listener",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "InvalidLoadBalancer4Listener"
                        },
                        "message": {
                          "type": "string",
                          "description": "The LoadBalancer4 listener {listener name} is invalid. The “backendSelector” does not match {ReplicaSet/StatefulSet/Deployment}.spec.template.metadata.labels."
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "ApplicationBeingDeployed",
                      "message": "The application is being deployed and cannot be updated/deleted."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ApplicationNotFound",
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "ApplicationNotFound"
                    },
                    "message": {
                      "type": "string",
                      "description": "The application ID given does not exist."
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "ApplicationNotFound",
                      "message": "The application ID given does not exist."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "tags": [
          "Applications"
        ],
        "description": "Update an ECP application by using the HTTP method “PATCH”. **If an application is using persistent storage volumes, scaling down or redistributing an application might cause existing persistent volumes to be deleted along with deletion of pods.**",
        "requestBody": {
          "content": {
            "application/yaml": {
              "schema": {
                "title": "",
                "description": "",
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "title": "App Configuration",
                      "oneOf": [
                        {
                          "title": "ReplicaSet",
                          "type": "object",
                          "x-examples": {
                            "example-1": {}
                          },
                          "description": "ReplicaSet",
                          "properties": {
                            "apiVersion": {
                              "type": "string",
                              "enum": [
                                "apps/v1"
                              ]
                            },
                            "Kind": {
                              "type": "string",
                              "description": "Use \"ReplicaSet\" as pod controller if your application does not require persistent storage",
                              "enum": [
                                "ReplicaSet"
                              ]
                            },
                            "metadata": {
                              "type": "object",
                              "required": [
                                "namespace"
                              ],
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of a \"StatefulSet\" resource. Must be the same as the query param \"appName\"."
                                },
                                "namespace": {
                                  "type": "string",
                                  "description": "The kubernetes namespace created for your ECP account"
                                }
                              }
                            },
                            "spec": {
                              "type": "object",
                              "description": "This document only focuses on some typical configs of  a ReplicaSet object. For more about how to specify a ReplicaSet, please refer to the official kubernetes API reference https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.16/#replicaset-v1-apps",
                              "required": [
                                "selector",
                                "template"
                              ],
                              "properties": {
                                "selector": {
                                  "type": "object",
                                  "description": "A label query over pods. Must match the pod template's labels.",
                                  "required": [
                                    "matchLabels"
                                  ],
                                  "properties": {
                                    "matchLabels": {
                                      "type": "object",
                                      "description": "A map of {key,value} pairs"
                                    }
                                  }
                                },
                                "template": {
                                  "type": "object",
                                  "description": "Template of the pods that will be created by the ReplicaSet",
                                  "required": [
                                    "metadata",
                                    "spec"
                                  ],
                                  "properties": {
                                    "metadata": {
                                      "type": "object",
                                      "required": [
                                        "labels"
                                      ],
                                      "properties": {
                                        "labels": {
                                          "type": "object",
                                          "description": "Map of string keys and values that can be used to organize and categorize pods. Must match selector of the ReplicaSet"
                                        },
                                        "annotations": {
                                          "type": "object",
                                          "description": "An unstructured key value map stored with a pod",
                                          "properties": {
                                            "quantil.com/enableExternalIP": {
                                              "type": "boolean",
                                              "default": false,
                                              "description": "Set this annotation to true if you would like to have a public IPv4 address for the pod. Alternatively, you can create an ECP custom \"LoadBalancer4\" object for your ECP application to expose the pod. "
                                            },
                                            "quantil.com/enableIpv6ExternalIP": {
                                              "type": "boolean",
                                              "default": false,
                                              "description": "Set this annotation to true if you would like to have a public IPv6 address for the pod. Alternatively, you can create an ECP custom \"LoadBalancer4\" object for your ECP application to expose the pod. "
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "spec": {
                                      "type": "object",
                                      "description": "Specification of desired behavior of the pod",
                                      "required": [
                                        "containers"
                                      ],
                                      "properties": {
                                        "containers": {
                                          "type": "array",
                                          "description": "List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "image": {
                                                "type": "string",
                                                "description": "Docker image name"
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "Name of the container specified as a DNS_LABEL"
                                              },
                                              "resources": {
                                                "type": "object",
                                                "description": "Compute Resources required by this container. Cannot be updated.",
                                                "required": [
                                                  "limits"
                                                ],
                                                "properties": {
                                                  "limits": {
                                                    "type": "object",
                                                    "description": "The maximum amount of compute resources required",
                                                    "required": [
                                                      "cpu",
                                                      "memory"
                                                    ],
                                                    "properties": {
                                                      "cpu": {
                                                        "type": "string",
                                                        "description": "The amount of CPU required. Minimum 0.05 core. The sum of limits.cpu required by all containers in the pod must not exceed 24 cores."
                                                      },
                                                      "memory": {
                                                        "type": "string",
                                                        "description": "The amount of memory required. Minimum 50 MB. The sum of limits.memory required by all containers in the pod must not exceed 128 GB."
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "required": [
                                              "image",
                                              "name",
                                              "resources"
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "required": [
                            "apiVersion",
                            "Kind",
                            "metadata",
                            "spec"
                          ]
                        },
                        {
                          "title": "StatefulSet",
                          "type": "object",
                          "description": "StatefulSet",
                          "x-examples": {
                            "example-1": {}
                          },
                          "properties": {
                            "apiVersion": {
                              "type": "string",
                              "enum": [
                                "apps/v1"
                              ]
                            },
                            "Kind": {
                              "type": "string",
                              "description": "Use \"StatefulSet\" as pod controller if your application needs to use persistent volumes",
                              "enum": [
                                "StatefulSet"
                              ]
                            },
                            "metadata": {
                              "type": "object",
                              "required": [
                                "namespace"
                              ],
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of a \"StatefulSet\" resource. Must be the same as the query param \"appName\"."
                                },
                                "namespace": {
                                  "type": "string",
                                  "description": "The kubernetes namespace created for your ECP account"
                                }
                              }
                            },
                            "spec": {
                              "type": "object",
                              "description": "This document only focuses on some typical configs of  a StatefulSet object. For more about how to specify a StatefulSet, please refer to the official kubernetes API reference https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.16/#statefulset-v1-apps",
                              "required": [
                                "selector",
                                "template"
                              ],
                              "properties": {
                                "selector": {
                                  "type": "object",
                                  "description": "A label query over pods. Must match the pod template's labels.",
                                  "required": [
                                    "matchLabels"
                                  ],
                                  "properties": {
                                    "matchLabels": {
                                      "type": "object",
                                      "description": "A map of {key,value} pairs"
                                    }
                                  }
                                },
                                "template": {
                                  "type": "object",
                                  "description": "Template of the pods that will be created by the StatefulSet",
                                  "required": [
                                    "metadata",
                                    "spec"
                                  ],
                                  "properties": {
                                    "metadata": {
                                      "type": "object",
                                      "required": [
                                        "labels"
                                      ],
                                      "properties": {
                                        "labels": {
                                          "type": "object",
                                          "description": "Map of string keys and values that can be used to organize and categorize pods. Must match selector of the StatefulSet"
                                        },
                                        "annotations": {
                                          "type": "object",
                                          "description": "An unstructured key value map stored with a pod",
                                          "properties": {
                                            "quantil.com/enableExternalIP": {
                                              "type": "boolean",
                                              "default": false,
                                              "description": "Set this annotation to true if you would like to have a public IPv4 address for the pod. Alternatively, you can create an ECP custom \"LoadBalancer4\" object for your ECP application to expose the pod. "
                                            },
                                            "quantil.com/enableIpv6ExternalIP": {
                                              "type": "boolean",
                                              "default": false,
                                              "description": "Set this annotation to true if you would like to have a public IPv6 address for the pod. Alternatively, you can create an ECP custom \"LoadBalancer4\" object for your ECP application to expose the pod. "
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "spec": {
                                      "type": "object",
                                      "required": [
                                        "containers"
                                      ],
                                      "description": "Specification of desired behavior of the pod",
                                      "properties": {
                                        "containers": {
                                          "type": "array",
                                          "description": "List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "image": {
                                                "type": "string",
                                                "description": "Docker image name"
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "Name of the container specified as a DNS_LABEL"
                                              },
                                              "resources": {
                                                "type": "object",
                                                "required": [
                                                  "limits"
                                                ],
                                                "description": "Compute Resources required by this container. Cannot be updated.",
                                                "properties": {
                                                  "limits": {
                                                    "type": "object",
                                                    "required": [
                                                      "cpu",
                                                      "memory"
                                                    ],
                                                    "description": "The maximum amount of compute resources required",
                                                    "properties": {
                                                      "cpu": {
                                                        "type": "string",
                                                        "description": "The amount of CPU required. Minimum 0.05 core. The sum of limits.cpu required by all containers in the pod must not exceed 24 cores."
                                                      },
                                                      "memory": {
                                                        "type": "string",
                                                        "description": "The amount of memory required. Minimum 50 MB. The sum of limits.memory required by all containers in the pod must not exceed 128 GB."
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              "volumeMounts": {
                                                "type": "array",
                                                "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "name": {
                                                      "type": "string",
                                                      "description": "This must match the Name of a Volume"
                                                    },
                                                    "mountPath": {
                                                      "type": "string",
                                                      "description": "Path within the container at which the volume should be mounted. Must not contain ':'."
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "required": [
                                              "image",
                                              "name",
                                              "resources"
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                "volumeClaimTemplates": {
                                  "type": "array",
                                  "description": "A list of persistent volume claims that pods are allowed to reference. Every claim in this list must have at least one matching (by name) volumeMount in one container in the pod template.",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "metadata": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "description": "Name of a volume claim"
                                          },
                                          "annotations": {
                                            "type": "object",
                                            "properties": {
                                              "volume.beta.kubernetes.io/storage-class": {
                                                "type": "string",
                                                "enum": [
                                                  "local-ssd",
                                                  "persist-ssd"
                                                ],
                                                "description": "Specifiy the storageClass of a volume claim. Options include \"local-ssd\" and \"persist-ssd\". \"local-ssd\" means local persistent SSD storage, in which case data will be lost when a pod is rescheduled to another node. \"persist-ssd\" means remote persistent SSD storage, in which case data will be persisted even when the pod is rescheduled."
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "spec": {
                                        "type": "object",
                                        "properties": {
                                          "accessModes": {
                                            "type": "array",
                                            "description": "The desired access modes the volume claim should have. Should be \"ReadWriteOnce\".",
                                            "items": {
                                              "type": "string"
                                            }
                                          },
                                          "resources": {
                                            "type": "object",
                                            "description": "The resources the volume claim should have",
                                            "properties": {
                                              "requests": {
                                                "type": "object",
                                                "description": "The minimum amount of resources required",
                                                "properties": {
                                                  "storage": {
                                                    "type": "string",
                                                    "description": "The storage capacity required. Must be not less than 500MB and not higher than 100GB."
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "required": [
                            "apiVersion",
                            "Kind",
                            "metadata",
                            "spec"
                          ]
                        }
                      ]
                    },
                    {
                      "title": "App Exposure",
                      "type": "object",
                      "description": "LoadBalancer4",
                      "properties": {
                        "apiVersion": {
                          "type": "string",
                          "enum": [
                            "v1"
                          ]
                        },
                        "Kind": {
                          "type": "string",
                          "enum": [
                            "LoadBalancer4"
                          ],
                          "description": "Use \"LoadBalancer4\", an ECP custom resource, to expose your application"
                        },
                        "metadata": {
                          "type": "object",
                          "required": [
                            "namespace"
                          ],
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Name of a \"LoadBalancer4\" object. Must be the same as the query param \"appName\"."
                            },
                            "namespace": {
                              "type": "string",
                              "description": "The kubernetes namespace created for your ECP account"
                            }
                          }
                        },
                        "spec": {
                          "type": "object",
                          "required": [
                            "listeners"
                          ],
                          "properties": {
                            "listeners": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "Name of a listener. Must be unique across a \"LoadBalancer4\" obejct. Allows lower-case letters, digits and hyphens only. Must not start or end with a hyphen, and must be less than 63 characters."
                                  },
                                  "backendSelector": {
                                    "type": "object",
                                    "description": "Key value pair that is used to match target pods as backend of the LoadBalancer4."
                                  },
                                  "listenerPort": {
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 65535,
                                    "description": "Number of port that the LoadBalancer4 listens on"
                                  },
                                  "backendPort": {
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 65535,
                                    "description": "Number of the backend pods' port that receives traffic forwarded by the LoadBalancer4. Must be the same as \"listenerPort\"."
                                  },
                                  "protocol": {
                                    "type": "string",
                                    "enum": [
                                      "TCP",
                                      "UDP"
                                    ]
                                  },
                                  "scheduler": {
                                    "type": "string",
                                    "enum": [
                                      "rr",
                                      "lc",
                                      "sh"
                                    ],
                                    "description": "Load balancing algorithm used to make load balancing decision. Can be \"rr\" (round robin), \"lc\" (least conncetions) or \"sh\" (Source Hash). Defaults to \"rr\"."
                                  },
                                  "healthCheck": {
                                    "type": "boolean",
                                    "default": false,
                                    "description": "Periodic health check of backend pods. Pod that fails health check will be removed by the load balancer."
                                  },
                                  "healthCheckType": {
                                    "type": "string",
                                    "enum": [
                                      "TCP",
                                      "HTTP"
                                    ],
                                    "description": "If \"protocol\" is set to \"TCP\", the health check type can be \"TCP\" or \"HTTP\". If the \"protocol\" field is set to \"UDP\", no health check can be configured."
                                  },
                                  "healthCheckDomain": {
                                    "type": "string",
                                    "description": "Host name to connect to. Acceptable only when the health check type is \"HTTP\"."
                                  },
                                  "healthCheckURI": {
                                    "type": "string",
                                    "description": "Path to access. Acceptable only when the health check type is \"HTTP\"."
                                  },
                                  "healthCheckConnectPort": {
                                    "type": "integer",
                                    "description": "Number of the port to access on the backend pods. Set to same as the \"backendPort\" by default.",
                                    "minimum": 1,
                                    "maximum": 65535
                                  },
                                  "healthCheckInterval": {
                                    "type": "integer",
                                    "default": 1,
                                    "description": "How often (in seconds) to perform the health check",
                                    "minimum": 1,
                                    "maximum": 5
                                  }
                                },
                                "required": [
                                  "name",
                                  "backendSelector",
                                  "listenerPort",
                                  "backendPort"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "required": [
                        "apiVersion",
                        "Kind",
                        "metadata",
                        "spec"
                      ]
                    },
                    {
                      "title": "App Distribution",
                      "oneOf": [
                        {
                          "title": "RegionPreference",
                          "type": "object",
                          "x-examples": {
                            "example-1": {
                              "apiVersion": "v1",
                              "kind": "RegionPreference",
                              "metadata": {
                                "name": "myapp",
                                "namespace": "demo"
                              },
                              "spec": {
                                "regions": [
                                  {
                                    "name": "NA-WEST",
                                    "replicas": 6
                                  },
                                  {
                                    "name": "EU",
                                    "replicas": 4
                                  }
                                ]
                              }
                            }
                          },
                          "description": "Region",
                          "properties": {
                            "apiVersion": {
                              "type": "string",
                              "enum": [
                                "v1"
                              ]
                            },
                            "Kind": {
                              "type": "string",
                              "description": "Use \"RegionPreference\", an ECP custom resource, to specify ECP regions where you would like to have your application distributed. ",
                              "enum": [
                                "RegionPreference"
                              ]
                            },
                            "metadata": {
                              "type": "object",
                              "required": [
                                "namespace"
                              ],
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of a \"RegionPreference\" resource. Must be the same as the query param \"appName\"."
                                },
                                "namespace": {
                                  "type": "string",
                                  "description": "The kubernetes namespace created for your ECP account"
                                }
                              }
                            },
                            "spec": {
                              "type": "object",
                              "required": [
                                "regions"
                              ],
                              "properties": {
                                "regions": {
                                  "type": "array",
                                  "description": "Array of target ECP regions to distribute your application",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "type": "string",
                                        "description": "Code of an ECP region, e.g. \"NA-WEST\" which stands for west of North America."
                                      },
                                      "replicas": {
                                        "type": "integer",
                                        "description": "The total number of pod instances that you would like to maintain for your application within an ECP region",
                                        "minimum": 1
                                      }
                                    },
                                    "required": [
                                      "name",
                                      "replicas"
                                    ]
                                  }
                                }
                              }
                            }
                          },
                          "required": [
                            "apiVersion",
                            "Kind",
                            "metadata",
                            "spec"
                          ]
                        },
                        {
                          "title": "Location",
                          "type": "object",
                          "description": "Location",
                          "x-examples": {
                            "example-1": {
                              "apiVersion": "v1",
                              "kind": "Location",
                              "metadata": {
                                "name": "myapp",
                                "namespace": "demo"
                              },
                              "spec": {
                                "locations": [
                                  {
                                    "name": "sjc",
                                    "replicas": 2
                                  },
                                  {
                                    "name": "ams",
                                    "replicas": 1
                                  }
                                ]
                              }
                            }
                          },
                          "properties": {
                            "apiVersion": {
                              "type": "string",
                              "enum": [
                                "v1"
                              ]
                            },
                            "Kind": {
                              "type": "string",
                              "enum": [
                                "Location"
                              ],
                              "description": "Use \"Location\", an ECP custom resource, to pick ECP PoPs where you would like to run your application. "
                            },
                            "metadata": {
                              "type": "object",
                              "required": [
                                "namespace"
                              ],
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of a \"Location\" resource. Must be the same as the query param \"appName\"."
                                },
                                "namespace": {
                                  "type": "string",
                                  "description": "The kubernetes namespace created for your ECP account"
                                }
                              }
                            },
                            "spec": {
                              "type": "object",
                              "required": [
                                "locations"
                              ],
                              "properties": {
                                "locations": {
                                  "type": "array",
                                  "description": "Array of target ECP PoPs to run your application",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "type": "string",
                                        "description": "Code of an ECP PoP, e.g. \"sjc\" which stands for the PoP at San Jose, US."
                                      },
                                      "replicas": {
                                        "type": "integer",
                                        "description": "Number of pod instances that you would like to maintain for your application at an ECP PoP",
                                        "minimum": 1
                                      }
                                    },
                                    "required": [
                                      "name",
                                      "replicas"
                                    ]
                                  }
                                }
                              }
                            }
                          },
                          "required": [
                            "apiVersion",
                            "Kind",
                            "metadata",
                            "spec"
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/ecp/v1/applications/{applicationID}/vips": {
      "parameters": [
        {
          "name": "applicationID",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "ID of an ECP application"
        }
      ],
      "get": {
        "summary": "Query list of VIPs for an application",
        "tags": [
          "Applications"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "applicationID": {
                      "title": "",
                      "type": "string",
                      "description": "ID of an ECP application"
                    },
                    "appName": {
                      "title": "",
                      "type": "string",
                      "description": "Name of an ECP application. A valid name consists of lower-case alphanumeric characters or ‘-', must start and end with a lower-case alphanumeric character, and must be no more than 48 characters."
                    },
                    "createdBy": {
                      "title": "",
                      "type": "string",
                      "description": "API account or user that creates an ECP resource"
                    },
                    "creationTime": {
                      "title": "",
                      "format": "date-time",
                      "type": "string",
                      "description": "Datetime when the resource is created"
                    },
                    "lastUpdateTime": {
                      "type": "string",
                      "title": "",
                      "format": "date-time",
                      "description": "Datetime when the resource is last updated"
                    },
                    "VIPs": {
                      "title": "",
                      "type": "array",
                      "description": "Array of VIPs which are grouped per ECP PoPs",
                      "items": {
                        "type": "object",
                        "properties": {
                          "VIP": {
                            "type": "string",
                            "description": "Public IPv4 address(es) for the application at a certain ECP PoP. Multiple addresses are separated by a comma."
                          },
                          "VIP-v6": {
                            "type": "string",
                            "description": "Public IPv6 address(es) for the application at a certain ECP PoP. Multiple addresses are separated by a comma."
                          },
                          "isLoadBalanced": {
                            "type": "boolean",
                            "description": "A flag indicating if an ECP application is exposed via ECP-defined layer4 load balancers"
                          },
                          "PoP": {
                            "type": "string",
                            "description": "Full name of an ECP PoP where the public IP address(es) are located"
                          },
                          "podCount": {
                            "description": "Number of pods created for an application at an ECP PoP",
                            "type": "integer"
                          }
                        }
                      }
                    },
                    "totalCount": {
                      "type": "integer",
                      "description": "Total number of VIP groups, which equals to the number of ECP PoPs where the application is distributed."
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "applicationID": "2a766f310f5411ea977416f2b85638ba",
                      "appName": "myapp1",
                      "creationTime": "2019-11-25T07:21:15Z",
                      "createdBy": "demo",
                      "lastUpdateTime": "2019-12-26T03:06:32Z",
                      "totalCount": 2,
                      "VIPs": [
                        {
                          "VIP": "163.171.228.23",
                          "VIP-v6": "",
                          "isLoadBalanced": true,
                          "PoP": "Ashburn US",
                          "podCount": 1
                        },
                        {
                          "VIP": "163.171.235.53",
                          "VIP-v6": "",
                          "isLoadBalanced": true,
                          "PoP": "Warsaw PL",
                          "podCount": 1
                        }
                      ]
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "InvalidListOffset",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "InvalidListOffset"
                        },
                        "message": {
                          "type": "string",
                          "description": "The value of offset must be a valid non-negative integer."
                        }
                      }
                    },
                    {
                      "title": "InvalidListLimit",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "InvalidListLimit"
                        },
                        "message": {
                          "type": "string",
                          "description": "The value of limit must be a valid integer between 1 and 200, both inclusive."
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "InvalidListOffset",
                      "message": "The value of offset must be a valid non-negative integer."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ApplicationNotFound",
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "ApplicationNotFound"
                    },
                    "message": {
                      "type": "string",
                      "description": "The application ID given does not exist."
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "ApplicationNotFound",
                      "message": "The application ID given does not exist."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "operationId": "get-application-vips",
        "description": "List VIPs for an ECP application. An ECP application can be exposed via ECP-defined layer4 load balancers or via the public IP addresses assigned to pod instances created for the application. Depending on how an application is exposed, the concept “VIP” used here could mean the IP of a layer4 load balancer, or the public IP assigned to a pod instance. The VIP can be of protocol IPv4 and/or IPv6.",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates the first resource to return. The first has an offset of 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": "0"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of resources to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": "100",
              "maximum": 200,
              "minimum": 1
            }
          },
          {
            "name": "On-Behalf-Of",
            "in": "header",
            "description": "If you are a reseller, you can use this header to specify the ID of a child customer and make API call on their behalf.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {}
      }
    },
    "/ecp/v1/applications/{applicationID}/history": {
      "parameters": [
        {
          "name": "applicationID",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "ID of an ECP application"
        }
      ],
      "get": {
        "summary": "Query operations history for an application",
        "tags": [
          "Applications"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "applicationID": {
                      "title": "",
                      "type": "string",
                      "description": "ID of an ECP application"
                    },
                    "appName": {
                      "title": "",
                      "type": "string",
                      "description": "Name of an ECP application. A valid name consists of lower-case alphanumeric characters or ‘-', must start and end with a lower-case alphanumeric character, and must be no more than 48 characters."
                    },
                    "createdBy": {
                      "title": "",
                      "type": "string",
                      "description": "API account or user that creates an ECP resource"
                    },
                    "creationTime": {
                      "title": "",
                      "format": "date-time",
                      "type": "string",
                      "description": "Datetime when the resource is created"
                    },
                    "lastUpdateTime": {
                      "type": "string",
                      "title": "",
                      "format": "date-time",
                      "description": "Datetime when the resource is last updated"
                    },
                    "history": {
                      "title": "",
                      "type": "array",
                      "description": "Array of history operations for an ECP application",
                      "items": {
                        "type": "object",
                        "properties": {
                          "action": {
                            "type": "string",
                            "description": "Type of operation performed",
                            "enum": [
                              "create",
                              "patch",
                              "replace",
                              "delete"
                            ]
                          },
                          "timestamp": {
                            "type": "string",
                            "description": "Date-time indicating when the operation is performed",
                            "format": "date-time"
                          },
                          "configuration": {
                            "type": "string",
                            "description": "The application specification submitted along with the operation request"
                          },
                          "version": {
                            "type": "integer",
                            "description": "application version number"
                          },
                          "isLatest": {
                            "type": "boolean",
                            "description": "A flag indicating if the application version is the newest"
                          },
                          "calledBy": {
                            "description": "API account or user who calls for the operation",
                            "type": "string"
                          },
                          "deployStart": {
                            "type": "string",
                            "description": "Date-time indicating when the deployment as triggered by this operation starts",
                            "format": "date-time"
                          },
                          "deployEnd": {
                            "type": "string",
                            "description": "Date-time indicating when the deployment as triggered by this operation ends",
                            "format": "date-time"
                          },
                          "status": {
                            "type": "string",
                            "description": "Status of the deployment as triggered by this operation",
                            "enum": [
                              "waiting",
                              "deploying",
                              "deployed",
                              "failed",
                              "aborted"
                            ]
                          },
                          "message": {
                            "type": "string",
                            "description": "Text explaining the status of deployment"
                          }
                        }
                      }
                    },
                    "totalCount": {
                      "title": "",
                      "type": "integer",
                      "description": "Total number of resources"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "appName": "myapp1",
                      "applicationID": "2a766f310f5411ea977416f2b85638ba",
                      "creationTime": "2019-11-25T07:21:15Z",
                      "createdBy": "admin",
                      "lastUpdateTime": "2019-12-26T03:06:32Z",
                      "history": [
                        {
                          "action": "patch",
                          "timestamp": "2019-11-25T07:34:36Z",
                          "configuration": "apiVersion: v1\nkind: RegionPreference\nmetadata:\n  namespace: demo\nspec:\n  regions:\n    - name: EU\n      replicas: 1\n    - name: NA-EAST\n      replicas: 1\n---\r\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  labels:\n    app: myapp1\n  namespace: demo\nspec:\n  selector:\n    matchLabels:\n      app: myapp1\n  template:\n    metadata:\n      labels:\n        app: myapp1\n    spec:\n      containers:\n        - image: nginx\n          name: myapp1\n          ports:\n            - containerPort: 80\n              protocol: TCP\n          resources:\n            limits:\n              cpu: 200m\n              memory: 256Mi\n            requests:\n              cpu: 200m\n              memory: 256Mi\n          volumeMounts:\n            - mountPath: /tmp\n              name: data\n  volumeClaimTemplates:\n    - metadata:\n        annotations:\n          volume.beta.kubernetes.io/storage-class: local-ssd\n        name: data\n      spec:\n        accessModes:\n          - ReadWriteOnce\n        resources:\n          requests:\n            storage: 1G\n---\r\napiVersion: v1\nkind: LoadBalancer4\nmetadata:\n  namespace: demo\nspec:\n  listeners:\n    - backendPort: 80\n      backendSelector:\n        app: myapp1\n      healthCheck: false\n      listenerPort: 80\n      name: listener-80\n      protocol: tcp\n      scheduler: wlc\n",
                          "version": 2,
                          "calledBy": "demo",
                          "isLatest": false,
                          "deployStart": "2019-11-25T07:34:44Z",
                          "deployEnd": "2019-11-25T07:36:04Z",
                          "status": "deployed",
                          "message": ""
                        },
                        {
                          "action": "create",
                          "timestamp": "2019-11-25T07:21:15Z",
                          "configuration": "apiVersion: v1\nkind: RegionPreference\nmetadata:\n  namespace: demo\nspec:\n  regions:\n    - name: EU\n      replicas: 1\n    - name: NA-EAST\n      replicas: 2\n---\r\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  labels:\n    app: myapp1\n  namespace: demo\nspec:\n  selector:\n    matchLabels:\n      app: myapp1\n  template:\n    metadata:\n      labels:\n        app: myapp1\n    spec:\n      containers:\n        - image: nginx\n          name: myapp1\n          ports:\n            - containerPort: 80\n              protocol: TCP\n          resources:\n            limits:\n              cpu: 200m\n              memory: 256Mi\n            requests:\n              cpu: 200m\n              memory: 256Mi\n          volumeMounts:\n            - mountPath: /tmp\n              name: data\n  volumeClaimTemplates:\n    - metadata:\n        annotations:\n          volume.beta.kubernetes.io/storage-class: local-ssd\n        name: data\n      spec:\n        accessModes:\n          - ReadWriteOnce\n        resources:\n          requests:\n            storage: 1G\n---\r\napiVersion: v1\nkind: LoadBalancer4\nmetadata:\n  namespace: demo\nspec:\n  listeners:\n    - backendPort: 80\n      backendSelector:\n        app: myapp1\n      healthCheck: false\n      listenerPort: 80\n      name: listener-80\n      protocol: tcp\n      scheduler: wlc\n",
                          "version": 1,
                          "calledBy": "admin",
                          "isLatest": false,
                          "deployStart": "2019-11-25T07:21:24Z",
                          "deployEnd": "2019-11-25T07:22:44Z",
                          "status": "deployed",
                          "message": ""
                        }
                      ],
                      "totalCount": 2
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "InvalidListOffset",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "InvalidListOffset"
                        },
                        "message": {
                          "type": "string",
                          "description": "The value of offset must be a valid non-negative integer."
                        }
                      }
                    },
                    {
                      "title": "InvalidListLimit",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "InvalidListLimit"
                        },
                        "message": {
                          "type": "string",
                          "description": "The value of limit must be a valid integer between 1 and 200, both inclusive."
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "InvalidListOffset",
                      "message": "The value of offset must be a valid non-negative integer."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ApplicationNotFound",
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "ApplicationNotFound"
                    },
                    "message": {
                      "type": "string",
                      "description": "The application ID given does not exist."
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "ApplicationNotFound",
                      "message": "The application ID given does not exist."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "operationId": "get-application-history",
        "description": "View operations history for an ECP application.",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates the first resource to return. The first has an offset of 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": "0"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of resources to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": "100",
              "maximum": 200,
              "minimum": 1
            }
          },
          {
            "name": "On-Behalf-Of",
            "in": "header",
            "description": "If you are a reseller, you can use this header to specify the ID of a child customer and make API call on their behalf.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/ecp/v1/applications/{applicationID}/instances": {
      "parameters": [
        {
          "name": "applicationID",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "ID of an ECP application"
        }
      ],
      "get": {
        "summary": "Query instances list for an application",
        "tags": [
          "Applications"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "instances": {
                      "type": "array",
                      "description": "Array of pod instances",
                      "items": {
                        "type": "object",
                        "properties": {
                          "ID": {
                            "type": "string",
                            "description": "ID of a pod instance"
                          },
                          "name": {
                            "type": "string",
                            "description": "Name of a pod instance"
                          },
                          "namespace": {
                            "type": "string",
                            "description": "Namespace that owns the pod instance"
                          },
                          "phase": {
                            "type": "string",
                            "description": "Kubernetes defined term indicating where a pod instance is in its lifecycle. For more information, please refer to https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.16/#podstatus-v1-core",
                            "enum": [
                              "Pending",
                              "Running",
                              "Failed"
                            ]
                          },
                          "pop": {
                            "type": "string",
                            "description": "Short form of an ECP PoP where the pod instance is located"
                          },
                          "ready": {
                            "type": "string",
                            "description": "Readiness of containers in a pod instance, e.g. “2/2” means 2 containers in a pod instance are both ready."
                          },
                          "restarts": {
                            "type": "integer",
                            "description": "Count of restarts of containers in a pod instance"
                          },
                          "age": {
                            "type": "string",
                            "description": "Elapse of time since creation of a pod instance"
                          }
                        }
                      }
                    },
                    "totalCount": {
                      "title": "",
                      "type": "integer",
                      "description": "Total number of resources"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "instances": [
                        {
                          "ID": "43800104-0f98-11ea-8c9f-3417ebe72177",
                          "age": "44d",
                          "name": "myapp1-0",
                          "namespace": "demo",
                          "phase": "Running",
                          "pop": "waw",
                          "ready": "1/1",
                          "restarts": 0
                        },
                        {
                          "ID": "6d28dd2d-8u6a-11ea-baa4-f04da27334b5",
                          "age": "43d",
                          "name": "myapp1-0",
                          "namespace": "demo",
                          "phase": "Running",
                          "pop": "iad",
                          "ready": "1/1",
                          "restarts": 0
                        }
                      ],
                      "totalCount": 2
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "InvalidListOffset",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "InvalidListOffset"
                        },
                        "message": {
                          "type": "string",
                          "description": "The value of offset must be a valid non-negative integer."
                        }
                      }
                    },
                    {
                      "title": "InvalidListLimit",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "InvalidListLimit"
                        },
                        "message": {
                          "type": "string",
                          "description": "The value of limit must be a valid integer between 0 and 200, both inclusive. Set limit to 0 to retrieve a complete list."
                        }
                      }
                    },
                    {
                      "title": "InvalidPhase",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "InvalidPhase"
                        },
                        "message": {
                          "type": "string",
                          "description": "The phase given is invalid. The value should be one of “Pending”, “Running”, and “Failed”."
                        }
                      }
                    },
                    {
                      "title": "PoPNotExist",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "PoPNotExist"
                        },
                        "message": {
                          "type": "string",
                          "description": "The PoP given is invalid or does not exist."
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "InvalidListOffset",
                      "message": "The value of offset must be a valid non-negative integer."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ApplicationNotFound",
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "ApplicationNotFound"
                    },
                    "message": {
                      "type": "string",
                      "description": "The application ID given does not exist."
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "ApplicationNotFound",
                      "message": "The application ID given does not exist."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "operationId": "get-application-instances",
        "description": "Get the list of pod instances for an ECP application.\n\nNote that the list of pod instances returned might not be real-time, as cached data is used.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "enum": [
                "Pending",
                "Running",
                "Failed"
              ]
            },
            "in": "query",
            "name": "phase",
            "description": "Kubernetes defined term indicating where a pod instance is in its lifecycle. For more information, please refer to https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.16/#podstatus-v1-core"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "pop",
            "description": "Short form of an ECP PoP"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates the first resource to return. The first has an offset of 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": "0"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of resources to return. To retrieve a complete list of resources, please pass this parameter with value “0”.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": "100",
              "maximum": 200,
              "minimum": 0
            }
          },
          {
            "name": "On-Behalf-Of",
            "in": "header",
            "description": "If you are a reseller, you can use this header to specify the ID of a child customer and make API call on their behalf.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/ecp/v1/applications/{applicationID}/instances/{instanceID}": {
      "parameters": [
        {
          "type": "string",
          "name": "instanceID",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "ID of a pod instance"
        },
        {
          "name": "applicationID",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "ID of an ECP application"
        }
      ],
      "get": {
        "summary": "Query a pod instance",
        "tags": [
          "Applications"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ID": {
                      "type": "string",
                      "description": "ID of a pod instance"
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of a pod instance"
                    },
                    "namespace": {
                      "type": "string",
                      "description": "Namespace that owns the pod instance"
                    },
                    "phase": {
                      "type": "string",
                      "description": "Kubernetes defined term indicating where a pod instance is in its lifecycle. For more information, please refer to https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.16/#podstatus-v1-core",
                      "enum": [
                        "Pending",
                        "Running",
                        "Failed"
                      ]
                    },
                    "pop": {
                      "type": "string",
                      "description": "Short form of an ECP PoP where the pod instance is located"
                    },
                    "restarts": {
                      "type": "integer",
                      "description": "Count of restarts of containers in a pod instance"
                    },
                    "age": {
                      "type": "string",
                      "description": "Elapse of time since creation of a pod instance"
                    },
                    "ready": {
                      "type": "string",
                      "description": "Readiness of containers in a pod instance, e.g. “2/2” means 2 containers in a pod instance are both ready."
                    },
                    "creationTime": {
                      "type": "string",
                      "description": "Date-time when the pod instance is created",
                      "format": "date-time"
                    },
                    "publicIPv4": {
                      "title": "",
                      "type": "string",
                      "description": "Public IPv4 address assigned to a pod instance"
                    },
                    "publicIPv6": {
                      "title": "",
                      "type": "string",
                      "description": "Public IPv6 address assigned to a pod instance"
                    },
                    "podIP": {
                      "title": "",
                      "type": "string",
                      "description": "Private IPv4 address assigned to a pod instance"
                    },
                    "conditions": {
                      "title": "",
                      "type": "array",
                      "description": "Array of pod conditions describing the current service state of a pod. For more information, please refer to https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.16/#podcondition-v1-core",
                      "items": {
                        "type": "object",
                        "properties": {
                          "lastProbeTime": {
                            "type": "string",
                            "description": "Timestamp when the Pod condition was last probed",
                            "format": "date-time"
                          },
                          "lastTransitionTime": {
                            "type": "string",
                            "description": "Timestamp when the Pod last transitioned from one status to another",
                            "format": "date-time"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message indicating details about the transition"
                          },
                          "reason": {
                            "type": "string",
                            "description": "A unique, one-word, CamelCase reason for the condition’s last transition"
                          },
                          "status": {
                            "type": "string",
                            "description": "Status of the condition",
                            "enum": [
                              "True",
                              "False",
                              "Unknown"
                            ]
                          },
                          "type": {
                            "type": "string",
                            "description": "Type of the condition",
                            "enum": [
                              "PodScheduled",
                              "Ready",
                              "Initialized",
                              "Unschedulable",
                              "ContainersReady"
                            ]
                          }
                        }
                      }
                    },
                    "containers": {
                      "title": "",
                      "type": "array",
                      "description": "Array of containers in a pod instance",
                      "items": {
                        "type": "object",
                        "properties": {
                          "containerID": {
                            "type": "string",
                            "description": "Container's ID in the format 'docker://<container_id>'"
                          },
                          "name": {
                            "type": "string",
                            "description": "Container name"
                          },
                          "image": {
                            "type": "string",
                            "description": "The image the container is running"
                          },
                          "imageID": {
                            "type": "string",
                            "description": "ImageID of the container's image"
                          },
                          "lastState": {
                            "type": "object",
                            "description": "Details about the container's last termination condition"
                          },
                          "ready": {
                            "description": "Specifies whether the container has passed its readiness probe",
                            "type": "boolean"
                          },
                          "restartCount": {
                            "description": "The number of times the container has been restarted",
                            "type": "integer"
                          },
                          "state": {
                            "type": "object",
                            "description": "Details about the container's current condition"
                          }
                        }
                      }
                    },
                    "events": {
                      "title": "",
                      "type": "array",
                      "description": "Array of events related to the pod instance. Note that an event will be removed in 3 hours after last occurence. For more information, please refer to https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.16/#event-v1-core",
                      "items": {
                        "type": "object",
                        "properties": {
                          "firstTimestamp": {
                            "type": "string",
                            "description": "The time at which the event was first recorded",
                            "format": "date-time"
                          },
                          "lastTimestamp": {
                            "type": "string",
                            "description": "The time at which the most recent occurrence of this event was recorded",
                            "format": "date-time"
                          },
                          "count": {
                            "type": "integer",
                            "description": "The number of times this event has occurred"
                          },
                          "involvedObject": {
                            "type": "object",
                            "description": "The object that this event is about"
                          },
                          "reason": {
                            "type": "string",
                            "description": "A short string that gives the reason for the transition into the object's current status"
                          },
                          "message": {
                            "type": "string",
                            "description": "A human-readable description of the status of this operation"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "ID": "a7939895-3290-11ea-a2f0-f04da272e870",
                      "age": "16s",
                      "conditions": [
                        {
                          "lastTransitionTime": "2020-01-09T03:32:25Z",
                          "status": "True",
                          "type": "Initialized"
                        },
                        {
                          "lastTransitionTime": "2020-01-09T03:32:29Z",
                          "status": "True",
                          "type": "Ready"
                        },
                        {
                          "lastTransitionTime": "2020-01-09T03:32:25Z",
                          "status": "True",
                          "type": "PodScheduled"
                        }
                      ],
                      "containers": [
                        {
                          "containerID": "docker://2652cdfe329b6ff0a9cf8f13b746927b18ce258a1df8bfad2245ef6976137f9d",
                          "image": "registry-qcc.quantil.com/demo/webserver:1.0.6",
                          "imageID": "docker-pullable://registry-qcc.quantil.com/demo/webserver@sha256:0b32618ffba401ad89525fad3d3ec658dd6c3070bb818ec730628c949b0a8965",
                          "lastState": {},
                          "name": "webservers-robot",
                          "ready": true,
                          "restartCount": 0,
                          "state": {
                            "running": {
                              "startedAt": "2020-01-09T03:32:28Z"
                            }
                          }
                        }
                      ],
                      "creationTime": "2020-01-09T03:32:25Z",
                      "events": [
                        {
                          "count": 1,
                          "firstTimestamp": "2020-01-09T03:23:45Z",
                          "involvedObject": {
                            "apiVersion": "v1",
                            "kind": "Pod",
                            "name": "app-robot20200109032328-0",
                            "namespace": "robot",
                            "resourceVersion": "73090529",
                            "uid": "719926aa-328f-11ea-a2f0-f04da272e870"
                          },
                          "lastTimestamp": "2020-01-09T03:23:45Z",
                          "message": "Successfully assigned app-robot20200109032328-0 to mil4",
                          "reason": "Scheduled"
                        },
                        {
                          "count": 1,
                          "firstTimestamp": "2020-01-09T03:23:45Z",
                          "involvedObject": {
                            "apiVersion": "v1",
                            "kind": "Pod",
                            "name": "app-robot20200109032328-0",
                            "namespace": "robot",
                            "resourceVersion": "73090535",
                            "uid": "719926aa-328f-11ea-a2f0-f04da272e870"
                          },
                          "lastTimestamp": "2020-01-09T03:23:45Z",
                          "message": "MountVolume.SetUp succeeded for volume \"default-token-zf44t\" ",
                          "reason": "SuccessfulMountVolume"
                        },
                        {
                          "count": 1,
                          "firstTimestamp": "2020-01-09T03:23:49Z",
                          "involvedObject": {
                            "apiVersion": "v1",
                            "fieldPath": "spec.containers{webservers-robot}",
                            "kind": "Pod",
                            "name": "app-robot20200109032328-0",
                            "namespace": "robot",
                            "resourceVersion": "73090535",
                            "uid": "719926aa-328f-11ea-a2f0-f04da272e870"
                          },
                          "lastTimestamp": "2020-01-09T03:23:49Z",
                          "message": "Container image \"registry-qcc.quantil.com/xiemn/centos7-base-pod-webserver:1.0.6\" already present on machine",
                          "reason": "Pulled"
                        },
                        {
                          "count": 1,
                          "firstTimestamp": "2020-01-09T03:23:49Z",
                          "involvedObject": {
                            "apiVersion": "v1",
                            "fieldPath": "spec.containers{webservers-robot}",
                            "kind": "Pod",
                            "name": "app-robot20200109032328-0",
                            "namespace": "robot",
                            "resourceVersion": "73090535",
                            "uid": "719926aa-328f-11ea-a2f0-f04da272e870"
                          },
                          "lastTimestamp": "2020-01-09T03:23:49Z",
                          "message": "Created container",
                          "reason": "Created"
                        },
                        {
                          "count": 1,
                          "firstTimestamp": "2020-01-09T03:23:50Z",
                          "involvedObject": {
                            "apiVersion": "v1",
                            "fieldPath": "spec.containers{webservers-robot}",
                            "kind": "Pod",
                            "name": "app-robot20200109032328-0",
                            "namespace": "robot",
                            "resourceVersion": "73090535",
                            "uid": "719926aa-328f-11ea-a2f0-f04da272e870"
                          },
                          "lastTimestamp": "2020-01-09T03:23:50Z",
                          "message": "Started container",
                          "reason": "Started"
                        }
                      ],
                      "name": "app-robot20200109032328-0",
                      "namespace": "demo",
                      "phase": "Running",
                      "podIP": "10.1.0.143",
                      "pop": "mxp",
                      "publicIPv4": "163.170.245.37",
                      "ready": "1/1",
                      "restarts": 0
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "ApplicationNotFound",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "ApplicationNotFound"
                        },
                        "message": {
                          "type": "string",
                          "description": "The application ID given does not exist."
                        }
                      }
                    },
                    {
                      "title": "InstanceNotFound",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "InstanceNotFound"
                        },
                        "message": {
                          "type": "string",
                          "description": "The instance specified does not exist, or is not an instance of the given application."
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "ApplicationNotFound",
                      "message": "The application ID given does not exist."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "operationId": "get-instance-by-ID",
        "description": "Get the details of a pod instance created for an ECP application",
        "parameters": [
          {
            "name": "On-Behalf-Of",
            "in": "header",
            "description": "If you are a reseller, you can use this header to specify the ID of a child customer and make API call on their behalf.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/ecp/v1/metrics/{metric}/servicezones/{servicezone}": {
      "parameters": [
        {
          "name": "metric",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "enum": [
              "inboundTraffic",
              "inboundBandwidth",
              "outboundTraffic",
              "outboundBandwidth",
              "totalTraffic",
              "totalBandwidth",
              "podCount",
              "vcpu",
              "mem",
              "local-ssd",
              "persist-ssd",
              "ipCount"
            ]
          },
          "description": "Usage metric on compute, storage and network resources.\n\nMetric | Description | Measured in\n--- | --- | --- \ninboundTraffic | amount of data transmitted to ECP during a time period | byte\ninboundBandwidth | rate of data transfer to ECP during a time period | bps\noutboundTraffic | amount of data transmitted from ECP during a time period | byte\noutboundBandwidth | rate of data transfer from ECP during a time period | bps\ntotalTraffic | amount of data transmitted to and from ECP during a time period | byte\ntotalBandwidth | rate of data transfer to and from ECP during a time period | bps\nvcpu | amount of CPU cores allocated and available during a time period | core\nmem | amount of memory allocated and available during a time peirod | byte\nlocal-ssd | amount of local storage capacity allocated and available during a time period | byte\npersist-ssd | amount of remote storage capacity allocated and available during a time period | byte\npodCount | number of kubernetes pods existing and maintained for your application(s) during a time period | ea\nipCount | number of public IPv4 addresses allocated and available during a time period | ea\n"
        },
        {
          "schema": {
            "type": "string",
            "enum": [
              "business",
              "standard",
              "premium"
            ]
          },
          "name": "servicezone",
          "description": "Code of an ECP service zone",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get resources usage in a service zone",
        "tags": [
          "Reports"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "properties": {
                    "data": {
                      "type": "array",
                      "description": "array of time serialized metric values",
                      "items": {
                        "type": "object",
                        "properties": {
                          "timestamp": {
                            "type": "string",
                            "description": "timestamp"
                          },
                          "value": {
                            "type": "number",
                            "description": "metric value"
                          }
                        }
                      }
                    }
                  },
                  "type": "object"
                },
                "examples": {
                  "traffic report at 5 minute interval": {
                    "value": {
                      "data": [
                        {
                          "timestamp": "2019-10-02T15:00:00Z",
                          "value": 216326
                        },
                        {
                          "timestamp": "2019-10-02T15:05:00Z",
                          "value": 214326
                        },
                        {
                          "timestamp": "2019-10-02T15:10:00Z",
                          "value": 216226
                        },
                        {
                          "timestamp": "2019-10-02T15:15:00Z",
                          "value": 212126
                        },
                        {
                          "timestamp": "2019-10-02T15:20:00Z",
                          "value": 215326
                        }
                      ]
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "InvalidDateFormat",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "InvalidDateFormat"
                        },
                        "message": {
                          "type": "string",
                          "description": "Invalid parameter {startTime / endTime}. {startTime/endTime} is not a valid RFC3339 timestamp. The timestamp should be in \"yyyy-MM-dd'T'HH:mm:ss'Z'\" format."
                        }
                      }
                    },
                    {
                      "title": "InvalidRange",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "InvalidRange"
                        },
                        "message": {
                          "type": "string",
                          "description": "One of: \"The max time span of {interval} report must be no more than {xxx days}.\" \"The parameter 'startTime' cannot be a time in the future.\" \"The parameter 'endTime' should be after 'startTime'.\""
                        }
                      }
                    },
                    {
                      "title": "InvalidInterval",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "InvalidInterval"
                        },
                        "message": {
                          "type": "string",
                          "description": "The interval requested is invalid."
                        }
                      }
                    },
                    {
                      "title": "InvalidReportRange",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "InvalidReportRange"
                        },
                        "message": {
                          "type": "string",
                          "description": "A valid report range shall be “self-only”, “children-only”, or “self+children”."
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "InvalidDateFormat",
                      "message": "The format of startTime or endTime is invalid."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "InvalidMetric",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "InvalidMetric"
                        },
                        "message": {
                          "type": "string",
                          "description": "The metric given is invalid."
                        }
                      }
                    },
                    {
                      "title": "ServiceZoneNotExist",
                      "type": "object",
                      "properties": {
                        "error": {
                          "type": "string",
                          "description": "ServiceZoneNotExist"
                        },
                        "message": {
                          "type": "string",
                          "description": "The serviceZone given is invalid or does not exist."
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "InvalidMetric",
                      "message": "The metric given is invalid."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "operationId": "get-reports-for-a-service-zone",
        "description": "Get reports on resources usage in a specific service zone",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "default": "self-only",
              "enum": [
                "self-only",
                "children-only",
                "self+children"
              ]
            },
            "name": "Report-Range",
            "description": "An optional header that resellers can use to specify whether to include data from children customers.",
            "in": "header"
          },
          {
            "in": "query",
            "name": "startTime",
            "description": "RFC 3339 date indicating the beginning of a time period. Example: <code>startTime=2019-10-30T00:00:00Z</code>. Your startTime may be rounded down to the nearest minute, hour, or day depending on the interval parameter. For example, if you enter <code>startTime=2019-09-05T03:14:01Z&interval=hourly</code>, the response includes data beginning at 2019-09-05T03:00:00Z.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "endTime",
            "description": "RFC 3339 date indicating the end of a time period. Example: <code>endTime=2019-11-14T00:00:00Z</code> Your endTime may be rounded up to the nearest minute, hour, or day depending on the interval parameter. For example, if you enter <code>endTime=2019-09-05T03:14:01Z&interval=hourly</code>, the response includes data ending at 2019-09-05T04:00:00Z.",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "oneminute",
                "fiveminutes",
                "hourly",
                "daily",
                "monthly"
              ]
            },
            "name": "interval",
            "required": true,
            "description": "The granularity of returned data. Raw report data is generated per 1 minute. The data is aggregated to give reports of different granularities. The aggregation method is “sum” for the metrics \"inboundTraffic\", \"outboundTraffic\" and \"totalTraffic\". For all other metrics, the aggregation method is \"average\". \n\n\"oneminute\" interval is supported only when the timespan is not longer than 7 days. \"fiveminutes\" interval is supported only when the timespan is not longer than 31 days.",
            "in": "query"
          },
          {
            "name": "On-Behalf-Of",
            "in": "header",
            "description": "If you are a reseller, you can use this header to specify the ID of a child customer and make API call on their behalf.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/ecp/v1/registry/projects": {
      "get": {
        "summary": "Query list of registry projects",
        "tags": [
          "Registry Projects"
        ],
        "responses": {
          "200": {
            "description": "The response contains a list of registry projects.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "projects": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "projectID": {
                            "title": "",
                            "type": "integer",
                            "description": "ID of a registry project"
                          },
                          "name": {
                            "title": "",
                            "type": "string",
                            "description": "Name of a registry project. Must be unique globally. Allows lower case alphanumeric characters, ‘-’, ‘_’ and ‘.’ only, must start and end with an alphanumeric character, and must be not more than 128 characters."
                          },
                          "createdBy": {
                            "title": "",
                            "type": "string",
                            "description": "Name of apiAccount or contact who created the registry project"
                          },
                          "creationTime": {
                            "title": "",
                            "format": "date-time",
                            "type": "string",
                            "description": "Datetime when the resource is created"
                          },
                          "lastUpdateTime": {
                            "type": "string",
                            "title": "",
                            "format": "date-time",
                            "description": "Datetime when the resource is last updated"
                          },
                          "accessLevel": {
                            "title": "",
                            "type": "string",
                            "description": "How a registry project is accessible to registry users"
                          }
                        }
                      }
                    },
                    "totalCount": {
                      "title": "",
                      "type": "integer",
                      "description": "Total number of resources"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "projects": [
                        {
                          "projectID": 123456,
                          "name": "demoproject",
                          "createdBy": "demouser",
                          "creationTime": "2020-10-02T15:00:00Z",
                          "lastUpdateTime": "2020-11-02T15:00:00Z",
                          "accessLevel": "private"
                        },
                        {
                          "projectID": 456789,
                          "name": "demoproject1",
                          "createdBy": "demouser",
                          "creationTime": "2020-11-02T15:00:00Z",
                          "lastUpdateTime": "2020-12-02T15:00:00Z",
                          "accessLevel": "private"
                        }
                      ],
                      "totalCount": 2
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Refer to the response body for details.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "InvalidListOffset": {
                    "value": {
                      "error": "InvalidListOffset",
                      "message": "The value of offset must be a valid non-negative integer."
                    }
                  },
                  "InvalidListLimit": {
                    "value": {
                      "error": "InvalidListLimit",
                      "message": "The value of limit must be a valid integer between 1 and 200, both inclusive."
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-registry-projects",
        "description": "Get a list of registry projects. You can specify a search parameter, offset and limit to filter your results.",
        "parameters": [
          {
            "name": "On-Behalf-Of",
            "in": "header",
            "description": "If you are a reseller, you can use this header to specify the ID of a child customer and make API call on their behalf.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchString",
            "in": "query",
            "description": "Keyword to search for particular resources. The value is matched against the \"name\" field of each resource.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "createdBy",
            "description": "Filter projects by the name of apiAccount or contact who creates projects."
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates the first resource to return. The first has an offset of 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": "0"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of resources to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": "100",
              "maximum": 200,
              "minimum": 1
            }
          }
        ]
      },
      "post": {
        "summary": "Create a registry project",
        "operationId": "post-registry-projects",
        "responses": {
          "201": {
            "description": "This response indicates the registry project is successfully created",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "in": "header",
                "name": "Location",
                "description": "Location of the newly created resource.",
                "required": false
              },
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Refer to response body for details",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "RequiredFieldMissing": {
                    "value": {
                      "error": "RequiredFieldMissing",
                      "message": "The field {field} is required."
                    }
                  },
                  "InvalidProjectName": {
                    "value": {
                      "error": "InvalidProjectName",
                      "message": "Invalid project name. A valid project name must consist of lower case alphanumeric characters, ‘-’, ‘_’ and ‘.’ only, must start and end with an alphanumeric character, and must be not more than 128 characters."
                    }
                  },
                  "InvalidVulnerabilitySeverity": {
                    "value": {
                      "error": "InvalidVulnerabilitySeverity",
                      "message": "The vulnerability severity {severity} specified is invalid. Must be one of “negligible”, “low”, “medium”, and “high”."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "This error is returned if the API call is not permitted. Refer to response body for details",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "NotAuthorized",
                      "message": "Only the admin API account is allowed to perform this operation."
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "This error is returned if you try to create a registry project that already exists",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "ProjectNameExists",
                      "message": "The project name is already taken."
                    }
                  }
                }
              }
            }
          }
        },
        "description": "This interface enables you to create a registry project. Note that only your \"admin\" apiAccount is allowed to make this call. Also note that all projects created are privately accessible only (i.e. authentication is always required when pushing/pulling images). Creating projects of public access level is not allowed.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "title": "",
                    "type": "string",
                    "description": "Name of a registry project. Must be unique globally. Allows lower case alphanumeric characters, ‘-’, ‘_’ and ‘.’ only, must start and end with an alphanumeric character, and must be not more than 128 characters."
                  },
                  "preventVulnerable": {
                    "title": "",
                    "type": "boolean",
                    "description": "Whether to prevent vulnerable images from running. Default to false."
                  },
                  "severity": {
                    "type": "string",
                    "title": "",
                    "description": "If \"preventVulnerable\" is enabled and the vulnerability of an image is equal to or higher than severity defined here, the image can't be pulled.",
                    "default": "low",
                    "enum": [
                      "negligible",
                      "low",
                      "medium",
                      "high"
                    ]
                  },
                  "autoScan": {
                    "title": "",
                    "type": "boolean",
                    "description": "Whether to scan images automatically when images are pushed to registry. Default to false."
                  }
                },
                "required": [
                  "name"
                ]
              },
              "examples": {
                "example-1": {
                  "value": {
                    "name": "demoproject",
                    "preventVulnerable": true,
                    "severity": "medium",
                    "autoScan": true
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Registry Projects"
        ]
      }
    },
    "/ecp/v1/registry/projects/{projectID}": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "projectID",
          "in": "path",
          "required": true,
          "description": "ID of a registry project"
        }
      ],
      "get": {
        "summary": "Query a registry project",
        "tags": [
          "Registry Projects"
        ],
        "responses": {
          "200": {
            "description": "The response contains details of the registry project.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "projectID": {
                      "title": "",
                      "type": "integer",
                      "description": "ID of a registry project"
                    },
                    "name": {
                      "title": "",
                      "type": "string",
                      "description": "Name of a registry project. Must be unique globally. Allows lower case alphanumeric characters, ‘-’, ‘_’ and ‘.’ only, must start and end with an alphanumeric character, and must be not more than 128 characters."
                    },
                    "createdBy": {
                      "title": "",
                      "type": "string",
                      "description": "Name of apiAccount or contact who created the registry project"
                    },
                    "creationTime": {
                      "type": "string",
                      "description": "Date-time when the pod instance is created",
                      "format": "date-time"
                    },
                    "lastUpdateTime": {
                      "type": "string",
                      "title": "",
                      "format": "date-time",
                      "description": "Datetime when the resource is last updated"
                    },
                    "accessLevel": {
                      "title": "",
                      "type": "string",
                      "description": "How a registry project is accessible to registry users"
                    },
                    "repoCount": {
                      "title": "",
                      "type": "integer",
                      "description": "Number of repositories under a registry project"
                    },
                    "configs": {
                      "type": "object",
                      "properties": {
                        "preventVulnerable": {
                          "title": "",
                          "type": "boolean",
                          "description": "Whether to prevent vulnerable images from running. Default to false."
                        },
                        "severity": {
                          "type": "string",
                          "title": "",
                          "description": "If \"preventVulnerable\" is enabled and the vulnerability of an image is equal to or higher than severity defined here, the image can't be pulled.",
                          "default": "low",
                          "enum": [
                            "negligible",
                            "low",
                            "medium",
                            "high"
                          ]
                        },
                        "autoScan": {
                          "title": "",
                          "type": "boolean",
                          "description": "Whether to scan images automatically when images are pushed to registry. Default to false."
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "projectID": 123456,
                      "name": "demoproject",
                      "createdBy": "demouser",
                      "creationTime": "2020-10-02T15:00:00Z",
                      "lastUpdateTime": "2020-10-05T15:00:00Z",
                      "accessLevel": "private",
                      "repoCount": 3,
                      "configs": {
                        "preventVulnerable": true,
                        "severity": "medium",
                        "autoScan": true
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "ProjectNotFound",
                      "message": "The project ID given does not exist."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "operationId": "get-registry-project-by-ID",
        "description": "Get the details of a registry project.",
        "parameters": [
          {
            "name": "On-Behalf-Of",
            "in": "header",
            "description": "If you are a reseller, you can use this header to specify the ID of a child customer and make API call on their behalf.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "patch": {
        "summary": "Update a registry project",
        "operationId": "patch-registry-project-by-ID",
        "responses": {
          "200": {
            "description": "This response indicates the project is successfully updated.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "projectID": {
                      "title": "",
                      "type": "integer",
                      "description": "ID of a registry project"
                    },
                    "name": {
                      "title": "",
                      "type": "string",
                      "description": "Name of a registry project. Must be unique globally. Allows lower case alphanumeric characters, ‘-’, ‘_’ and ‘.’ only, must start and end with an alphanumeric character, and must be not more than 128 characters."
                    },
                    "createdBy": {
                      "title": "",
                      "type": "string",
                      "description": "Name of apiAccount or contact who created the registry project"
                    },
                    "creationTime": {
                      "type": "string",
                      "description": "Date-time when the pod instance is created",
                      "format": "date-time"
                    },
                    "lastUpdateTime": {
                      "type": "string",
                      "title": "",
                      "format": "date-time",
                      "description": "Datetime when the resource is last updated"
                    },
                    "accessLevel": {
                      "title": "",
                      "type": "string",
                      "description": "How a registry project is accessible to registry users"
                    },
                    "repoCount": {
                      "title": "",
                      "type": "integer",
                      "description": "Number of repositories under a registry project"
                    },
                    "configs": {
                      "type": "object",
                      "description": "Security settings of a registry project",
                      "properties": {
                        "preventVulnerable": {
                          "title": "",
                          "type": "boolean",
                          "description": "Whether to prevent vulnerable images from running. Default to false."
                        },
                        "severity": {
                          "type": "string",
                          "title": "",
                          "description": "If \"preventVulnerable\" is enabled and the vulnerability of an image is equal to or higher than severity defined here, the image can't be pulled.",
                          "default": "low",
                          "enum": [
                            "negligible",
                            "low",
                            "medium",
                            "high"
                          ]
                        },
                        "autoScan": {
                          "title": "",
                          "type": "boolean",
                          "description": "Whether to scan images automatically when images are pushed to registry. Default to false."
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "projectID": 123456,
                      "name": "demoproject",
                      "createdBy": "demouser",
                      "creationTime": "2020-10-02T15:00:00Z",
                      "lastUpdateTime": "2020-10-05T15:00:00Z",
                      "accessLevel": "private",
                      "repoCount": 3,
                      "configs": {
                        "preventVulnerable": true,
                        "severity": "medium",
                        "autoScan": true
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Refer to response body for details.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "InvalidVulnerabilitySeverity": {
                    "value": {
                      "error": "InvalidVulnerabilitySeverity",
                      "message": "The vulnerability severity {severity} specified is invalid. Must be one of “negligible”, “low”, “medium”, and “high”."
                    }
                  },
                  "UpdateProjectNameNotAllowed": {
                    "value": {
                      "error": "UpdateProjectNameNotAllowed",
                      "message": "The project name cannot be updated."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "This error is returned if the API call is not permitted. Refer to response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "NotAuthorized",
                      "message": "Only the admin API account is allowed to perform this operation."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "ProjectNotFound",
                      "message": "The project ID given does not exist."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "description": "Update an existing registry project. Note that only your \"admin\" apiAccount is allowed to make this call.",
        "tags": [
          "Registry Projects"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "preventVulnerable": {
                    "title": "",
                    "type": "boolean",
                    "description": "Whether to prevent vulnerable images from running. Default to false."
                  },
                  "severity": {
                    "type": "string",
                    "title": "",
                    "description": "If \"preventVulnerable\" is enabled and the vulnerability of an image is equal to or higher than severity defined here, the image can't be pulled.",
                    "default": "low",
                    "enum": [
                      "negligible",
                      "low",
                      "medium",
                      "high"
                    ]
                  },
                  "autoScan": {
                    "title": "",
                    "type": "boolean",
                    "description": "Whether to scan images automatically when images are pushed to registry. Default to false."
                  }
                }
              },
              "examples": {
                "example-1": {
                  "value": {
                    "preventVulnerable": true,
                    "severity": "high"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a registry project",
        "operationId": "delete-registry-project-by-ID",
        "responses": {
          "204": {
            "description": "This response is returned if the project is successfully deleted.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "This error is returned if the API call is not permitted. Refer to response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "NotAuthorized",
                      "message": "Only the admin API account is allowed to perform this operation."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "ProjectNotFound",
                      "message": "The project ID given does not exist."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "description": "Delete an existing registry project. Note that only your \"admin\" apiAccount is allowed to make this call. Also note that a registry project which still has repositories cannot be deleted.",
        "tags": [
          "Registry Projects"
        ]
      }
    },
    "/ecp/v1/registry/projects/{projectID}/logs": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "projectID",
          "in": "path",
          "required": true,
          "description": "ID of a registry project"
        }
      ],
      "get": {
        "summary": "Retrieve access logs",
        "tags": [
          "Registry Projects"
        ],
        "responses": {
          "200": {
            "description": "The response contains a list of access logs.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "logs": {
                      "type": "array",
                      "description": "Array of access logs",
                      "items": {
                        "type": "object",
                        "properties": {
                          "logID": {
                            "type": "string",
                            "description": "ID of a log entry"
                          },
                          "username": {
                            "type": "string",
                            "description": "Name of user who performs the operation. \n\nNote that an operation against the registry might be executed via API, customer portal, or docker CLI. If the username returned here is “admin”, it means the operation is performed by either an admin API account or a portal contact (“admin” doesn’t represent any registry user). Otherwise, it means the operation is performed by a registry user via docker CLI."
                          },
                          "repo": {
                            "type": "string",
                            "description": "Name of repository affected by the operation"
                          },
                          "tag": {
                            "type": "string",
                            "description": "Tag affected by the operation"
                          },
                          "operation": {
                            "type": "string",
                            "description": "Type of operation",
                            "enum": [
                              "push",
                              "pull",
                              "create",
                              "delete"
                            ]
                          },
                          "timestamp": {
                            "type": "string",
                            "description": "Time when the operation is triggered, in RFC 3339 format.",
                            "format": "date-time"
                          }
                        }
                      }
                    },
                    "totalCount": {
                      "type": "integer",
                      "description": "Total number of log entries"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "logs": [
                        {
                          "logID": "2",
                          "username": "repouser1",
                          "repo": "testproj1/nginx",
                          "tag": "v1",
                          "operation": "push",
                          "timestamp": "2020-10-14T07:52:56Z"
                        },
                        {
                          "logID": "1",
                          "username": "admin",
                          "repo": "testproj1/",
                          "tag": "N/A",
                          "operation": "create",
                          "timestamp": "2020-10-14T07:38:31Z"
                        }
                      ],
                      "totalCount": 2
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Refer to response body for details.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "InvalidListOffset": {
                    "value": {
                      "error": "InvalidListOffset",
                      "message": "The value of offset must be a valid non-negative integral multiple of the limit parameter."
                    }
                  },
                  "InvalidListLimit": {
                    "value": {
                      "error": "InvalidListLimit",
                      "message": "The value of limit must be a valid integer between 1 and 100, both inclusive."
                    }
                  },
                  "InvalidDateFormat": {
                    "value": {
                      "error": "InvalidDateFormat",
                      "message": "Invalid parameter {startTime / endTime}. {startTime/endTime} is not a valid RFC3339 timestamp. The timestamp should be in yyyy-MM-dd T HH:mm:ss Z format."
                    }
                  },
                  "InvalidRange": {
                    "value": {
                      "error": "InvalidRange",
                      "message": "The max time span must be no more than 366 days."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "ProjectNotFound",
                      "message": "The project ID given does not exist."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "operationId": "get-registry-project-logs",
        "description": "Retrieve access logs for a registry project.",
        "parameters": [
          {
            "name": "On-Behalf-Of",
            "in": "header",
            "description": "If you are a reseller, you can use this header to specify the ID of a child customer and make API call on their behalf.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "username",
            "description": "Username of a registry user. Use this parameter to filter access logs related to a specific registry user."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "repository",
            "description": "Name of a repository. Use this parameter to filter access logs related to a specific repository."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "tag",
            "description": "Name of an image tag under a repository. Use this parameter to filter access logs related to a specific tag."
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "push",
                "pull",
                "delete",
                "create"
              ]
            },
            "in": "query",
            "name": "operation",
            "description": "Type of operation."
          },
          {
            "in": "query",
            "name": "startTime",
            "description": "RFC 3339 datetime indicating the start of a time period. Example: startTime=2020-10-20T00:00:00Z."
          },
          {
            "in": "query",
            "name": "endTime",
            "description": "RFC 3339 datetime indicating the end of a time period. Example: endTime=2020-10-30T00:00:00Z."
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            },
            "description": "Indicates the first resource to return. The first has an offset of 0. The value must be a valid non-negative integral multiple of the limit parameter."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 0,
              "maximum": 100
            },
            "description": "Indicates the maximum nuber of resources to return."
          }
        ]
      }
    },
    "/ecp/v1/registry/projects/{projectID}/repositories": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "projectID",
          "in": "path",
          "required": true,
          "description": "ID of a registry project"
        }
      ],
      "get": {
        "summary": "Query list of repositories under a registry project",
        "tags": [
          "Registry Projects"
        ],
        "responses": {
          "200": {
            "description": "The response contains a list of image repositories.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "repositories": {
                      "type": "array",
                      "description": "Array of image repositories",
                      "items": {
                        "type": "object",
                        "properties": {
                          "repositoryID": {
                            "title": "",
                            "type": "integer",
                            "description": "ID of an image repository"
                          },
                          "name": {
                            "title": "",
                            "type": "string",
                            "description": "Name of an image repository"
                          },
                          "projectID": {
                            "type": "integer",
                            "description": "ID of the registry project that the image repository is affiliated to"
                          },
                          "description": {
                            "title": "",
                            "type": "string",
                            "description": "Arbitrary text describing an image repository"
                          },
                          "pullCount": {
                            "title": "",
                            "type": "integer",
                            "description": "The number of image pulls from an image repository"
                          },
                          "tagsCount": {
                            "title": "",
                            "type": "integer",
                            "description": "The number of tags in an image repository"
                          },
                          "creationTime": {
                            "title": "",
                            "format": "date-time",
                            "type": "string",
                            "description": "Datetime when the resource is created"
                          },
                          "lastUpdateTime": {
                            "type": "string",
                            "title": "",
                            "format": "date-time",
                            "description": "Datetime when the resource is last updated"
                          }
                        }
                      }
                    },
                    "totalCount": {
                      "title": "",
                      "type": "integer",
                      "description": "Total number of resources"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "repositories": [
                        {
                          "repositoryID": 29,
                          "name": "testproj1/demoapp",
                          "projectID": 3,
                          "description": "this is a demo",
                          "pullCount": 0,
                          "tagsCount": 1,
                          "creationTime": "2020-12-16T03:18:05Z",
                          "lastUpdateTime": "2020-12-16T03:18:05Z"
                        },
                        {
                          "repositoryID": 1,
                          "name": "testproj1/nginx",
                          "projectID": 3,
                          "description": "this is a demo",
                          "pullCount": 1,
                          "tagsCount": 2,
                          "creationTime": "2020-10-14T07:52:56Z",
                          "lastUpdateTime": "2020-12-23T08:36:03Z"
                        }
                      ],
                      "totalCount": 2
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Refer to response body for details.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "InvalidListLimit": {
                    "value": {
                      "error": "InvalidListLimit",
                      "message": "The value of limit must be a valid integer between 1 and 100, both inclusive."
                    }
                  },
                  "InvalidListOffset": {
                    "value": {
                      "error": "InvalidListOffset",
                      "message": "The value of offset must be a valid non-negative integral multiple of the limit parameter."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "ProjectNotFound",
                      "message": "The project ID given does not exist."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "operationId": "get-registry-project-repositories",
        "description": "A repository is a collection of related container images that usually represent different versions of the same application. Repositories are stored and managed under registry projects. \n\nTo create a new repository on ECP, tag your image and hit the command \"docker push registry-qcc.quantil.com/{project-name}/{repo-name}:{tag}\" in your docker environment. A new repository will be created automatically using the {repo-name} parameter. The image will be pushed to the ECP registry and stored under the repository.\n\nThis interface allows you to list repositories under a specific registry project.",
        "parameters": [
          {
            "name": "On-Behalf-Of",
            "in": "header",
            "description": "If you are a reseller, you can use this header to specify the ID of a child customer and make API call on their behalf.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchString",
            "in": "query",
            "description": "Keyword to search for particular resources. The value is matched against the \"name\" field of each resource.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            },
            "description": "Indicates the first resource to return. The first has an offset of 0. The value must be a valid non-negative integral multiple of the limit parameter."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 0,
              "maximum": 100
            },
            "description": "Indicates the maximum nuber of resources to return."
          }
        ]
      }
    },
    "/ecp/v1/registry/projects/{projectID}/repositories/{repository}": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "projectID",
          "in": "path",
          "required": true,
          "description": "ID of a registry project"
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "repository",
          "in": "path",
          "required": true,
          "description": "Name of a repository"
        }
      ],
      "get": {
        "summary": "Query an image repository",
        "tags": [
          "Registry Projects"
        ],
        "responses": {
          "200": {
            "description": "The response contains details of the image repository.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "repositoryID": {
                      "title": "",
                      "type": "integer",
                      "description": "ID of an image repository"
                    },
                    "name": {
                      "title": "",
                      "type": "string",
                      "description": "Name of an image repository"
                    },
                    "projectID": {
                      "description": "ID of the registry project that an image repository is affiliated to",
                      "type": "integer"
                    },
                    "description": {
                      "title": "",
                      "type": "string",
                      "description": "Arbitrary text describing an image repository"
                    },
                    "pullCount": {
                      "title": "",
                      "type": "integer",
                      "description": "The number of image pulls from an image repository"
                    },
                    "tagsCount": {
                      "title": "",
                      "type": "integer",
                      "description": "The number of tags in an image repository"
                    },
                    "creationTime": {
                      "title": "",
                      "format": "date-time",
                      "type": "string",
                      "description": "Datetime when the resource is created"
                    },
                    "lastUpdateTime": {
                      "type": "string",
                      "title": "",
                      "format": "date-time",
                      "description": "Datetime when the resource is last updated"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "repositoryID": 29,
                      "name": "testproj1/demoapp",
                      "projectID": 3,
                      "description": "this is a demo",
                      "pullCount": 1,
                      "tagsCount": 1,
                      "creationTime": "2020-12-16T03:18:05Z",
                      "lastUpdateTime": "2020-12-16T03:18:05Z"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "ProjectNotFound": {
                    "value": {
                      "error": "ProjectNotFound",
                      "message": "The project ID given does not exist."
                    }
                  },
                  "RepositoryNotFound": {
                    "value": {
                      "error": "RepositoryNotFound",
                      "message": "The repository {repository} given does not exist."
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-registry-project-repository",
        "description": "Get the details of an image repository.",
        "parameters": [
          {
            "name": "On-Behalf-Of",
            "in": "header",
            "description": "If you are a reseller, you can use this header to specify the ID of a child customer and make API call on their behalf.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "patch": {
        "summary": "Update an image repository",
        "operationId": "patch-registry-project-repository",
        "responses": {
          "200": {
            "description": "This response indicates the repository is successfully updated.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "repositoryID": {
                      "title": "",
                      "type": "integer",
                      "description": "ID of an image repository"
                    },
                    "name": {
                      "title": "",
                      "type": "string",
                      "description": "Name of an image repository"
                    },
                    "projectID": {
                      "description": "ID of the registry project that an image repository is affiliated to",
                      "type": "integer"
                    },
                    "description": {
                      "title": "",
                      "type": "string",
                      "description": "Arbitrary text describing an image repository"
                    },
                    "pullCount": {
                      "title": "",
                      "type": "integer",
                      "description": "The number of image pulls from an image repository"
                    },
                    "tagsCount": {
                      "title": "",
                      "type": "integer",
                      "description": "The number of tags in an image repository"
                    },
                    "creationTime": {
                      "title": "",
                      "format": "date-time",
                      "type": "string",
                      "description": "Datetime when the resource is created"
                    },
                    "lastUpdateTime": {
                      "type": "string",
                      "title": "",
                      "format": "date-time",
                      "description": "Datetime when the resource is last updated"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "repositoryID": 29,
                      "name": "testproj1/demoapp",
                      "projectID": 3,
                      "description": "this is a demo",
                      "pullCount": 1,
                      "tagsCount": 1,
                      "creationTime": "2020-12-16T03:18:05Z",
                      "lastUpdateTime": "2020-12-16T03:18:05Z"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "This error is returned if the API call is not permitted. Refer to response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "NotAuthorized",
                      "message": "Only the admin API account is allowed to perform this operation."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "ProjectNotFound": {
                    "value": {
                      "error": "ProjectNotFound",
                      "message": "The project ID given does not exist."
                    }
                  },
                  "RepositoryNotFound": {
                    "value": {
                      "error": "RepositoryNotFound",
                      "message": "The repository {repository} given does not exist."
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Update the description of an image repository. Note that only your \"admin\" apiAccount is allowed to make this call.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "title": "",
                    "type": "string",
                    "description": "Arbitrary text describing an image repository"
                  }
                }
              },
              "examples": {
                "example-1": {
                  "value": {
                    "description": "this is a demo"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Registry Projects"
        ]
      },
      "delete": {
        "summary": "Delete an image repository",
        "operationId": "delete-registry-project-repository",
        "responses": {
          "204": {
            "description": "This response is returned if the project is successfully deleted.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "This error is returned if the API call is not permitted. Refer to response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "NotAuthorized",
                      "message": "Only the admin API account is allowed to perform this operation."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "ProjectNotFound": {
                    "value": {
                      "error": "ProjectNotFound",
                      "message": "The project ID given does not exist."
                    }
                  },
                  "RepositoryNotFound": {
                    "value": {
                      "error": "RepositoryNotFound",
                      "message": "The repository {repository} given does not exist."
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Registry Projects"
        ],
        "description": "Delete an existing image repository. Note that deleting an image repository will cause all tags under the repository to be deleted. Also note that only your “admin” apiAccount is allowed to make this call."
      }
    },
    "/ecp/v1/registry/projects/{projectID}/repositories/{repository}/tags": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "projectID",
          "in": "path",
          "required": true,
          "description": "ID of a registry project"
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "repository",
          "in": "path",
          "required": true,
          "description": "Name of a repository"
        }
      ],
      "get": {
        "summary": "Query list of tags under a repository",
        "tags": [
          "Registry Projects"
        ],
        "responses": {
          "200": {
            "description": "This response contains a list of tags.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "tags": {
                      "type": "array",
                      "items": {
                        "title": "",
                        "type": "object",
                        "description": "",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of a tag"
                          },
                          "digest": {
                            "type": "string",
                            "description": "Digest of a tag"
                          },
                          "size": {
                            "type": "integer",
                            "description": "Size of the image, measured in bytes"
                          },
                          "architecture": {
                            "type": "string",
                            "description": "Architecture of the image"
                          },
                          "os": {
                            "type": "string",
                            "description": "OS of the image"
                          },
                          "dockerVersion": {
                            "type": "string",
                            "description": "The version of docker which builds the image"
                          },
                          "author": {
                            "type": "string",
                            "description": "Author of the image"
                          },
                          "creationTime": {
                            "type": "string",
                            "description": "Datetime when the image is built"
                          },
                          "scanOverview": {
                            "type": "object",
                            "description": "Overview of previous scan result",
                            "properties": {
                              "status": {
                                "type": "string",
                                "description": "Status of the scan",
                                "enum": [
                                  "pending",
                                  "running",
                                  "finished",
                                  "error"
                                ]
                              },
                              "severity": {
                                "type": "string",
                                "description": "High-level severity rating",
                                "enum": [
                                  "Not scanned",
                                  "Negligible",
                                  "Unknown",
                                  "Low",
                                  "Medium",
                                  "High"
                                ]
                              },
                              "started": {
                                "type": "string",
                                "description": "Datetime when the scan is started"
                              },
                              "completed": {
                                "type": "string",
                                "description": "Datetime when the scan is completed"
                              },
                              "components": {
                                "type": "object",
                                "description": "The components overview of the image",
                                "properties": {
                                  "total": {
                                    "description": "Total number of the components in this image",
                                    "type": "integer"
                                  },
                                  "summary": {
                                    "type": "array",
                                    "description": "Number of components in different severities",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "severity": {
                                          "type": "string",
                                          "description": "Severity of a component",
                                          "enum": [
                                            "None",
                                            "Unknown",
                                            "Low",
                                            "Medium",
                                            "High"
                                          ]
                                        },
                                        "count": {
                                          "type": "integer",
                                          "description": "Number of components with certain severity"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "totalCount": {
                      "title": "",
                      "type": "integer",
                      "description": "Total number of resources"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "tags": [
                        {
                          "digest": "sha256:eaf7dac7253ddbd482e307e3a73c50e16af4681a31fc195907e209fe4486d0e4",
                          "name": "v1",
                          "size": 49184653,
                          "architecture": "amd64",
                          "os": "linux",
                          "dockerVersion": "1.12.6",
                          "author": "NGINX Docker Maintainers <docker-maint@nginx.com>",
                          "creationTime": "2021-01-20T12:19:02.469616845Z",
                          "scanOverview": {
                            "status": "finished",
                            "severity": "Low",
                            "components": {
                              "total": 89,
                              "summary": [
                                {
                                  "severity": "None",
                                  "count": 66
                                },
                                {
                                  "severity": "Unknown",
                                  "count": 12
                                },
                                {
                                  "severity": "Low",
                                  "count": 11
                                }
                              ]
                            },
                            "started": "2021-01-20T12:19:25Z",
                            "completed": "2021-02-09T00:02:13Z"
                          }
                        }
                      ],
                      "totalCount": 1
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Refer to response body for details.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "InvalidListLimit": {
                    "value": {
                      "error": "InvalidListLimit",
                      "message": "The value of limit must be a valid integer between 1 and 200, both inclusive."
                    }
                  },
                  "InvalidListOffset": {
                    "value": {
                      "error": "InvalidListOffset",
                      "message": "The value of offset must be a valid non-negative integer."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "ProjectNotFound": {
                    "value": {
                      "error": "ProjectNotFound",
                      "message": "The project ID given does not exist."
                    }
                  },
                  "RepositoryNotFound": {
                    "value": {
                      "error": "RepositoryNotFound",
                      "message": "The repository {repository} given does not exist."
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-registry-project-repository-tags",
        "description": "A tag is a convenient alias used to refer to a specific container image version.\n\nThis interface allows you to list tags under a specific repository.",
        "parameters": [
          {
            "name": "On-Behalf-Of",
            "in": "header",
            "description": "If you are a reseller, you can use this header to specify the ID of a child customer and make API call on their behalf.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates the first resource to return. The first has an offset of 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": "0"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of resources to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": "100",
              "maximum": 200,
              "minimum": 1
            }
          }
        ]
      }
    },
    "/ecp/v1/registry/projects/{projectID}/repositories/{repository}/tags/{tag}": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "projectID",
          "in": "path",
          "required": true,
          "description": "ID of a registry project"
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "repository",
          "in": "path",
          "required": true,
          "description": "Name of a repository"
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "tag",
          "in": "path",
          "required": true,
          "description": "Name of an image tag"
        }
      ],
      "get": {
        "summary": "Query an image tag",
        "tags": [
          "Registry Projects"
        ],
        "responses": {
          "200": {
            "description": "This response contains details of the image tag.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of a tag"
                    },
                    "digest": {
                      "type": "string",
                      "description": "Digest of a tag"
                    },
                    "size": {
                      "type": "integer",
                      "description": "Size of the image, measured in bytes"
                    },
                    "architecture": {
                      "type": "string",
                      "description": "Architecture of the image"
                    },
                    "os": {
                      "type": "string",
                      "description": "OS of the image"
                    },
                    "dockerVersion": {
                      "type": "string",
                      "description": "The version of docker which builds the image"
                    },
                    "author": {
                      "type": "string",
                      "description": "Author of the image"
                    },
                    "creationTime": {
                      "type": "string",
                      "description": "Datetime when the image is built"
                    },
                    "scanOverview": {
                      "type": "object",
                      "description": "Overview of previous scan result",
                      "properties": {
                        "status": {
                          "type": "string",
                          "description": "Status of the scan",
                          "enum": [
                            "pending",
                            "running",
                            "finished",
                            "error"
                          ]
                        },
                        "severity": {
                          "type": "string",
                          "description": "High-level severity rating",
                          "enum": [
                            "Not scanned",
                            "Negligible",
                            "Unknown",
                            "Low",
                            "Medium",
                            "High"
                          ]
                        },
                        "started": {
                          "type": "string",
                          "description": "Datetime when the scan is started"
                        },
                        "completed": {
                          "type": "string",
                          "description": "Datetime when the scan is completed"
                        },
                        "components": {
                          "type": "object",
                          "description": "The components overview of the image",
                          "properties": {
                            "total": {
                              "description": "Total number of the components in this image",
                              "type": "integer"
                            },
                            "summary": {
                              "type": "array",
                              "description": "Number of components in different severities",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "severity": {
                                    "type": "string",
                                    "description": "Severity of a component",
                                    "enum": [
                                      "None",
                                      "Unknown",
                                      "Low",
                                      "Medium",
                                      "High"
                                    ]
                                  },
                                  "count": {
                                    "type": "integer",
                                    "description": "Number of components with certain severity"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "digest": "sha256:eaf7dac7253ddbd482e307e3a73c50e16af4681a31fc195907e209fe4486d0e4",
                      "name": "v1",
                      "size": 49184653,
                      "architecture": "amd64",
                      "os": "linux",
                      "dockerVersion": "1.12.6",
                      "author": "NGINX Docker Maintainers <docker-maint@nginx.com>",
                      "creationTime": "2021-01-20T12:19:02.469616845Z",
                      "scanOverview": {
                        "status": "finished",
                        "severity": "Low",
                        "components": {
                          "total": 89,
                          "summary": [
                            {
                              "severity": "None",
                              "count": 66
                            },
                            {
                              "severity": "Unknown",
                              "count": 12
                            },
                            {
                              "severity": "Low",
                              "count": 11
                            }
                          ]
                        },
                        "started": "2021-01-20T12:19:25Z",
                        "completed": "2021-02-09T00:02:13Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "ProjectNotFound": {
                    "value": {
                      "error": "ProjectNotFound",
                      "message": "The project ID given does not exist."
                    }
                  },
                  "RepositoryNotFound": {
                    "value": {
                      "error": "RepositoryNotFound",
                      "message": "The repository {repository} given does not exist."
                    }
                  },
                  "TagNotFound": {
                    "value": {
                      "error": "TagNotFound",
                      "message": "The tag {tag} given does not exist."
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-registry-project-repository-tag",
        "description": "Get the details of an image tag.",
        "parameters": [
          {
            "name": "On-Behalf-Of",
            "in": "header",
            "description": "If you are a reseller, you can use this header to specify the ID of a child customer and make API call on their behalf.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "delete": {
        "summary": "Delete an image tag",
        "operationId": "delete-registry-project-repository-tag",
        "responses": {
          "204": {
            "description": "This response is returned if the tag is successfully deleted.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "This error is returned if the API call is not permitted. Refer to response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "NotAuthorized",
                      "message": "Only the admin API account is allowed to perform this operation."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "ProjectNotFound": {
                    "value": {
                      "error": "ProjectNotFound",
                      "message": "The project ID given does not exist."
                    }
                  },
                  "RepositoryNotFound": {
                    "value": {
                      "error": "RepositoryNotFound",
                      "message": "The repository {repository} given does not exist."
                    }
                  },
                  "TagNotFound": {
                    "value": {
                      "error": "TagNotFound",
                      "message": "The tag {tag} given does not exist."
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Registry Projects"
        ],
        "description": "Delete an existing image tag. Note that only your \"admin\" apiAccount is allowed to make this call."
      }
    },
    "/ecp/v1/registry/projects/{projectID}/repositories/{repository}/tags/{tag}/vulnerabilities": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "projectID",
          "in": "path",
          "required": true,
          "description": "ID of a registry project"
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "repository",
          "in": "path",
          "required": true,
          "description": "Name of a repository"
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "tag",
          "in": "path",
          "required": true,
          "description": "Name of an image tag"
        }
      ],
      "get": {
        "summary": "Query the vulnerabilities of an image",
        "tags": [
          "Registry Projects"
        ],
        "responses": {
          "200": {
            "description": "This response contains the vulnerability details of an image.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "vulnerabilities": {
                      "type": "array",
                      "description": "Array of vulnerabilities",
                      "items": {
                        "type": "object",
                        "properties": {
                          "ID": {
                            "type": "string",
                            "description": "ID of the vulnerability, usually it is the CVE ID."
                          },
                          "severity": {
                            "type": "string",
                            "description": "Level of severity.",
                            "enum": [
                              "None",
                              "Unknown",
                              "Low",
                              "Medium",
                              "High"
                            ]
                          },
                          "package": {
                            "type": "string",
                            "description": "The package that introduces the vulnerability"
                          },
                          "version": {
                            "type": "string",
                            "description": "The version of the package"
                          },
                          "description": {
                            "type": "string",
                            "description": "The description of the vulnerability"
                          },
                          "fixedVersion": {
                            "type": "string",
                            "description": "The version where the vulnerability is fixed"
                          },
                          "link": {
                            "type": "string",
                            "description": "Link to the reference web page about this CVE"
                          }
                        }
                      }
                    },
                    "totalCount": {
                      "title": "",
                      "type": "integer",
                      "description": "Total number of resources"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "vulnerabilities": [
                        {
                          "severity": "None",
                          "version": "1.30+dfsg-6",
                          "description": "Tar 1.15.1 does not properly warn the user when extracting setuid or setgid files, which may allow local users or remote attackers to gain privileges.",
                          "link": "https://security-tracker.debian.org/tracker/CVE-2005-2541",
                          "ID": "CVE-2005-2541",
                          "package": "tar"
                        },
                        {
                          "severity": "None",
                          "version": "1:4.5-1.1",
                          "description": "initscripts in rPath Linux 1 sets insecure permissions for the /var/log/btmp file, which allows local users to obtain sensitive information regarding authentication attempts.  NOTE: because sshd detects the insecure permissions and does not log certain events, this also prevents sshd from logging failed authentication attempts by remote attackers.",
                          "link": "https://security-tracker.debian.org/tracker/CVE-2007-5686",
                          "ID": "CVE-2007-5686",
                          "package": "shadow"
                        }
                      ],
                      "totalCount": 2
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Refer to response body for details.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "InvalidListOffset": {
                    "value": {
                      "error": "InvalidListOffset",
                      "message": "The value of offset must be a valid non-negative integer."
                    }
                  },
                  "InvalidListLimit": {
                    "value": {
                      "error": "InvalidListLimit",
                      "message": "The value of limit must be a valid integer between 1 and 200, both inclusive."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "ProjectNotFound": {
                    "value": {
                      "error": "ProjectNotFound",
                      "message": "The project ID given does not exist."
                    }
                  },
                  "RepositoryNotFound": {
                    "value": {
                      "error": "RepositoryNotFound",
                      "message": "The repository {repository} given does not exist."
                    }
                  },
                  "TagNotFound": {
                    "value": {
                      "error": "TagNotFound",
                      "message": "The tag {tag} given does not exist."
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-registry-project-repository-tag-vulnerabilities",
        "description": "Get the vulnerability details of an image based on the previous successful scan.",
        "parameters": [
          {
            "name": "On-Behalf-Of",
            "in": "header",
            "description": "If you are a reseller, you can use this header to specify the ID of a child customer and make API call on their behalf.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates the first resource to return. The first has an offset of 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": "0"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of resources to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": "100",
              "maximum": 200,
              "minimum": 1
            }
          }
        ]
      }
    },
    "/ecp/v1/registry/users": {
      "get": {
        "summary": "Query list of registry users",
        "tags": [
          "Registry Users"
        ],
        "responses": {
          "200": {
            "description": "The response contains a list of registry users.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "users": {
                      "type": "array",
                      "description": "Array of registry users",
                      "items": {
                        "type": "object",
                        "properties": {
                          "userID": {
                            "title": "",
                            "type": "integer",
                            "description": "ID of a registry user"
                          },
                          "username": {
                            "title": "",
                            "type": "string",
                            "description": "Username of a registry user"
                          },
                          "email": {
                            "title": "",
                            "type": "string",
                            "description": "Email address of the registry user"
                          },
                          "description": {
                            "title": "",
                            "type": "string",
                            "description": "Arbitrary text about the registry user. Must be not more than 20 characters."
                          },
                          "projectsAccess": {
                            "type": "array",
                            "description": "What projects are accessible to a registry user and what is the access type.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "project": {
                                  "type": "string",
                                  "description": "Name of a registry project"
                                },
                                "accessType": {
                                  "type": "string",
                                  "title": "",
                                  "description": "How a project is accessible to a registry user. Can be one of:\n“readonly”: has the permissions to pull images under a project;\n“readwrite”: has the permissions to push/pull images to/from a project.",
                                  "enum": [
                                    "readonly",
                                    "readwrite"
                                  ]
                                }
                              }
                            }
                          },
                          "createdBy": {
                            "title": "",
                            "type": "string",
                            "description": "Name of contact or apiAccount who creates the registry user"
                          },
                          "creationTime": {
                            "title": "",
                            "format": "date-time",
                            "type": "string",
                            "description": "Datetime when the resource is created"
                          },
                          "lastUpdateTime": {
                            "type": "string",
                            "title": "",
                            "format": "date-time",
                            "description": "Datetime when the resource is last updated"
                          }
                        }
                      }
                    },
                    "totalCount": {
                      "title": "",
                      "type": "integer",
                      "description": "Total number of resources"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "users": [
                        {
                          "username": "demouser-5883",
                          "email": "abcde@123.com",
                          "description": "This is a demo user",
                          "createdBy": "ecp-demo",
                          "creationTime": "2021-01-19T06:28:55Z",
                          "lastUpdateTime": "2021-01-19T07:48:22Z",
                          "projectsAccess": [
                            {
                              "accessType": "readwrite",
                              "project": "myproject1"
                            }
                          ],
                          "userID": 2977
                        }
                      ],
                      "totalCount": 1
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Refer to the response body for details.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "InvalidListLimit": {
                    "value": {
                      "error": "InvalidListLimit",
                      "message": "The value of limit must be a valid integer between 1 and 200, both inclusive."
                    }
                  },
                  "InvalidListOffset": {
                    "value": {
                      "error": "InvalidListOffset",
                      "message": "The value of offset must be a valid non-negative integer."
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-registry-users",
        "description": "Get a list of registry users. You can specify a search parameter, offset and limit to filter your results.",
        "parameters": [
          {
            "name": "On-Behalf-Of",
            "in": "header",
            "description": "If you are a reseller, you can use this header to specify the ID of a child customer and make API call on their behalf.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchString",
            "in": "query",
            "description": "Keyword to search for particular resources. The value is matched against the \"name\" field of each resource.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates the first resource to return. The first has an offset of 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": "0"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of resources to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": "100",
              "maximum": 200,
              "minimum": 1
            }
          }
        ]
      },
      "post": {
        "summary": "Create a registry user",
        "operationId": "post-registry-users",
        "responses": {
          "201": {
            "description": "This response indicates the registry user is successfully created.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              },
              "Location": {
                "schema": {
                  "type": "string"
                },
                "in": "header",
                "name": "Location",
                "description": "Location of the newly created resource.",
                "required": false
              }
            }
          },
          "400": {
            "description": "The request is invalid. Refer to the response body for details.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "InvalidUsernamePrefix": {
                    "value": {
                      "error": "InvalidUsernamePrefix",
                      "message": "The usernamePrefix given is invalid. A valid value must be not more than 15 characters and must not contain such special characters as “, ~, #, $, %."
                    }
                  },
                  "InvalidPassword": {
                    "value": {
                      "error": "InvalidPassword",
                      "message": "The password given is invalid. A valid password must be 8 to 20 characters long with at least 1 lowercase letter, 1 uppercase letter and 1 number."
                    }
                  },
                  "InvalidEmailAddress": {
                    "value": {
                      "error": "InvalidEmailAddress",
                      "message": "The email address given is invalid."
                    }
                  },
                  "FieldValueTooLong": {
                    "value": {
                      "error": "FieldValueTooLong",
                      "message": "The {field} must be not more than xxx characters."
                    }
                  },
                  "InvalidAccessType": {
                    "value": {
                      "error": "InvalidAccessType",
                      "message": "The access type {access type} given is invalid. Must be one of “readonly” and “readwrite”."
                    }
                  },
                  "ProjectNotFound": {
                    "value": {
                      "error": "ProjectNotFound",
                      "message": "The project {project} given does not exist."
                    }
                  },
                  "RequiredFieldMissing": {
                    "value": {
                      "error": "RequiredFieldMissing",
                      "message": "The field {field} is required."
                    }
                  },
                  "RepeatedProjectName": {
                    "value": {
                      "error": "RepeatedProjectName",
                      "message": "The project name in the projectsAccess array must be unique."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "This error is returned if the API call is not permitted. Refer to response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "NotAuthorized",
                      "message": "Only the admin API account is allowed to perform this operation."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "409": {
            "description": "This error is returned if you try to create a registry user that already exists.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "UsernamePrefixExists": {
                    "value": {
                      "error": "UsernamePrefixExists",
                      "message": "The usernamePrefix {usernamePrefix} is already taken."
                    }
                  },
                  "EmailAddressExists": {
                    "value": {
                      "error": "EmailAddressExists",
                      "message": "The email address {email address} is already registered by an existing user."
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Registry Users"
        ],
        "description": "This interface enables you to create a registry user. Note that only your \"admin\" apiAccount is allowed to make this call.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "usernamePrefix": {
                    "type": "string",
                    "description": "Username prefix to be used in the username of a new registry user. Must be unique across registry users under a customer. Must be not more than 15 characters and must not contain such special characters as “, ~, #, $, %. \n\nWhen receiving the request, the API server will append a fixed length random string and then create a registry user using the complete username. This is to avoid possible naming collisions across different customers.",
                    "maxLength": 15
                  },
                  "password": {
                    "type": "string",
                    "description": "Password of a registry user. Must be 8 to 20 characters long with at least 1 lowercase letter, 1 uppercase letter and 1 number.",
                    "minLength": 8,
                    "maxLength": 20
                  },
                  "email": {
                    "type": "string",
                    "description": "Email address of a registry user. Must be a valid email address. Must be unique."
                  },
                  "description": {
                    "type": "string",
                    "description": "Arbitrary text about the user. Must be not more than 20 characters.",
                    "maxLength": 20
                  },
                  "projectsAccess": {
                    "type": "array",
                    "description": "Defines what projects are accessible to a registry user and what is the access type.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "project": {
                          "type": "string",
                          "description": "Name of a registry project"
                        },
                        "accessType": {
                          "type": "string",
                          "title": "",
                          "description": "How a project is accessible to a registry user. Can be one of:\n“readonly”: has the permissions to pull images under a project;\n“readwrite”: has the permissions to push/pull images to/from a project.",
                          "enum": [
                            "readonly",
                            "readwrite"
                          ]
                        }
                      },
                      "required": [
                        "project",
                        "accessType"
                      ]
                    }
                  }
                },
                "required": [
                  "usernamePrefix",
                  "password",
                  "email"
                ]
              },
              "examples": {
                "example-1": {
                  "value": {
                    "usernamePrefix": "demo",
                    "password": "ABcd12345678",
                    "email": "abc@123.com",
                    "description": "This is a demo user",
                    "projectsAccess": [
                      {
                        "project": "myproject1",
                        "accessType": "readonly"
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ecp/v1/users/{userID}": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "userID",
          "in": "path",
          "required": true,
          "description": "ID of a registry user"
        }
      ],
      "get": {
        "summary": "Query a registry user",
        "tags": [
          "Registry Users"
        ],
        "responses": {
          "200": {
            "description": "The response contains details of the registry user.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "userID": {
                      "title": "",
                      "type": "integer",
                      "description": "ID of a registry user"
                    },
                    "username": {
                      "title": "",
                      "type": "string",
                      "description": "Username of a registry user"
                    },
                    "email": {
                      "title": "",
                      "type": "string",
                      "description": "Email address of the registry user"
                    },
                    "description": {
                      "title": "",
                      "type": "string",
                      "description": "Arbitrary text about the registry user. Must be not more than 20 characters."
                    },
                    "projectsAccess": {
                      "type": "array",
                      "description": "What projects are accessible to a registry user and what is the access type.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "projectID": {
                            "title": "",
                            "type": "integer",
                            "description": "ID of a registry project"
                          },
                          "project": {
                            "title": "",
                            "type": "string",
                            "description": "Name of a registry project. Must be unique globally. Allows lower case alphanumeric characters, ‘-’, ‘_’ and ‘.’ only, must start and end with an alphanumeric character, and must be not more than 128 characters."
                          },
                          "accessType": {
                            "type": "string",
                            "title": "",
                            "description": "How a project is accessible to a registry user. Can be one of:\n“readonly”: has the permissions to pull images under a project;\n“readwrite”: has the permissions to push/pull images to/from a project.",
                            "enum": [
                              "readonly",
                              "readwrite"
                            ]
                          }
                        }
                      }
                    },
                    "createdBy": {
                      "title": "",
                      "type": "string",
                      "description": "Name of contact or apiAccount who creates the registry user"
                    },
                    "creationTime": {
                      "title": "",
                      "format": "date-time",
                      "type": "string",
                      "description": "Datetime when the resource is created"
                    },
                    "lastUpdateTime": {
                      "type": "string",
                      "title": "",
                      "format": "date-time",
                      "description": "Datetime when the resource is last updated"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "username": "demouser-5883",
                      "email": "abcde@123.com",
                      "description": "This is a demo user",
                      "createdBy": "ecp-demo",
                      "creationTime": "2021-01-19T06:28:55Z",
                      "lastUpdateTime": "2021-01-19T07:48:22Z",
                      "projectsAccess": [
                        {
                          "accessType": "readwrite",
                          "project": "myproject1",
                          "projectID": 22
                        }
                      ],
                      "userID": 2977
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "UserNotFound": {
                    "value": {
                      "error": "UserNotFound",
                      "message": "The user ID given doesnot exist."
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-user-by-ID",
        "description": "Get the details of a registry user.",
        "parameters": [
          {
            "name": "On-Behalf-Of",
            "in": "header",
            "description": "If you are a reseller, you can use this header to specify the ID of a child customer and make API call on their behalf.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "put": {
        "summary": "Update a registry user",
        "operationId": "put-user-by-ID",
        "responses": {
          "200": {
            "description": "This response indicates the user is successfully updated.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "userID": {
                      "title": "",
                      "type": "integer",
                      "description": "ID of a registry user"
                    },
                    "username": {
                      "title": "",
                      "type": "string",
                      "description": "Username of a registry user"
                    },
                    "email": {
                      "title": "",
                      "type": "string",
                      "description": "Email address of the registry user"
                    },
                    "description": {
                      "title": "",
                      "type": "string",
                      "description": "Arbitrary text about the registry user. Must be not more than 20 characters."
                    },
                    "projectsAccess": {
                      "type": "array",
                      "description": "What projects are accessible to a registry user and what is the access type.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "project": {
                            "title": "",
                            "type": "string",
                            "description": "Name of a registry project. Must be unique globally. Allows lower case alphanumeric characters, ‘-’, ‘_’ and ‘.’ only, must start and end with an alphanumeric character, and must be not more than 128 characters."
                          },
                          "accessType": {
                            "type": "string",
                            "title": "",
                            "description": "How a project is accessible to a registry user. Can be one of:\n“readonly”: has the permissions to pull images under a project;\n“readwrite”: has the permissions to push/pull images to/from a project.",
                            "enum": [
                              "readonly",
                              "readwrite"
                            ]
                          }
                        }
                      }
                    },
                    "createdBy": {
                      "title": "",
                      "type": "string",
                      "description": "Name of contact or apiAccount who creates the registry user"
                    },
                    "creationTime": {
                      "title": "",
                      "format": "date-time",
                      "type": "string",
                      "description": "Datetime when the resource is created"
                    },
                    "lastUpdateTime": {
                      "type": "string",
                      "title": "",
                      "format": "date-time",
                      "description": "Datetime when the resource is last updated"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "username": "demouser-5883",
                      "email": "demo@123.com",
                      "description": "This is a demo user",
                      "createdBy": "ecp-demo",
                      "creationTime": "2021-01-19T06:28:55Z",
                      "lastUpdateTime": "2021-01-19T07:48:22Z",
                      "projectsAccess": [
                        {
                          "accessType": "readonly",
                          "project": "myproject1"
                        }
                      ],
                      "userID": 2977
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Refer to response body for details.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "InvalidEmailAddress": {
                    "value": {
                      "error": "InvalidEmailAddress",
                      "message": "The email address given is invalid."
                    }
                  },
                  "FieldValueTooLong": {
                    "value": {
                      "error": "FieldValueTooLong",
                      "message": "The {field} must be not more than xxx characters."
                    }
                  },
                  "ProjectNotFound": {
                    "value": {
                      "error": "ProjectNotFound",
                      "message": "The project {project} given does not exist."
                    }
                  },
                  "InvalidAccessType": {
                    "value": {
                      "error": "InvalidAccessType",
                      "message": "The access type {access type} given is invalid. Must be one of “readonly” and “readwrite”."
                    }
                  },
                  "RequiredFieldMissing": {
                    "value": {
                      "error": "RequiredFieldMissing",
                      "message": "The field {field} is required."
                    }
                  },
                  "UpdateUsernameNotAllowed": {
                    "value": {
                      "error": "UpdateUsernameNotAllowed",
                      "message": "The username cannot be updated."
                    }
                  },
                  "RepeatedProjectName": {
                    "value": {
                      "error": "RepeatedProjectName",
                      "message": "The project name in the projectsAccess array must be unique."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "This error is returned if the API call is not permitted. Refer to response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "NotAuthorized",
                      "message": "Only the admin API account is allowed to perform this operation."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "UserNotFound": {
                    "value": {
                      "error": "UserNotFound",
                      "message": "The user ID given does not exist."
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "This error is returned if you provide an email address that is already registered.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "EmailAddressExists": {
                    "value": {
                      "error": "EmailAddressExists",
                      "message": "The email address {email address} is already registered by an existing user."
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Registry Users"
        ],
        "description": "Update an existing registry user. Note that only your \"admin\" apiAccount is allowed to make this call.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "title": "",
                    "type": "string",
                    "description": "Email address of the registry user"
                  },
                  "description": {
                    "title": "",
                    "type": "string",
                    "description": "Arbitrary text about the registry user. Must be not more than 20 characters."
                  },
                  "projectsAccess": {
                    "type": "array",
                    "description": "Defines what projects are accessible to a registry user and what is the access type.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "project": {
                          "title": "",
                          "type": "string",
                          "description": "Name of a registry project. Must be unique globally. Allows lower case alphanumeric characters, ‘-’, ‘_’ and ‘.’ only, must start and end with an alphanumeric character, and must be not more than 128 characters."
                        },
                        "accessType": {
                          "type": "string",
                          "title": "",
                          "description": "How a project is accessible to a registry user. Can be one of:\n“readonly”: has the permissions to pull images under a project;\n“readwrite”: has the permissions to push/pull images to/from a project.",
                          "enum": [
                            "readonly",
                            "readwrite"
                          ]
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "example-1": {
                  "value": {
                    "email": "demo@123.com",
                    "description": "this is a demo user",
                    "projectsAccess": [
                      {
                        "project": "myproject1",
                        "accessType": "readonly"
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Change the password of a registry user",
        "operationId": "patch-user-by-ID",
        "responses": {
          "204": {
            "description": "This response indicates the password is changed.",
            "headers": {
              "Qtl-Reqeust-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Refer to response body for details.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "InvalidPassword": {
                    "value": {
                      "error": "InvalidPassword",
                      "message": "The password given is invalid. A valid password must be 8 to 20 characters long with at least 1 lowercase letter, 1 uppercase letter and 1 number."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "This error is returned if the API call is not permitted. Refer to response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "NotAuthorized",
                      "message": "Only the admin API account is allowed to perform this operation."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "UserNotFound",
                      "message": "The user ID given does not exist."
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Registry Users"
        ],
        "description": "Change the password of a registry user. Note that only your \"admin\" apiAccount is allowed to make this call.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "password": {
                    "type": "string",
                    "description": "Password of a registry user. Must be 8 to 20 characters long with at least 1 lowercase letter, 1 uppercase letter and 1 number.",
                    "minLength": 8,
                    "maxLength": 20
                  }
                },
                "required": [
                  "password"
                ]
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a registry user",
        "operationId": "delete-user-by-ID",
        "responses": {
          "204": {
            "description": "This response is returned if the user is successfully deleted.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "This error is returned if the API call is not permitted. Refer to response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "NotAuthorized",
                      "message": "Only the admin API account is allowed to perform this operation."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "UserNotFound",
                      "message": "The user ID given does not exist."
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Registry Users"
        ],
        "description": "Delete an existing registry user. Note that only your \"admin\" apiAccount is allowed to make this call."
      }
    }
  },
  "components": {
    "schemas": {
      "application.id": {
        "title": "",
        "type": "string",
        "description": "ID of an ECP application"
      },
      "application.name": {
        "title": "",
        "type": "string",
        "description": "Name of an ECP application. A valid name consists of lower-case alphanumeric characters or ‘-', must start and end with a lower-case alphanumeric character, and must be no more than 48 characters."
      },
      "application.podCount": {
        "title": "",
        "type": "object",
        "description": "An object indicating the expectation and availability of pods for an application",
        "properties": {
          "desired": {
            "type": "integer",
            "description": "Count of pods desired for an application across all ECP PoPs"
          },
          "current": {
            "type": "integer",
            "description": "Count of pods that are created and existing for an application across all ECP PoPs. Pods in different phases (i.e. pending, running, failed) are all counted."
          },
          "running": {
            "type": "integer",
            "description": "Count of running pods that have been created and existing for an application across all PoPs"
          }
        }
      },
      "application.isLoadbalanced": {
        "title": "",
        "type": "boolean",
        "description": "A flag indicating if layer 4 load balancer is used to expose an ECP application"
      },
      "application.cpuLimitsTotal": {
        "title": "",
        "type": "number",
        "description": "Sum of “limits.cpu” requested by an application for pods across all PoPs. Measured in cores."
      },
      "application.memLimitsTotal": {
        "title": "",
        "type": "integer",
        "description": "Sum of “limits.mem” requested by an application for pods across all PoPs. Measured in bytes."
      },
      "application.localSSDTotal": {
        "title": "",
        "description": "Sum of local-ssd storage capacity requested by an application for pods across all PoPs. Measured in bytes.",
        "type": "integer"
      },
      "application.persistSSDTotal": {
        "title": "",
        "type": "integer",
        "description": "Sum of persist-ssd storage capacity requested by an application for pods across all PoPs. Measured in bytes."
      },
      "application.ipCount": {
        "title": "",
        "type": "integer",
        "description": "Count of public IPv4 addresses requested by an application. Can be the addresses of layer4 load balancers or pods."
      },
      "application.configuration": {
        "title": "",
        "type": "string",
        "description": "The latest version of an application specification"
      },
      "application.status": {
        "type": "string",
        "description": "The deployment status of an application",
        "enum": [
          "waiting",
          "deploying",
          "deployed",
          "failed"
        ]
      },
      "application.regions": {
        "title": "",
        "type": "array",
        "description": "Array of regions where the application is deployed",
        "items": {
          "type": "object",
          "properties": {
            "region": {
              "type": "string",
              "description": "Code of an ECP region, e.g. “NA-WEST”"
            },
            "PoPs": {
              "type": "array",
              "description": "Array of PoPs where an application is deployed",
              "items": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "Short form of an ECP PoP"
                  },
                  "description": {
                    "type": "string",
                    "description": "Full name of an ECP PoP"
                  }
                }
              }
            }
          }
        }
      },
      "application.vips": {
        "title": "",
        "type": "array",
        "description": "Array of VIPs which are grouped per ECP PoPs",
        "items": {
          "type": "object",
          "properties": {
            "VIP": {
              "type": "string",
              "description": "Public IPv4 address(es) for the application at a certain ECP PoP. Multiple addresses are separated by a comma."
            },
            "VIP-v6": {
              "type": "string",
              "description": "Public IPv6 address(es) for the application at a certain ECP PoP. Multiple addresses are separated by a comma."
            },
            "isLoadBalanced": {
              "type": "boolean",
              "description": "A flag indicating if an ECP application is exposed via ECP-defined layer4 load balancers"
            },
            "PoP": {
              "type": "string",
              "description": "Full name of an ECP PoP where the public IP address(es) are located"
            },
            "podCount": {
              "description": "Number of pods created for an application at an ECP PoP",
              "type": "integer"
            }
          }
        }
      },
      "application.history": {
        "title": "",
        "type": "array",
        "description": "Array of history operations for an ECP application",
        "items": {
          "type": "object",
          "properties": {
            "action": {
              "type": "string",
              "description": "Type of operation performed",
              "enum": [
                "create",
                "patch",
                "replace",
                "delete"
              ]
            },
            "timestamp": {
              "type": "string",
              "description": "Date-time indicating when the operation is performed",
              "format": "date-time"
            },
            "configuration": {
              "type": "string",
              "description": "The application specification submitted along with the operation request"
            },
            "version": {
              "type": "integer",
              "description": "application version number"
            },
            "isLatest": {
              "type": "boolean",
              "description": "A flag indicating if the application version is the newest"
            },
            "calledBy": {
              "description": "API account or user who calls for the operation",
              "type": "string"
            },
            "deployStart": {
              "type": "string",
              "description": "Date-time indicating when the deployment as triggered by this operation starts",
              "format": "date-time"
            },
            "deployEnd": {
              "type": "string",
              "description": "Date-time indicating when the deployment as triggered by this operation ends",
              "format": "date-time"
            },
            "status": {
              "type": "string",
              "description": "Status of the deployment as triggered by this operation",
              "enum": [
                "waiting",
                "deploying",
                "deployed",
                "failed",
                "aborted"
              ]
            },
            "message": {
              "type": "string",
              "description": "Text explaining the status of deployment"
            }
          }
        }
      },
      "instance.restarts": {
        "type": "integer",
        "description": "Count of restarts of containers in a pod instance"
      },
      "instance.ready": {
        "type": "string",
        "description": "Readiness of containers in a pod instance, e.g. “2/2” means 2 containers in a pod instance are both ready."
      },
      "instance.pop": {
        "type": "string",
        "description": "Short form of an ECP PoP where the pod instance is located"
      },
      "instance.phase": {
        "type": "string",
        "description": "Kubernetes defined term indicating where a pod instance is in its lifecycle. For more information, please refer to https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.16/#podstatus-v1-core",
        "enum": [
          "Pending",
          "Running",
          "Failed"
        ]
      },
      "instance.namespace": {
        "type": "string",
        "description": "Namespace that owns the pod instance"
      },
      "instance.name": {
        "type": "string",
        "description": "Name of a pod instance"
      },
      "instance.ID": {
        "type": "string",
        "description": "ID of a pod instance"
      },
      "instance.age": {
        "type": "string",
        "description": "Elapse of time since creation of a pod instance"
      },
      "instance.creationTime": {
        "type": "string",
        "description": "Date-time when the pod instance is created",
        "format": "date-time"
      },
      "instance.publicIPv4": {
        "title": "",
        "type": "string",
        "description": "Public IPv4 address assigned to a pod instance"
      },
      "instance.publicIPv6": {
        "title": "",
        "type": "string",
        "description": "Public IPv6 address assigned to a pod instance"
      },
      "instance.podIP": {
        "title": "",
        "type": "string",
        "description": "Private IPv4 address assigned to a pod instance"
      },
      "instance.conditions": {
        "title": "",
        "type": "array",
        "description": "Array of pod conditions describing the current service state of a pod. For more information, please refer to https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.16/#podcondition-v1-core",
        "items": {
          "type": "object",
          "properties": {
            "lastProbeTime": {
              "type": "string",
              "description": "Timestamp when the Pod condition was last probed",
              "format": "date-time"
            },
            "lastTransitionTime": {
              "type": "string",
              "description": "Timestamp when the Pod last transitioned from one status to another",
              "format": "date-time"
            },
            "message": {
              "type": "string",
              "description": "Message indicating details about the transition"
            },
            "reason": {
              "type": "string",
              "description": "A unique, one-word, CamelCase reason for the condition’s last transition"
            },
            "status": {
              "type": "string",
              "description": "Status of the condition",
              "enum": [
                "True",
                "False",
                "Unknown"
              ]
            },
            "type": {
              "type": "string",
              "description": "Type of the condition",
              "enum": [
                "PodScheduled",
                "Ready",
                "Initialized",
                "Unschedulable",
                "ContainersReady"
              ]
            }
          }
        }
      },
      "instance.containers": {
        "title": "",
        "type": "array",
        "description": "Array of containers in a pod instance",
        "items": {
          "type": "object",
          "properties": {
            "containerID": {
              "type": "string",
              "description": "Container's ID in the format 'docker://<container_id>'"
            },
            "name": {
              "type": "string",
              "description": "Container name"
            },
            "image": {
              "type": "string",
              "description": "The image the container is running"
            },
            "imageID": {
              "type": "string",
              "description": "ImageID of the container's image"
            },
            "lastState": {
              "type": "object",
              "description": "Details about the container's last termination condition"
            },
            "ready": {
              "description": "Specifies whether the container has passed its readiness probe",
              "type": "boolean"
            },
            "restartCount": {
              "description": "The number of times the container has been restarted",
              "type": "integer"
            },
            "state": {
              "type": "object",
              "description": "Details about the container's current condition"
            }
          }
        }
      },
      "instance.events": {
        "title": "",
        "type": "array",
        "description": "Array of events related to the pod instance. Note that an event will be removed in 3 hours after last occurence. For more information, please refer to https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.16/#event-v1-core",
        "items": {
          "type": "object",
          "properties": {
            "firstTimestamp": {
              "type": "string",
              "description": "The time at which the event was first recorded",
              "format": "date-time"
            },
            "lastTimestamp": {
              "type": "string",
              "description": "The time at which the most recent occurrence of this event was recorded",
              "format": "date-time"
            },
            "count": {
              "type": "integer",
              "description": "The number of times this event has occurred"
            },
            "involvedObject": {
              "type": "object",
              "description": "The object that this event is about"
            },
            "reason": {
              "type": "string",
              "description": "A short string that gives the reason for the transition into the object's current status"
            },
            "message": {
              "type": "string",
              "description": "A human-readable description of the status of this operation"
            }
          }
        }
      },
      "application.spec.RegionPreference": {
        "title": "RegionPreference",
        "type": "object",
        "x-examples": {
          "example-1": {
            "apiVersion": "v1",
            "kind": "RegionPreference",
            "metadata": {
              "name": "myapp",
              "namespace": "demo"
            },
            "spec": {
              "regions": [
                {
                  "name": "NA-WEST",
                  "replicas": 6
                },
                {
                  "name": "EU",
                  "replicas": 4
                }
              ]
            }
          }
        },
        "description": "Region",
        "properties": {
          "apiVersion": {
            "type": "string",
            "enum": [
              "v1"
            ]
          },
          "Kind": {
            "type": "string",
            "description": "Use \"RegionPreference\", an ECP custom resource, to specify ECP regions where you would like to have your application distributed. ",
            "enum": [
              "RegionPreference"
            ]
          },
          "metadata": {
            "type": "object",
            "required": [
              "namespace"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of a \"RegionPreference\" resource. Must be the same as the query param \"appName\"."
              },
              "namespace": {
                "type": "string",
                "description": "The kubernetes namespace created for your ECP account"
              }
            }
          },
          "spec": {
            "type": "object",
            "required": [
              "regions"
            ],
            "properties": {
              "regions": {
                "type": "array",
                "description": "Array of target ECP regions to distribute your application",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Code of an ECP region, e.g. \"NA-WEST\" which stands for west of North America."
                    },
                    "replicas": {
                      "type": "integer",
                      "description": "The total number of pod instances that you would like to maintain for your application within an ECP region",
                      "minimum": 1
                    }
                  },
                  "required": [
                    "name",
                    "replicas"
                  ]
                }
              }
            }
          }
        },
        "required": [
          "apiVersion",
          "Kind",
          "metadata",
          "spec"
        ]
      },
      "application.spec.location": {
        "title": "Location",
        "type": "object",
        "description": "Location",
        "x-examples": {
          "example-1": {
            "apiVersion": "v1",
            "kind": "Location",
            "metadata": {
              "name": "myapp",
              "namespace": "demo"
            },
            "spec": {
              "locations": [
                {
                  "name": "sjc",
                  "replicas": 2
                },
                {
                  "name": "ams",
                  "replicas": 1
                }
              ]
            }
          }
        },
        "properties": {
          "apiVersion": {
            "type": "string",
            "enum": [
              "v1"
            ]
          },
          "Kind": {
            "type": "string",
            "enum": [
              "Location"
            ],
            "description": "Use \"Location\", an ECP custom resource, to pick ECP PoPs where you would like to run your application. "
          },
          "metadata": {
            "type": "object",
            "required": [
              "namespace"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of a \"Location\" resource. Must be the same as the query param \"appName\"."
              },
              "namespace": {
                "type": "string",
                "description": "The kubernetes namespace created for your ECP account"
              }
            }
          },
          "spec": {
            "type": "object",
            "required": [
              "locations"
            ],
            "properties": {
              "locations": {
                "type": "array",
                "description": "Array of target ECP PoPs to run your application",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Code of an ECP PoP, e.g. \"sjc\" which stands for the PoP at San Jose, US."
                    },
                    "replicas": {
                      "type": "integer",
                      "description": "Number of pod instances that you would like to maintain for your application at an ECP PoP",
                      "minimum": 1
                    }
                  },
                  "required": [
                    "name",
                    "replicas"
                  ]
                }
              }
            }
          }
        },
        "required": [
          "apiVersion",
          "Kind",
          "metadata",
          "spec"
        ]
      },
      "application.spec.loadbalancer4": {
        "title": "App Exposure",
        "type": "object",
        "description": "LoadBalancer4",
        "properties": {
          "apiVersion": {
            "type": "string",
            "enum": [
              "v1"
            ]
          },
          "Kind": {
            "type": "string",
            "enum": [
              "LoadBalancer4"
            ],
            "description": "Use \"LoadBalancer4\", an ECP custom resource, to expose your application"
          },
          "metadata": {
            "type": "object",
            "required": [
              "namespace"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of a \"LoadBalancer4\" object. Must be the same as the query param \"appName\"."
              },
              "namespace": {
                "type": "string",
                "description": "The kubernetes namespace created for your ECP account"
              }
            }
          },
          "spec": {
            "type": "object",
            "required": [
              "listeners"
            ],
            "properties": {
              "listeners": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of a listener. Must be unique across a \"LoadBalancer4\" obejct. Allows lower-case letters, digits and hyphens only. Must not start or end with a hyphen, and must be less than 63 characters."
                    },
                    "backendSelector": {
                      "type": "object",
                      "description": "Key value pair that is used to match target pods as backend of the LoadBalancer4."
                    },
                    "listenerPort": {
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 65535,
                      "description": "Number of port that the LoadBalancer4 listens on"
                    },
                    "backendPort": {
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 65535,
                      "description": "Number of the backend pods' port that receives traffic forwarded by the LoadBalancer4. Must be the same as \"listenerPort\"."
                    },
                    "protocol": {
                      "type": "string",
                      "enum": [
                        "TCP",
                        "UDP"
                      ]
                    },
                    "scheduler": {
                      "type": "string",
                      "enum": [
                        "rr",
                        "lc",
                        "sh"
                      ],
                      "description": "Load balancing algorithm used to make load balancing decision. Can be \"rr\" (round robin), \"lc\" (least conncetions) or \"sh\" (Source Hash). Defaults to \"rr\"."
                    },
                    "healthCheck": {
                      "type": "boolean",
                      "default": false,
                      "description": "Periodic health check of backend pods. Pod that fails health check will be removed by the load balancer."
                    },
                    "healthCheckType": {
                      "type": "string",
                      "enum": [
                        "TCP",
                        "HTTP"
                      ],
                      "description": "If \"protocol\" is set to \"TCP\", the health check type can be \"TCP\" or \"HTTP\". If the \"protocol\" field is set to \"UDP\", no health check can be configured."
                    },
                    "healthCheckDomain": {
                      "type": "string",
                      "description": "Host name to connect to. Acceptable only when the health check type is \"HTTP\"."
                    },
                    "healthCheckURI": {
                      "type": "string",
                      "description": "Path to access. Acceptable only when the health check type is \"HTTP\"."
                    },
                    "healthCheckConnectPort": {
                      "type": "integer",
                      "description": "Number of the port to access on the backend pods. Set to same as the \"backendPort\" by default.",
                      "minimum": 1,
                      "maximum": 65535
                    },
                    "healthCheckInterval": {
                      "type": "integer",
                      "default": 1,
                      "description": "How often (in seconds) to perform the health check",
                      "minimum": 1,
                      "maximum": 5
                    }
                  },
                  "required": [
                    "name",
                    "backendSelector",
                    "listenerPort",
                    "backendPort"
                  ]
                }
              }
            }
          }
        },
        "required": [
          "apiVersion",
          "Kind",
          "metadata",
          "spec"
        ]
      },
      "application.spec.statefulset": {
        "title": "StatefulSet",
        "type": "object",
        "description": "StatefulSet",
        "x-examples": {
          "example-1": {}
        },
        "properties": {
          "apiVersion": {
            "type": "string",
            "enum": [
              "apps/v1"
            ]
          },
          "Kind": {
            "type": "string",
            "description": "Use \"StatefulSet\" as pod controller if your application needs to use persistent volumes",
            "enum": [
              "StatefulSet"
            ]
          },
          "metadata": {
            "type": "object",
            "required": [
              "namespace"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of a \"StatefulSet\" resource. Must be the same as the query param \"appName\"."
              },
              "namespace": {
                "type": "string",
                "description": "The kubernetes namespace created for your ECP account"
              }
            }
          },
          "spec": {
            "type": "object",
            "description": "This document only focuses on some typical configs of  a StatefulSet object. For more about how to specify a StatefulSet, please refer to the official kubernetes API reference https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.16/#statefulset-v1-apps",
            "required": [
              "selector",
              "template"
            ],
            "properties": {
              "selector": {
                "type": "object",
                "description": "A label query over pods. Must match the pod template's labels.",
                "required": [
                  "matchLabels"
                ],
                "properties": {
                  "matchLabels": {
                    "type": "object",
                    "description": "A map of {key,value} pairs"
                  }
                }
              },
              "template": {
                "type": "object",
                "description": "Template of the pods that will be created by the StatefulSet",
                "required": [
                  "metadata",
                  "spec"
                ],
                "properties": {
                  "metadata": {
                    "type": "object",
                    "required": [
                      "labels"
                    ],
                    "properties": {
                      "labels": {
                        "type": "object",
                        "description": "Map of string keys and values that can be used to organize and categorize pods. Must match selector of the StatefulSet"
                      },
                      "annotations": {
                        "type": "object",
                        "description": "An unstructured key value map stored with a pod",
                        "properties": {
                          "quantil.com/enableExternalIP": {
                            "type": "boolean",
                            "default": false,
                            "description": "Set this annotation to true if you would like to have a public IPv4 address for the pod. Alternatively, you can create an ECP custom \"LoadBalancer4\" object for your ECP application to expose the pod. "
                          },
                          "quantil.com/enableIpv6ExternalIP": {
                            "type": "boolean",
                            "default": false,
                            "description": "Set this annotation to true if you would like to have a public IPv6 address for the pod. Alternatively, you can create an ECP custom \"LoadBalancer4\" object for your ECP application to expose the pod. "
                          }
                        }
                      }
                    }
                  },
                  "spec": {
                    "type": "object",
                    "required": [
                      "containers"
                    ],
                    "description": "Specification of desired behavior of the pod",
                    "properties": {
                      "containers": {
                        "type": "array",
                        "description": "List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "image": {
                              "type": "string",
                              "description": "Docker image name"
                            },
                            "name": {
                              "type": "string",
                              "description": "Name of the container specified as a DNS_LABEL"
                            },
                            "resources": {
                              "type": "object",
                              "required": [
                                "limits"
                              ],
                              "description": "Compute Resources required by this container. Cannot be updated.",
                              "properties": {
                                "limits": {
                                  "type": "object",
                                  "required": [
                                    "cpu",
                                    "memory"
                                  ],
                                  "description": "The maximum amount of compute resources required",
                                  "properties": {
                                    "cpu": {
                                      "type": "string",
                                      "description": "The amount of CPU required. Minimum 0.05 core. The sum of limits.cpu required by all containers in the pod must not exceed 24 cores."
                                    },
                                    "memory": {
                                      "type": "string",
                                      "description": "The amount of memory required. Minimum 50 MB. The sum of limits.memory required by all containers in the pod must not exceed 128 GB."
                                    }
                                  }
                                }
                              }
                            },
                            "volumeMounts": {
                              "type": "array",
                              "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "This must match the Name of a Volume"
                                  },
                                  "mountPath": {
                                    "type": "string",
                                    "description": "Path within the container at which the volume should be mounted. Must not contain ':'."
                                  }
                                }
                              }
                            }
                          },
                          "required": [
                            "image",
                            "name",
                            "resources"
                          ]
                        }
                      }
                    }
                  }
                }
              },
              "volumeClaimTemplates": {
                "type": "array",
                "description": "A list of persistent volume claims that pods are allowed to reference. Every claim in this list must have at least one matching (by name) volumeMount in one container in the pod template.",
                "items": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Name of a volume claim"
                        },
                        "annotations": {
                          "type": "object",
                          "properties": {
                            "volume.beta.kubernetes.io/storage-class": {
                              "type": "string",
                              "enum": [
                                "local-ssd",
                                "persist-ssd"
                              ],
                              "description": "Specifiy the storageClass of a volume claim. Options include \"local-ssd\" and \"persist-ssd\". \"local-ssd\" means local persistent SSD storage, in which case data will be lost when a pod is rescheduled to another node. \"persist-ssd\" means remote persistent SSD storage, in which case data will be persisted even when the pod is rescheduled."
                            }
                          }
                        }
                      }
                    },
                    "spec": {
                      "type": "object",
                      "properties": {
                        "accessModes": {
                          "type": "array",
                          "description": "The desired access modes the volume claim should have. Should be \"ReadWriteOnce\".",
                          "items": {
                            "type": "string"
                          }
                        },
                        "resources": {
                          "type": "object",
                          "description": "The resources the volume claim should have",
                          "properties": {
                            "requests": {
                              "type": "object",
                              "description": "The minimum amount of resources required",
                              "properties": {
                                "storage": {
                                  "type": "string",
                                  "description": "The storage capacity required. Must be not less than 500MB and not higher than 100GB."
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "required": [
          "apiVersion",
          "Kind",
          "metadata",
          "spec"
        ]
      },
      "application.spec": {
        "title": "",
        "description": "",
        "type": "array",
        "items": {
          "anyOf": [
            {
              "title": "App Configuration",
              "oneOf": [
                {
                  "title": "ReplicaSet",
                  "type": "object",
                  "x-examples": {
                    "example-1": {}
                  },
                  "description": "ReplicaSet",
                  "properties": {
                    "apiVersion": {
                      "type": "string",
                      "enum": [
                        "apps/v1"
                      ]
                    },
                    "Kind": {
                      "type": "string",
                      "description": "Use \"ReplicaSet\" as pod controller if your application does not require persistent storage",
                      "enum": [
                        "ReplicaSet"
                      ]
                    },
                    "metadata": {
                      "type": "object",
                      "required": [
                        "namespace"
                      ],
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Name of a \"StatefulSet\" resource. Must be the same as the query param \"appName\"."
                        },
                        "namespace": {
                          "type": "string",
                          "description": "The kubernetes namespace created for your ECP account"
                        }
                      }
                    },
                    "spec": {
                      "type": "object",
                      "description": "This document only focuses on some typical configs of  a ReplicaSet object. For more about how to specify a ReplicaSet, please refer to the official kubernetes API reference https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.16/#replicaset-v1-apps",
                      "required": [
                        "selector",
                        "template"
                      ],
                      "properties": {
                        "selector": {
                          "type": "object",
                          "description": "A label query over pods. Must match the pod template's labels.",
                          "required": [
                            "matchLabels"
                          ],
                          "properties": {
                            "matchLabels": {
                              "type": "object",
                              "description": "A map of {key,value} pairs"
                            }
                          }
                        },
                        "template": {
                          "type": "object",
                          "description": "Template of the pods that will be created by the ReplicaSet",
                          "required": [
                            "metadata",
                            "spec"
                          ],
                          "properties": {
                            "metadata": {
                              "type": "object",
                              "required": [
                                "labels"
                              ],
                              "properties": {
                                "labels": {
                                  "type": "object",
                                  "description": "Map of string keys and values that can be used to organize and categorize pods. Must match selector of the ReplicaSet"
                                },
                                "annotations": {
                                  "type": "object",
                                  "description": "An unstructured key value map stored with a pod",
                                  "properties": {
                                    "quantil.com/enableExternalIP": {
                                      "type": "boolean",
                                      "default": false,
                                      "description": "Set this annotation to true if you would like to have a public IPv4 address for the pod. Alternatively, you can create an ECP custom \"LoadBalancer4\" object for your ECP application to expose the pod. "
                                    },
                                    "quantil.com/enableIpv6ExternalIP": {
                                      "type": "boolean",
                                      "default": false,
                                      "description": "Set this annotation to true if you would like to have a public IPv6 address for the pod. Alternatively, you can create an ECP custom \"LoadBalancer4\" object for your ECP application to expose the pod. "
                                    }
                                  }
                                }
                              }
                            },
                            "spec": {
                              "type": "object",
                              "description": "Specification of desired behavior of the pod",
                              "required": [
                                "containers"
                              ],
                              "properties": {
                                "containers": {
                                  "type": "array",
                                  "description": "List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "image": {
                                        "type": "string",
                                        "description": "Docker image name"
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "Name of the container specified as a DNS_LABEL"
                                      },
                                      "resources": {
                                        "type": "object",
                                        "description": "Compute Resources required by this container. Cannot be updated.",
                                        "required": [
                                          "limits"
                                        ],
                                        "properties": {
                                          "limits": {
                                            "type": "object",
                                            "description": "The maximum amount of compute resources required",
                                            "required": [
                                              "cpu",
                                              "memory"
                                            ],
                                            "properties": {
                                              "cpu": {
                                                "type": "string",
                                                "description": "The amount of CPU required. Minimum 0.05 core. The sum of limits.cpu required by all containers in the pod must not exceed 24 cores."
                                              },
                                              "memory": {
                                                "type": "string",
                                                "description": "The amount of memory required. Minimum 50 MB. The sum of limits.memory required by all containers in the pod must not exceed 128 GB."
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "required": [
                                      "image",
                                      "name",
                                      "resources"
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "apiVersion",
                    "Kind",
                    "metadata",
                    "spec"
                  ]
                },
                {
                  "title": "StatefulSet",
                  "type": "object",
                  "description": "StatefulSet",
                  "x-examples": {
                    "example-1": {}
                  },
                  "properties": {
                    "apiVersion": {
                      "type": "string",
                      "enum": [
                        "apps/v1"
                      ]
                    },
                    "Kind": {
                      "type": "string",
                      "description": "Use \"StatefulSet\" as pod controller if your application needs to use persistent volumes",
                      "enum": [
                        "StatefulSet"
                      ]
                    },
                    "metadata": {
                      "type": "object",
                      "required": [
                        "namespace"
                      ],
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Name of a \"StatefulSet\" resource. Must be the same as the query param \"appName\"."
                        },
                        "namespace": {
                          "type": "string",
                          "description": "The kubernetes namespace created for your ECP account"
                        }
                      }
                    },
                    "spec": {
                      "type": "object",
                      "description": "This document only focuses on some typical configs of  a StatefulSet object. For more about how to specify a StatefulSet, please refer to the official kubernetes API reference https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.16/#statefulset-v1-apps",
                      "required": [
                        "selector",
                        "template"
                      ],
                      "properties": {
                        "selector": {
                          "type": "object",
                          "description": "A label query over pods. Must match the pod template's labels.",
                          "required": [
                            "matchLabels"
                          ],
                          "properties": {
                            "matchLabels": {
                              "type": "object",
                              "description": "A map of {key,value} pairs"
                            }
                          }
                        },
                        "template": {
                          "type": "object",
                          "description": "Template of the pods that will be created by the StatefulSet",
                          "required": [
                            "metadata",
                            "spec"
                          ],
                          "properties": {
                            "metadata": {
                              "type": "object",
                              "required": [
                                "labels"
                              ],
                              "properties": {
                                "labels": {
                                  "type": "object",
                                  "description": "Map of string keys and values that can be used to organize and categorize pods. Must match selector of the StatefulSet"
                                },
                                "annotations": {
                                  "type": "object",
                                  "description": "An unstructured key value map stored with a pod",
                                  "properties": {
                                    "quantil.com/enableExternalIP": {
                                      "type": "boolean",
                                      "default": false,
                                      "description": "Set this annotation to true if you would like to have a public IPv4 address for the pod. Alternatively, you can create an ECP custom \"LoadBalancer4\" object for your ECP application to expose the pod. "
                                    },
                                    "quantil.com/enableIpv6ExternalIP": {
                                      "type": "boolean",
                                      "default": false,
                                      "description": "Set this annotation to true if you would like to have a public IPv6 address for the pod. Alternatively, you can create an ECP custom \"LoadBalancer4\" object for your ECP application to expose the pod. "
                                    }
                                  }
                                }
                              }
                            },
                            "spec": {
                              "type": "object",
                              "required": [
                                "containers"
                              ],
                              "description": "Specification of desired behavior of the pod",
                              "properties": {
                                "containers": {
                                  "type": "array",
                                  "description": "List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "image": {
                                        "type": "string",
                                        "description": "Docker image name"
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "Name of the container specified as a DNS_LABEL"
                                      },
                                      "resources": {
                                        "type": "object",
                                        "required": [
                                          "limits"
                                        ],
                                        "description": "Compute Resources required by this container. Cannot be updated.",
                                        "properties": {
                                          "limits": {
                                            "type": "object",
                                            "required": [
                                              "cpu",
                                              "memory"
                                            ],
                                            "description": "The maximum amount of compute resources required",
                                            "properties": {
                                              "cpu": {
                                                "type": "string",
                                                "description": "The amount of CPU required. Minimum 0.05 core. The sum of limits.cpu required by all containers in the pod must not exceed 24 cores."
                                              },
                                              "memory": {
                                                "type": "string",
                                                "description": "The amount of memory required. Minimum 50 MB. The sum of limits.memory required by all containers in the pod must not exceed 128 GB."
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "volumeMounts": {
                                        "type": "array",
                                        "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "name": {
                                              "type": "string",
                                              "description": "This must match the Name of a Volume"
                                            },
                                            "mountPath": {
                                              "type": "string",
                                              "description": "Path within the container at which the volume should be mounted. Must not contain ':'."
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "required": [
                                      "image",
                                      "name",
                                      "resources"
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        },
                        "volumeClaimTemplates": {
                          "type": "array",
                          "description": "A list of persistent volume claims that pods are allowed to reference. Every claim in this list must have at least one matching (by name) volumeMount in one container in the pod template.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "metadata": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "Name of a volume claim"
                                  },
                                  "annotations": {
                                    "type": "object",
                                    "properties": {
                                      "volume.beta.kubernetes.io/storage-class": {
                                        "type": "string",
                                        "enum": [
                                          "local-ssd",
                                          "persist-ssd"
                                        ],
                                        "description": "Specifiy the storageClass of a volume claim. Options include \"local-ssd\" and \"persist-ssd\". \"local-ssd\" means local persistent SSD storage, in which case data will be lost when a pod is rescheduled to another node. \"persist-ssd\" means remote persistent SSD storage, in which case data will be persisted even when the pod is rescheduled."
                                      }
                                    }
                                  }
                                }
                              },
                              "spec": {
                                "type": "object",
                                "properties": {
                                  "accessModes": {
                                    "type": "array",
                                    "description": "The desired access modes the volume claim should have. Should be \"ReadWriteOnce\".",
                                    "items": {
                                      "type": "string"
                                    }
                                  },
                                  "resources": {
                                    "type": "object",
                                    "description": "The resources the volume claim should have",
                                    "properties": {
                                      "requests": {
                                        "type": "object",
                                        "description": "The minimum amount of resources required",
                                        "properties": {
                                          "storage": {
                                            "type": "string",
                                            "description": "The storage capacity required. Must be not less than 500MB and not higher than 100GB."
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "apiVersion",
                    "Kind",
                    "metadata",
                    "spec"
                  ]
                }
              ]
            },
            {
              "title": "App Exposure",
              "type": "object",
              "description": "LoadBalancer4",
              "properties": {
                "apiVersion": {
                  "type": "string",
                  "enum": [
                    "v1"
                  ]
                },
                "Kind": {
                  "type": "string",
                  "enum": [
                    "LoadBalancer4"
                  ],
                  "description": "Use \"LoadBalancer4\", an ECP custom resource, to expose your application"
                },
                "metadata": {
                  "type": "object",
                  "required": [
                    "namespace"
                  ],
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of a \"LoadBalancer4\" object. Must be the same as the query param \"appName\"."
                    },
                    "namespace": {
                      "type": "string",
                      "description": "The kubernetes namespace created for your ECP account"
                    }
                  }
                },
                "spec": {
                  "type": "object",
                  "required": [
                    "listeners"
                  ],
                  "properties": {
                    "listeners": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of a listener. Must be unique across a \"LoadBalancer4\" obejct. Allows lower-case letters, digits and hyphens only. Must not start or end with a hyphen, and must be less than 63 characters."
                          },
                          "backendSelector": {
                            "type": "object",
                            "description": "Key value pair that is used to match target pods as backend of the LoadBalancer4."
                          },
                          "listenerPort": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 65535,
                            "description": "Number of port that the LoadBalancer4 listens on"
                          },
                          "backendPort": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 65535,
                            "description": "Number of the backend pods' port that receives traffic forwarded by the LoadBalancer4. Must be the same as \"listenerPort\"."
                          },
                          "protocol": {
                            "type": "string",
                            "enum": [
                              "TCP",
                              "UDP"
                            ]
                          },
                          "scheduler": {
                            "type": "string",
                            "enum": [
                              "rr",
                              "lc",
                              "sh"
                            ],
                            "description": "Load balancing algorithm used to make load balancing decision. Can be \"rr\" (round robin), \"lc\" (least conncetions) or \"sh\" (Source Hash). Defaults to \"rr\"."
                          },
                          "healthCheck": {
                            "type": "boolean",
                            "default": false,
                            "description": "Periodic health check of backend pods. Pod that fails health check will be removed by the load balancer."
                          },
                          "healthCheckType": {
                            "type": "string",
                            "enum": [
                              "TCP",
                              "HTTP"
                            ],
                            "description": "If \"protocol\" is set to \"TCP\", the health check type can be \"TCP\" or \"HTTP\". If the \"protocol\" field is set to \"UDP\", no health check can be configured."
                          },
                          "healthCheckDomain": {
                            "type": "string",
                            "description": "Host name to connect to. Acceptable only when the health check type is \"HTTP\"."
                          },
                          "healthCheckURI": {
                            "type": "string",
                            "description": "Path to access. Acceptable only when the health check type is \"HTTP\"."
                          },
                          "healthCheckConnectPort": {
                            "type": "integer",
                            "description": "Number of the port to access on the backend pods. Set to same as the \"backendPort\" by default.",
                            "minimum": 1,
                            "maximum": 65535
                          },
                          "healthCheckInterval": {
                            "type": "integer",
                            "default": 1,
                            "description": "How often (in seconds) to perform the health check",
                            "minimum": 1,
                            "maximum": 5
                          }
                        },
                        "required": [
                          "name",
                          "backendSelector",
                          "listenerPort",
                          "backendPort"
                        ]
                      }
                    }
                  }
                }
              },
              "required": [
                "apiVersion",
                "Kind",
                "metadata",
                "spec"
              ]
            },
            {
              "title": "App Distribution",
              "oneOf": [
                {
                  "title": "RegionPreference",
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "apiVersion": "v1",
                      "kind": "RegionPreference",
                      "metadata": {
                        "name": "myapp",
                        "namespace": "demo"
                      },
                      "spec": {
                        "regions": [
                          {
                            "name": "NA-WEST",
                            "replicas": 6
                          },
                          {
                            "name": "EU",
                            "replicas": 4
                          }
                        ]
                      }
                    }
                  },
                  "description": "Region",
                  "properties": {
                    "apiVersion": {
                      "type": "string",
                      "enum": [
                        "v1"
                      ]
                    },
                    "Kind": {
                      "type": "string",
                      "description": "Use \"RegionPreference\", an ECP custom resource, to specify ECP regions where you would like to have your application distributed. ",
                      "enum": [
                        "RegionPreference"
                      ]
                    },
                    "metadata": {
                      "type": "object",
                      "required": [
                        "namespace"
                      ],
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Name of a \"RegionPreference\" resource. Must be the same as the query param \"appName\"."
                        },
                        "namespace": {
                          "type": "string",
                          "description": "The kubernetes namespace created for your ECP account"
                        }
                      }
                    },
                    "spec": {
                      "type": "object",
                      "required": [
                        "regions"
                      ],
                      "properties": {
                        "regions": {
                          "type": "array",
                          "description": "Array of target ECP regions to distribute your application",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "Code of an ECP region, e.g. \"NA-WEST\" which stands for west of North America."
                              },
                              "replicas": {
                                "type": "integer",
                                "description": "The total number of pod instances that you would like to maintain for your application within an ECP region",
                                "minimum": 1
                              }
                            },
                            "required": [
                              "name",
                              "replicas"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "apiVersion",
                    "Kind",
                    "metadata",
                    "spec"
                  ]
                },
                {
                  "title": "Location",
                  "type": "object",
                  "description": "Location",
                  "x-examples": {
                    "example-1": {
                      "apiVersion": "v1",
                      "kind": "Location",
                      "metadata": {
                        "name": "myapp",
                        "namespace": "demo"
                      },
                      "spec": {
                        "locations": [
                          {
                            "name": "sjc",
                            "replicas": 2
                          },
                          {
                            "name": "ams",
                            "replicas": 1
                          }
                        ]
                      }
                    }
                  },
                  "properties": {
                    "apiVersion": {
                      "type": "string",
                      "enum": [
                        "v1"
                      ]
                    },
                    "Kind": {
                      "type": "string",
                      "enum": [
                        "Location"
                      ],
                      "description": "Use \"Location\", an ECP custom resource, to pick ECP PoPs where you would like to run your application. "
                    },
                    "metadata": {
                      "type": "object",
                      "required": [
                        "namespace"
                      ],
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Name of a \"Location\" resource. Must be the same as the query param \"appName\"."
                        },
                        "namespace": {
                          "type": "string",
                          "description": "The kubernetes namespace created for your ECP account"
                        }
                      }
                    },
                    "spec": {
                      "type": "object",
                      "required": [
                        "locations"
                      ],
                      "properties": {
                        "locations": {
                          "type": "array",
                          "description": "Array of target ECP PoPs to run your application",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "Code of an ECP PoP, e.g. \"sjc\" which stands for the PoP at San Jose, US."
                              },
                              "replicas": {
                                "type": "integer",
                                "description": "Number of pod instances that you would like to maintain for your application at an ECP PoP",
                                "minimum": 1
                              }
                            },
                            "required": [
                              "name",
                              "replicas"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "apiVersion",
                    "Kind",
                    "metadata",
                    "spec"
                  ]
                }
              ]
            }
          ]
        }
      },
      "application.spec.replicaset": {
        "title": "ReplicaSet",
        "type": "object",
        "x-examples": {
          "example-1": {}
        },
        "description": "ReplicaSet",
        "properties": {
          "apiVersion": {
            "type": "string",
            "enum": [
              "apps/v1"
            ]
          },
          "Kind": {
            "type": "string",
            "description": "Use \"ReplicaSet\" as pod controller if your application does not require persistent storage",
            "enum": [
              "ReplicaSet"
            ]
          },
          "metadata": {
            "type": "object",
            "required": [
              "namespace"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of a \"StatefulSet\" resource. Must be the same as the query param \"appName\"."
              },
              "namespace": {
                "type": "string",
                "description": "The kubernetes namespace created for your ECP account"
              }
            }
          },
          "spec": {
            "type": "object",
            "description": "This document only focuses on some typical configs of  a ReplicaSet object. For more about how to specify a ReplicaSet, please refer to the official kubernetes API reference https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.16/#replicaset-v1-apps",
            "required": [
              "selector",
              "template"
            ],
            "properties": {
              "selector": {
                "type": "object",
                "description": "A label query over pods. Must match the pod template's labels.",
                "required": [
                  "matchLabels"
                ],
                "properties": {
                  "matchLabels": {
                    "type": "object",
                    "description": "A map of {key,value} pairs"
                  }
                }
              },
              "template": {
                "type": "object",
                "description": "Template of the pods that will be created by the ReplicaSet",
                "required": [
                  "metadata",
                  "spec"
                ],
                "properties": {
                  "metadata": {
                    "type": "object",
                    "required": [
                      "labels"
                    ],
                    "properties": {
                      "labels": {
                        "type": "object",
                        "description": "Map of string keys and values that can be used to organize and categorize pods. Must match selector of the ReplicaSet"
                      },
                      "annotations": {
                        "type": "object",
                        "description": "An unstructured key value map stored with a pod",
                        "properties": {
                          "quantil.com/enableExternalIP": {
                            "type": "boolean",
                            "default": false,
                            "description": "Set this annotation to true if you would like to have a public IPv4 address for the pod. Alternatively, you can create an ECP custom \"LoadBalancer4\" object for your ECP application to expose the pod. "
                          },
                          "quantil.com/enableIpv6ExternalIP": {
                            "type": "boolean",
                            "default": false,
                            "description": "Set this annotation to true if you would like to have a public IPv6 address for the pod. Alternatively, you can create an ECP custom \"LoadBalancer4\" object for your ECP application to expose the pod. "
                          }
                        }
                      }
                    }
                  },
                  "spec": {
                    "type": "object",
                    "description": "Specification of desired behavior of the pod",
                    "required": [
                      "containers"
                    ],
                    "properties": {
                      "containers": {
                        "type": "array",
                        "description": "List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "image": {
                              "type": "string",
                              "description": "Docker image name"
                            },
                            "name": {
                              "type": "string",
                              "description": "Name of the container specified as a DNS_LABEL"
                            },
                            "resources": {
                              "type": "object",
                              "description": "Compute Resources required by this container. Cannot be updated.",
                              "required": [
                                "limits"
                              ],
                              "properties": {
                                "limits": {
                                  "type": "object",
                                  "description": "The maximum amount of compute resources required",
                                  "required": [
                                    "cpu",
                                    "memory"
                                  ],
                                  "properties": {
                                    "cpu": {
                                      "type": "string",
                                      "description": "The amount of CPU required. Minimum 0.05 core. The sum of limits.cpu required by all containers in the pod must not exceed 24 cores."
                                    },
                                    "memory": {
                                      "type": "string",
                                      "description": "The amount of memory required. Minimum 50 MB. The sum of limits.memory required by all containers in the pod must not exceed 128 GB."
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "required": [
                            "image",
                            "name",
                            "resources"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "required": [
          "apiVersion",
          "Kind",
          "metadata",
          "spec"
        ]
      },
      "application.spec.target": {
        "title": "App Distribution",
        "oneOf": [
          {
            "title": "RegionPreference",
            "type": "object",
            "x-examples": {
              "example-1": {
                "apiVersion": "v1",
                "kind": "RegionPreference",
                "metadata": {
                  "name": "myapp",
                  "namespace": "demo"
                },
                "spec": {
                  "regions": [
                    {
                      "name": "NA-WEST",
                      "replicas": 6
                    },
                    {
                      "name": "EU",
                      "replicas": 4
                    }
                  ]
                }
              }
            },
            "description": "Region",
            "properties": {
              "apiVersion": {
                "type": "string",
                "enum": [
                  "v1"
                ]
              },
              "Kind": {
                "type": "string",
                "description": "Use \"RegionPreference\", an ECP custom resource, to specify ECP regions where you would like to have your application distributed. ",
                "enum": [
                  "RegionPreference"
                ]
              },
              "metadata": {
                "type": "object",
                "required": [
                  "namespace"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of a \"RegionPreference\" resource. Must be the same as the query param \"appName\"."
                  },
                  "namespace": {
                    "type": "string",
                    "description": "The kubernetes namespace created for your ECP account"
                  }
                }
              },
              "spec": {
                "type": "object",
                "required": [
                  "regions"
                ],
                "properties": {
                  "regions": {
                    "type": "array",
                    "description": "Array of target ECP regions to distribute your application",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Code of an ECP region, e.g. \"NA-WEST\" which stands for west of North America."
                        },
                        "replicas": {
                          "type": "integer",
                          "description": "The total number of pod instances that you would like to maintain for your application within an ECP region",
                          "minimum": 1
                        }
                      },
                      "required": [
                        "name",
                        "replicas"
                      ]
                    }
                  }
                }
              }
            },
            "required": [
              "apiVersion",
              "Kind",
              "metadata",
              "spec"
            ]
          },
          {
            "title": "Location",
            "type": "object",
            "description": "Location",
            "x-examples": {
              "example-1": {
                "apiVersion": "v1",
                "kind": "Location",
                "metadata": {
                  "name": "myapp",
                  "namespace": "demo"
                },
                "spec": {
                  "locations": [
                    {
                      "name": "sjc",
                      "replicas": 2
                    },
                    {
                      "name": "ams",
                      "replicas": 1
                    }
                  ]
                }
              }
            },
            "properties": {
              "apiVersion": {
                "type": "string",
                "enum": [
                  "v1"
                ]
              },
              "Kind": {
                "type": "string",
                "enum": [
                  "Location"
                ],
                "description": "Use \"Location\", an ECP custom resource, to pick ECP PoPs where you would like to run your application. "
              },
              "metadata": {
                "type": "object",
                "required": [
                  "namespace"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of a \"Location\" resource. Must be the same as the query param \"appName\"."
                  },
                  "namespace": {
                    "type": "string",
                    "description": "The kubernetes namespace created for your ECP account"
                  }
                }
              },
              "spec": {
                "type": "object",
                "required": [
                  "locations"
                ],
                "properties": {
                  "locations": {
                    "type": "array",
                    "description": "Array of target ECP PoPs to run your application",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Code of an ECP PoP, e.g. \"sjc\" which stands for the PoP at San Jose, US."
                        },
                        "replicas": {
                          "type": "integer",
                          "description": "Number of pod instances that you would like to maintain for your application at an ECP PoP",
                          "minimum": 1
                        }
                      },
                      "required": [
                        "name",
                        "replicas"
                      ]
                    }
                  }
                }
              }
            },
            "required": [
              "apiVersion",
              "Kind",
              "metadata",
              "spec"
            ]
          }
        ]
      },
      "application.spec.workload": {
        "title": "App Configuration",
        "oneOf": [
          {
            "title": "ReplicaSet",
            "type": "object",
            "x-examples": {
              "example-1": {}
            },
            "description": "ReplicaSet",
            "properties": {
              "apiVersion": {
                "type": "string",
                "enum": [
                  "apps/v1"
                ]
              },
              "Kind": {
                "type": "string",
                "description": "Use \"ReplicaSet\" as pod controller if your application does not require persistent storage",
                "enum": [
                  "ReplicaSet"
                ]
              },
              "metadata": {
                "type": "object",
                "required": [
                  "namespace"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of a \"StatefulSet\" resource. Must be the same as the query param \"appName\"."
                  },
                  "namespace": {
                    "type": "string",
                    "description": "The kubernetes namespace created for your ECP account"
                  }
                }
              },
              "spec": {
                "type": "object",
                "description": "This document only focuses on some typical configs of  a ReplicaSet object. For more about how to specify a ReplicaSet, please refer to the official kubernetes API reference https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.16/#replicaset-v1-apps",
                "required": [
                  "selector",
                  "template"
                ],
                "properties": {
                  "selector": {
                    "type": "object",
                    "description": "A label query over pods. Must match the pod template's labels.",
                    "required": [
                      "matchLabels"
                    ],
                    "properties": {
                      "matchLabels": {
                        "type": "object",
                        "description": "A map of {key,value} pairs"
                      }
                    }
                  },
                  "template": {
                    "type": "object",
                    "description": "Template of the pods that will be created by the ReplicaSet",
                    "required": [
                      "metadata",
                      "spec"
                    ],
                    "properties": {
                      "metadata": {
                        "type": "object",
                        "required": [
                          "labels"
                        ],
                        "properties": {
                          "labels": {
                            "type": "object",
                            "description": "Map of string keys and values that can be used to organize and categorize pods. Must match selector of the ReplicaSet"
                          },
                          "annotations": {
                            "type": "object",
                            "description": "An unstructured key value map stored with a pod",
                            "properties": {
                              "quantil.com/enableExternalIP": {
                                "type": "boolean",
                                "default": false,
                                "description": "Set this annotation to true if you would like to have a public IPv4 address for the pod. Alternatively, you can create an ECP custom \"LoadBalancer4\" object for your ECP application to expose the pod. "
                              },
                              "quantil.com/enableIpv6ExternalIP": {
                                "type": "boolean",
                                "default": false,
                                "description": "Set this annotation to true if you would like to have a public IPv6 address for the pod. Alternatively, you can create an ECP custom \"LoadBalancer4\" object for your ECP application to expose the pod. "
                              }
                            }
                          }
                        }
                      },
                      "spec": {
                        "type": "object",
                        "description": "Specification of desired behavior of the pod",
                        "required": [
                          "containers"
                        ],
                        "properties": {
                          "containers": {
                            "type": "array",
                            "description": "List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "image": {
                                  "type": "string",
                                  "description": "Docker image name"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Name of the container specified as a DNS_LABEL"
                                },
                                "resources": {
                                  "type": "object",
                                  "description": "Compute Resources required by this container. Cannot be updated.",
                                  "required": [
                                    "limits"
                                  ],
                                  "properties": {
                                    "limits": {
                                      "type": "object",
                                      "description": "The maximum amount of compute resources required",
                                      "required": [
                                        "cpu",
                                        "memory"
                                      ],
                                      "properties": {
                                        "cpu": {
                                          "type": "string",
                                          "description": "The amount of CPU required. Minimum 0.05 core. The sum of limits.cpu required by all containers in the pod must not exceed 24 cores."
                                        },
                                        "memory": {
                                          "type": "string",
                                          "description": "The amount of memory required. Minimum 50 MB. The sum of limits.memory required by all containers in the pod must not exceed 128 GB."
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "required": [
                                "image",
                                "name",
                                "resources"
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "required": [
              "apiVersion",
              "Kind",
              "metadata",
              "spec"
            ]
          },
          {
            "title": "StatefulSet",
            "type": "object",
            "description": "StatefulSet",
            "x-examples": {
              "example-1": {}
            },
            "properties": {
              "apiVersion": {
                "type": "string",
                "enum": [
                  "apps/v1"
                ]
              },
              "Kind": {
                "type": "string",
                "description": "Use \"StatefulSet\" as pod controller if your application needs to use persistent volumes",
                "enum": [
                  "StatefulSet"
                ]
              },
              "metadata": {
                "type": "object",
                "required": [
                  "namespace"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of a \"StatefulSet\" resource. Must be the same as the query param \"appName\"."
                  },
                  "namespace": {
                    "type": "string",
                    "description": "The kubernetes namespace created for your ECP account"
                  }
                }
              },
              "spec": {
                "type": "object",
                "description": "This document only focuses on some typical configs of  a StatefulSet object. For more about how to specify a StatefulSet, please refer to the official kubernetes API reference https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.16/#statefulset-v1-apps",
                "required": [
                  "selector",
                  "template"
                ],
                "properties": {
                  "selector": {
                    "type": "object",
                    "description": "A label query over pods. Must match the pod template's labels.",
                    "required": [
                      "matchLabels"
                    ],
                    "properties": {
                      "matchLabels": {
                        "type": "object",
                        "description": "A map of {key,value} pairs"
                      }
                    }
                  },
                  "template": {
                    "type": "object",
                    "description": "Template of the pods that will be created by the StatefulSet",
                    "required": [
                      "metadata",
                      "spec"
                    ],
                    "properties": {
                      "metadata": {
                        "type": "object",
                        "required": [
                          "labels"
                        ],
                        "properties": {
                          "labels": {
                            "type": "object",
                            "description": "Map of string keys and values that can be used to organize and categorize pods. Must match selector of the StatefulSet"
                          },
                          "annotations": {
                            "type": "object",
                            "description": "An unstructured key value map stored with a pod",
                            "properties": {
                              "quantil.com/enableExternalIP": {
                                "type": "boolean",
                                "default": false,
                                "description": "Set this annotation to true if you would like to have a public IPv4 address for the pod. Alternatively, you can create an ECP custom \"LoadBalancer4\" object for your ECP application to expose the pod. "
                              },
                              "quantil.com/enableIpv6ExternalIP": {
                                "type": "boolean",
                                "default": false,
                                "description": "Set this annotation to true if you would like to have a public IPv6 address for the pod. Alternatively, you can create an ECP custom \"LoadBalancer4\" object for your ECP application to expose the pod. "
                              }
                            }
                          }
                        }
                      },
                      "spec": {
                        "type": "object",
                        "required": [
                          "containers"
                        ],
                        "description": "Specification of desired behavior of the pod",
                        "properties": {
                          "containers": {
                            "type": "array",
                            "description": "List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "image": {
                                  "type": "string",
                                  "description": "Docker image name"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Name of the container specified as a DNS_LABEL"
                                },
                                "resources": {
                                  "type": "object",
                                  "required": [
                                    "limits"
                                  ],
                                  "description": "Compute Resources required by this container. Cannot be updated.",
                                  "properties": {
                                    "limits": {
                                      "type": "object",
                                      "required": [
                                        "cpu",
                                        "memory"
                                      ],
                                      "description": "The maximum amount of compute resources required",
                                      "properties": {
                                        "cpu": {
                                          "type": "string",
                                          "description": "The amount of CPU required. Minimum 0.05 core. The sum of limits.cpu required by all containers in the pod must not exceed 24 cores."
                                        },
                                        "memory": {
                                          "type": "string",
                                          "description": "The amount of memory required. Minimum 50 MB. The sum of limits.memory required by all containers in the pod must not exceed 128 GB."
                                        }
                                      }
                                    }
                                  }
                                },
                                "volumeMounts": {
                                  "type": "array",
                                  "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "type": "string",
                                        "description": "This must match the Name of a Volume"
                                      },
                                      "mountPath": {
                                        "type": "string",
                                        "description": "Path within the container at which the volume should be mounted. Must not contain ':'."
                                      }
                                    }
                                  }
                                }
                              },
                              "required": [
                                "image",
                                "name",
                                "resources"
                              ]
                            }
                          }
                        }
                      }
                    }
                  },
                  "volumeClaimTemplates": {
                    "type": "array",
                    "description": "A list of persistent volume claims that pods are allowed to reference. Every claim in this list must have at least one matching (by name) volumeMount in one container in the pod template.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "metadata": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Name of a volume claim"
                            },
                            "annotations": {
                              "type": "object",
                              "properties": {
                                "volume.beta.kubernetes.io/storage-class": {
                                  "type": "string",
                                  "enum": [
                                    "local-ssd",
                                    "persist-ssd"
                                  ],
                                  "description": "Specifiy the storageClass of a volume claim. Options include \"local-ssd\" and \"persist-ssd\". \"local-ssd\" means local persistent SSD storage, in which case data will be lost when a pod is rescheduled to another node. \"persist-ssd\" means remote persistent SSD storage, in which case data will be persisted even when the pod is rescheduled."
                                }
                              }
                            }
                          }
                        },
                        "spec": {
                          "type": "object",
                          "properties": {
                            "accessModes": {
                              "type": "array",
                              "description": "The desired access modes the volume claim should have. Should be \"ReadWriteOnce\".",
                              "items": {
                                "type": "string"
                              }
                            },
                            "resources": {
                              "type": "object",
                              "description": "The resources the volume claim should have",
                              "properties": {
                                "requests": {
                                  "type": "object",
                                  "description": "The minimum amount of resources required",
                                  "properties": {
                                    "storage": {
                                      "type": "string",
                                      "description": "The storage capacity required. Must be not less than 500MB and not higher than 100GB."
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "required": [
              "apiVersion",
              "Kind",
              "metadata",
              "spec"
            ]
          }
        ]
      },
      "report.data": {
        "title": "",
        "properties": {
          "data": {
            "type": "array",
            "description": "array of time serialized metric values",
            "items": {
              "type": "object",
              "properties": {
                "timestamp": {
                  "type": "string",
                  "description": "timestamp"
                },
                "value": {
                  "type": "number",
                  "description": "metric value"
                }
              }
            }
          }
        },
        "type": "object"
      },
      "report.pod.diskusage": {
        "title": "Storage report",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "Array of time serialized metric values. This schema is used when the queried metric is 'diskUsage'",
            "items": {
              "type": "object",
              "properties": {
                "timestamp": {
                  "type": "string",
                  "description": "timestamp"
                },
                "volumes": {
                  "type": "array",
                  "description": "metric value",
                  "items": {
                    "type": "object",
                    "properties": {
                      "volume": {
                        "type": "string",
                        "description": "Could be a container rootFS or a PVC volume attached to a pod"
                      },
                      "value": {
                        "type": "number",
                        "description": "Disk usage rate, e.g. \"0.2\" means 20% of disk capacity is used."
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "If the metric is \"diskUsage\", the response will be in this format."
      },
      "report.pod.metrics": {
        "title": "CPU/memory/traffic report",
        "properties": {
          "data": {
            "type": "array",
            "description": "Array of time serialized metric values. This schema is used when the queried metric is a metric other than 'diskUsage'",
            "items": {
              "type": "object",
              "properties": {
                "timestamp": {
                  "type": "string",
                  "description": "timestamp"
                },
                "value": {
                  "type": "number",
                  "description": "metric value"
                }
              }
            }
          }
        },
        "type": "object"
      },
      "report.servicezone.data": {
        "title": "",
        "type": "object",
        "properties": {
          "series": {
            "type": "array",
            "description": "usage reports grouped per service zones",
            "items": {
              "type": "object",
              "properties": {
                "serviceZone": {
                  "type": "string",
                  "enum": [
                    "business",
                    "standard",
                    "premium"
                  ]
                },
                "data": {
                  "type": "array",
                  "description": "array of time serialized metric values",
                  "items": {
                    "type": "object",
                    "properties": {
                      "timestamp": {
                        "type": "string",
                        "description": "timestamp"
                      },
                      "value": {
                        "type": "number",
                        "description": "metric value"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "error.report.InvalidMetric": {
        "title": "InvalidMetric",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "InvalidMetric"
          },
          "message": {
            "type": "string",
            "description": "The metric given is invalid."
          }
        }
      },
      "error.report.InvalidDateFormat": {
        "title": "InvalidDateFormat",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "InvalidDateFormat"
          },
          "message": {
            "type": "string",
            "description": "Invalid parameter {startTime / endTime}. {startTime/endTime} is not a valid RFC3339 timestamp. The timestamp should be in \"yyyy-MM-dd'T'HH:mm:ss'Z'\" format."
          }
        }
      },
      "error.report.InvalidRange": {
        "title": "InvalidRange",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "InvalidRange"
          },
          "message": {
            "type": "string",
            "description": "One of: \"The max time span of {interval} report must be no more than {xxx days}.\" \"The parameter 'startTime' cannot be a time in the future.\" \"The parameter 'endTime' should be after 'startTime'.\""
          }
        }
      },
      "error.report.InvalidInterval": {
        "title": "InvalidInterval",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "InvalidInterval"
          },
          "message": {
            "type": "string",
            "description": "The interval requested is invalid."
          }
        }
      },
      "error.report.PoPNotExist": {
        "title": "PoPNotExist",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "PoPNotExist"
          },
          "message": {
            "type": "string",
            "description": "The PoP given is invalid or does not exist."
          }
        }
      },
      "error.report.ServiceZoneNotExist": {
        "title": "ServiceZoneNotExist",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "ServiceZoneNotExist"
          },
          "message": {
            "type": "string",
            "description": "The serviceZone given is invalid or does not exist."
          }
        }
      },
      "error.report.ApplicationNotExist": {
        "title": "ApplicationNotExist",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "ApplicationNotExist"
          },
          "message": {
            "type": "string",
            "description": "The application ID given does not exist."
          }
        }
      },
      "error.report.InstanceNotFound": {
        "title": "InstanceNotFound",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "InstanceNotFound"
          },
          "message": {
            "type": "string",
            "description": "The instance specified does not exist, or is not an instance of the given application."
          }
        }
      },
      "error.report.InvalidQuota": {
        "title": "InvalidQuota",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "InvalidQuota"
          },
          "message": {
            "type": "string",
            "description": "The quota name given is invalid."
          }
        }
      },
      "error.report.InvalidReportRange": {
        "title": "InvalidReportRange",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "InvalidReportRange"
          },
          "message": {
            "type": "string",
            "description": "A valid report range shall be “self-only”, “children-only”, or “self+children”."
          }
        }
      },
      "error.InvalidListOffset": {
        "title": "InvalidListOffset",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "InvalidListOffset"
          },
          "message": {
            "type": "string",
            "description": "The value of offset must be a valid non-negative integer."
          }
        }
      },
      "error.InvalidListLimit": {
        "title": "InvalidListLimit",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "InvalidListLimit"
          },
          "message": {
            "type": "string",
            "description": "The value of limit must be a valid integer between 1 and 200, both inclusive."
          }
        }
      },
      "error.InvalidListLimit(allows-0)": {
        "title": "InvalidListLimit",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "InvalidListLimit"
          },
          "message": {
            "type": "string",
            "description": "The value of limit must be a valid integer between 0 and 200, both inclusive. Set limit to 0 to retrieve a complete list."
          }
        }
      },
      "error.application.InvalidStatus": {
        "title": "InvalidStatus",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "InvalidStatus"
          },
          "message": {
            "type": "string",
            "description": "The value of the “status” parameter is invalid. Should be “waiting”, “deploying”, “deployed”, or “failed.”"
          }
        }
      },
      "error.application.ApplicationNotFound": {
        "title": "ApplicationNotFound",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "ApplicationNotFound"
          },
          "message": {
            "type": "string",
            "description": "The application ID given does not exist."
          }
        }
      },
      "error.application.InvalidPhase": {
        "title": "InvalidPhase",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "InvalidPhase"
          },
          "message": {
            "type": "string",
            "description": "The phase given is invalid. The value should be one of “Pending”, “Running”, and “Failed”."
          }
        }
      },
      "error.application.PoPNotExist": {
        "title": "PoPNotExist",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "PoPNotExist"
          },
          "message": {
            "type": "string",
            "description": "The PoP given is invalid or does not exist."
          }
        }
      },
      "error.application.InstanceNotFound": {
        "title": "InstanceNotFound",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "InstanceNotFound"
          },
          "message": {
            "type": "string",
            "description": "The instance specified does not exist, or is not an instance of the given application."
          }
        }
      },
      "error.application.ApplicationBeingDeleted": {
        "title": "ApplicationBeingDeleted",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "ApplicationBeingDeleted"
          },
          "message": {
            "type": "string",
            "description": "The application is being deleted and cannot be updated or deleted again."
          }
        }
      },
      "error.application.ApplicationHasCname": {
        "title": "ApplicationHasCname",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "ApplicationHasCname"
          },
          "message": {
            "type": "string",
            "description": "A CNAME for the application exists. Please delete the CNAME first."
          }
        }
      },
      "error.application.AppNameExists": {
        "title": "AppNameExists",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "AppNameExists"
          },
          "message": {
            "type": "string",
            "description": "The app name is already taken."
          }
        }
      },
      "error.application.InvalidAppName": {
        "title": "InvalidAppName",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "InvalidAppName"
          },
          "message": {
            "type": "string",
            "description": "Invalid app name. A valid app name must consist of lower-case alphanumeric characters or ‘-', must start and end with a lower-case alphanumeric character, and must be no more than 48 characters."
          }
        }
      },
      "error.application.NamespaceNotSpecified": {
        "title": "NamespaceNotSpecified",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "NamespaceNotSpecified"
          },
          "message": {
            "type": "string",
            "description": "The “metadata.namespace” field must be specified for each object of an application."
          }
        }
      },
      "error.application.AppNameInconsistent": {
        "title": "AppNameInconsistent",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "AppNameInconsistent"
          },
          "message": {
            "type": "string",
            "description": "The \"appName\" parameter value is inconsistent with the YAML/JSON file in request body. The \"metadata.name\" field of each object to be deployed must use the same app name."
          }
        }
      },
      "error.application.QuotaExceeded": {
        "title": "QuotaExceeded",
        "type": "object",
        "description": "",
        "properties": {
          "error": {
            "type": "string",
            "description": "QuotaExceeded"
          },
          "message": {
            "type": "string",
            "description": "The application could not be deployed because it requires {resource requests}. You have a quota of {resources available}."
          }
        }
      },
      "error.application.ConflictNetworkConfiguration": {
        "title": "ConflictNetworkConfiguration",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "ConflictNetworkConfiguration"
          },
          "message": {
            "type": "string",
            "description": "Requesting public IPv4 addresses for pods is not allowed when a LoadBalancer4 object is already specified. Please remove the LoadBalancer4 object if your pods need to have publicly accessible IPv4 addresses."
          }
        }
      },
      "error.application.WorkloadObjectNotFound": {
        "title": "WorkloadObjectNotFound",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "WorkloadObjectNotFound"
          },
          "message": {
            "type": "string",
            "description": "No workload object is found. Each application should define one and only workload object."
          }
        }
      },
      "error.application.MultipleResourceObjectsNotAllowed": {
        "title": "MultipleResourceObjectsNotAllowed",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "MultipleResourceObjectsNotAllowed"
          },
          "message": {
            "type": "string",
            "description": "Defining multiple objects of the resource {kind} is not allowed."
          }
        }
      },
      "error.application.SyntaxError": {
        "title": "SyntaxError",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "SyntaxError"
          },
          "message": {
            "type": "string",
            "description": "{error message}"
          }
        }
      },
      "error.application.IncorrectApiVersion": {
        "title": "IncorrectApiVersion",
        "type": "object",
        "description": "",
        "properties": {
          "error": {
            "type": "string",
            "description": "IncorrectApiVersion"
          },
          "message": {
            "type": "string",
            "description": "No kind {kind} is registered for version {version}."
          }
        }
      },
      "error.application.InvalidResourceRequirement": {
        "title": "InvalidResourceRequirement",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "InvalidResourceRequirement"
          },
          "message": {
            "type": "string",
            "description": "The resource requirement is invalid. {Reason}\n\nPossible reasons:\n1. The requests.cpu of a container should not be lower than 0.05 core. \n2. The sum of limits.cpu of a pod should not be higher than 24 cores. \n3. The requests.cpu should be less than or equal to limits.cpu. \n4. The CPU requirement (measured in cores) should be expressed in plain numbers or with “m” suffix. \n5. The requests.mem of a container should not be lower than 50MB.\n6. The sum of limits.mem of a pod should not be higher than 128GB. \n7. The requests.mem should be less than or equal to limits.mem.\n8. The memory requirement (measured in bytes) should be expressed in plain numbers or with these suffixes: E, P, T, G, M, K, Ei, Pi, Ti, Gi, Mi, Ki.\n9. The requests.storage of a PVC should be not lower than 500MB and not higher than 100GB.\n10. The storage requirement (measured in bytes) should be expressed in plain numbers or with these suffixes: E, P, T, G, M, K, Ei, Pi, Ti, Gi, Mi, Ki."
          }
        }
      },
      "error.application.MultipleControllerTypesNotAllowed": {
        "title": "MultipleControllerTypesNotAllowed",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "MultipleControllerTypesNotAllowed"
          },
          "message": {
            "type": "string",
            "description": "Defining multiple controller types for an application is not allowed."
          }
        }
      },
      "error.application.TargetsNotSpecified": {
        "title": "TargetsNotSpecified",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "TargetsNotSpecified"
          },
          "message": {
            "type": "string",
            "description": "No “Location” or “RegionPreference” object is found. Please specify."
          }
        }
      },
      "error.application.RepeatedTarget": {
        "title": "RepeatedTarget",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "RepeatedTarget"
          },
          "message": {
            "type": "string",
            "description": "The target {location/region} is repeated in your specification. Please combine them into one target."
          }
        }
      },
      "error.application.ConflictTargets": {
        "title": "ConflictTargets",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "ConflictTargets"
          },
          "message": {
            "type": "string",
            "description": "Specifying a “Location” object and a “RegionPreference” object together is not allowed."
          }
        }
      },
      "error.application.PoPNotAvailable": {
        "title": "PoPNotAvailable",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "PoPNotAvailable"
          },
          "message": {
            "type": "string",
            "description": "The PoP {pop code} specified is offline and currently not available."
          }
        }
      },
      "error.application.PoPFullyLoaded": {
        "title": "PoPFullyLoaded",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "PoPFullyLoaded"
          },
          "message": {
            "type": "string",
            "description": "The PoP {pop code} specified is fully loaded and cannot provision resources requested. Please choose a different location."
          }
        }
      },
      "error.application.RegionDoesNotExist": {
        "title": "RegionDoesNotExist",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "RegionDoesNotExist"
          },
          "message": {
            "type": "string",
            "description": "The region {region} is invalid or does not exist."
          }
        }
      },
      "error.application.RegionNotAvailable": {
        "title": "RegionNotAvailable",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "RegionNotAvailable"
          },
          "message": {
            "type": "string",
            "description": "There are currently no available PoPs under the region {region}."
          }
        }
      },
      "error.application.VolumeNotDefined": {
        "title": "VolumeNotDefined",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "VolumeNotDefined"
          },
          "message": {
            "type": "string",
            "description": "The volume {volume name} in “volumeMounts” is not defined."
          }
        }
      },
      "error.application.VolumeNotMounted": {
        "title": "VolumeNotMounted",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "VolumeNotMounted"
          },
          "message": {
            "type": "string",
            "description": "One of: \"The volume {volume name} defined is not mounted to any mount points.\" \"The volume {volume name} is not properly mounted. The field “volumeMounts[].mountPath” is required.\""
          }
        }
      },
      "error.application.ConflictVolumeName": {
        "title": "ConflictVolumeName",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "ConflictVolumeName"
          },
          "message": {
            "type": "string",
            "description": "A volume name must be unique across volumes of all types."
          }
        }
      },
      "error.application.ConflictVolumeMountPath": {
        "title": "ConflictVolumeMountPath",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "ConflictVolumeMountPath"
          },
          "message": {
            "type": "string",
            "description": "The mountPath in volumeMounts must be unique and without overlapping."
          }
        }
      },
      "error.application.PVCVolumeNotAllowed": {
        "title": "PVCVolumeNotAllowed",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "PVCVolumeNotAllowed"
          },
          "message": {
            "type": "string",
            "description": "Using PVC volumes with a kubernetes Controller of type other than StatefulSet is not allowed."
          }
        }
      },
      "error.application.VolumeTypeNotAllowed": {
        "title": "VolumeTypeNotAllowed",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "VolumeTypeNotAllowed"
          },
          "message": {
            "type": "string",
            "description": "Only “configMap” and “secret” volumes are allowed. If a PVC volume is desired, please use a StatefulSet Controller and define the volume in “spec.volumeClaimTemplates”."
          }
        }
      },
      "error.application.ConflictPVCStorageClass": {
        "title": "ConflictPVCStorageClass",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "ConflictPVCStorageClass"
          },
          "message": {
            "type": "string",
            "description": "Using PVC volumes of different storage classes is not allowed."
          }
        }
      },
      "error.application.InvalidLoadBalancer4Listener": {
        "title": "InvalidLoadBalancer4Listener",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "InvalidLoadBalancer4Listener"
          },
          "message": {
            "type": "string",
            "description": "The LoadBalancer4 listener {listener name} is invalid. The “backendSelector” does not match {ReplicaSet/StatefulSet/Deployment}.spec.template.metadata.labels."
          }
        }
      },
      "error.application.ResourceObjectNotExist": {
        "title": "ResourceObjectNotExist",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "ResourceObjectNotExist"
          },
          "message": {
            "type": "string",
            "description": "The application does not contain a {kind} object. Please use PUT method if you would like to add a new object."
          }
        }
      },
      "error.application.PVCUpdateNotAllowed": {
        "title": "PVCUpdateNotAllowed",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "PVCUpdateNotAllowed"
          },
          "message": {
            "type": "string",
            "description": "Updating PVCs in use is not allowed."
          }
        }
      },
      "error.application.PoPDoesNotExist": {
        "title": "PoPDoesNotExist",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "PoPDoesNotExist"
          },
          "message": {
            "type": "string",
            "description": "The PoP {pop code} specified is invalid or does not exist."
          }
        }
      },
      "error.application.ApplicationHasCname.new": {
        "title": "ApplicationHasCname",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "ApplicationHasCname"
          },
          "message": {
            "type": "string",
            "description": "A CNAME for the application exists. Please delete the CNAME first before removing layer 4 load balancers from this application."
          }
        }
      },
      "application.message": {
        "title": "",
        "type": "string",
        "description": "Detailed message explaining the status of deployment"
      },
      "project.id": {
        "title": "",
        "type": "integer",
        "description": "ID of a registry project"
      },
      "project.name": {
        "title": "",
        "type": "string",
        "description": "Name of a registry project. Must be unique globally. Allows lower case alphanumeric characters, ‘-’, ‘_’ and ‘.’ only, must start and end with an alphanumeric character, and must be not more than 128 characters."
      },
      "project.createdBy": {
        "title": "",
        "type": "string",
        "description": "Name of apiAccount or contact who created the registry project"
      },
      "project.accessLevel": {
        "title": "",
        "type": "string",
        "description": "How a registry project is accessible to registry users"
      },
      "project.preventVulnerable": {
        "title": "",
        "type": "boolean",
        "description": "Whether to prevent vulnerable images from running. Default to false."
      },
      "project.severity": {
        "type": "string",
        "title": "",
        "description": "If \"preventVulnerable\" is enabled and the vulnerability of an image is equal to or higher than severity defined here, the image can't be pulled.",
        "default": "low",
        "enum": [
          "negligible",
          "low",
          "medium",
          "high"
        ]
      },
      "project.autoScan": {
        "title": "",
        "type": "boolean",
        "description": "Whether to scan images automatically when images are pushed to registry. Default to false."
      },
      "common.error": {
        "title": "",
        "type": "object",
        "description": "A standard error object",
        "properties": {
          "error": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "project.repoCount": {
        "title": "",
        "type": "integer",
        "description": "Number of repositories under a registry project"
      },
      "repo.id": {
        "title": "",
        "type": "integer",
        "description": "ID of an image repository"
      },
      "repo.name": {
        "title": "",
        "type": "string",
        "description": "Name of an image repository"
      },
      "repo.description": {
        "title": "",
        "type": "string",
        "description": "Arbitrary text describing an image repository"
      },
      "repo.pullCount": {
        "title": "",
        "type": "integer",
        "description": "The number of image pulls from an image repository"
      },
      "repo.tagsCount": {
        "title": "",
        "type": "integer",
        "description": "The number of tags in an image repository"
      },
      "tag": {
        "title": "",
        "type": "object",
        "description": "",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of a tag"
          },
          "digest": {
            "type": "string",
            "description": "Digest of a tag"
          },
          "size": {
            "type": "integer",
            "description": "Size of the image, measured in bytes"
          },
          "architecture": {
            "type": "string",
            "description": "Architecture of the image"
          },
          "os": {
            "type": "string",
            "description": "OS of the image"
          },
          "dockerVersion": {
            "type": "string",
            "description": "The version of docker which builds the image"
          },
          "author": {
            "type": "string",
            "description": "Author of the image"
          },
          "creationTime": {
            "type": "string",
            "description": "Datetime when the image is built"
          },
          "scanOverview": {
            "type": "object",
            "description": "Overview of previous scan result",
            "properties": {
              "status": {
                "type": "string",
                "description": "Status of the scan",
                "enum": [
                  "pending",
                  "running",
                  "finished",
                  "error"
                ]
              },
              "severity": {
                "type": "string",
                "description": "High-level severity rating",
                "enum": [
                  "Not scanned",
                  "Negligible",
                  "Unknown",
                  "Low",
                  "Medium",
                  "High"
                ]
              },
              "started": {
                "type": "string",
                "description": "Datetime when the scan is started"
              },
              "completed": {
                "type": "string",
                "description": "Datetime when the scan is completed"
              },
              "components": {
                "type": "object",
                "description": "The components overview of the image",
                "properties": {
                  "total": {
                    "description": "Total number of the components in this image",
                    "type": "integer"
                  },
                  "summary": {
                    "type": "array",
                    "description": "Number of components in different severities",
                    "items": {
                      "type": "object",
                      "properties": {
                        "severity": {
                          "type": "string",
                          "description": "Severity of a component",
                          "enum": [
                            "None",
                            "Unknown",
                            "Low",
                            "Medium",
                            "High"
                          ]
                        },
                        "count": {
                          "type": "integer",
                          "description": "Number of components with certain severity"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "user.userID": {
        "title": "",
        "type": "integer",
        "description": "ID of a registry user"
      },
      "user.username": {
        "title": "",
        "type": "string",
        "description": "Username of a registry user"
      },
      "user.email": {
        "title": "",
        "type": "string",
        "description": "Email address of the registry user"
      },
      "user.description": {
        "title": "",
        "type": "string",
        "description": "Arbitrary text about the registry user. Must be not more than 20 characters."
      },
      "user.project.accessType": {
        "type": "string",
        "title": "",
        "description": "How a project is accessible to a registry user. Can be one of:\n“readonly”: has the permissions to pull images under a project;\n“readwrite”: has the permissions to push/pull images to/from a project.",
        "enum": [
          "readonly",
          "readwrite"
        ]
      },
      "user.createdBy": {
        "title": "",
        "type": "string",
        "description": "Name of contact or apiAccount who creates the registry user"
      }
    },
    "parameters": {
      "offset": {
        "name": "offset",
        "in": "query",
        "description": "Indicates the first resource to return. The first has an offset of 0.",
        "required": false,
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": "0"
        }
      },
      "limit": {
        "name": "limit",
        "in": "query",
        "description": "Maximum number of resources to return",
        "required": false,
        "schema": {
          "type": "integer",
          "default": "100",
          "maximum": 200,
          "minimum": 1
        }
      },
      "searchString": {
        "name": "searchString",
        "in": "query",
        "description": "Keyword to search for particular resources. The value is matched against the \"name\" field of each resource.",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "Location": {
        "schema": {
          "type": "string"
        },
        "in": "header",
        "name": "Location",
        "description": "Location of the newly created resource.",
        "required": false
      },
      "endTime": {
        "schema": {
          "type": "string"
        },
        "in": "query",
        "name": "endTime",
        "description": "RFC 3339 date indicating the end of a time period. Example: <code>endTime=2019-11-14T00:00:00Z</code> Your endTime may be rounded up to the nearest minute, hour, or day depending on the interval parameter. For example, if you enter <code>endTime=2019-09-05T03:14:01Z&interval=hourly</code>, the response includes data ending at 2019-09-05T04:00:00Z.",
        "required": true
      },
      "startTime": {
        "in": "query",
        "name": "startTime",
        "description": "RFC 3339 date indicating the beginning of a time period. Example: <code>startTime=2019-10-30T00:00:00Z</code>. Your startTime may be rounded down to the nearest minute, hour, or day depending on the interval parameter. For example, if you enter <code>startTime=2019-09-05T03:14:01Z&interval=hourly</code>, the response includes data beginning at 2019-09-05T03:00:00Z.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "interval": {
        "schema": {
          "type": "string",
          "enum": [
            "oneminute",
            "fiveminutes",
            "hourly",
            "daily",
            "monthly"
          ]
        },
        "name": "interval",
        "required": true,
        "description": "The granularity of returned data. Raw report data is generated per 1 minute. The data is aggregated to give reports of different granularities. The aggregation method is “sum” for the metrics \"inboundTraffic\", \"outboundTraffic\" and \"totalTraffic\". For all other metrics, the aggregation method is \"average\". \n\n\"oneminute\" interval is supported only when the timespan is not longer than 7 days. \"fiveminutes\" interval is supported only when the timespan is not longer than 31 days.",
        "in": "query"
      },
      "Report-Range": {
        "schema": {
          "type": "string",
          "default": "self-only",
          "enum": [
            "self-only",
            "children-only",
            "self+children"
          ]
        },
        "name": "Report-Range",
        "description": "An optional header that resellers can use to specify whether to include data from children customers.",
        "in": "header"
      },
      "pop": {
        "schema": {
          "type": "string"
        },
        "name": "pop",
        "description": "Code of an ECP PoP",
        "in": "path",
        "required": true
      },
      "servicezone": {
        "schema": {
          "type": "string",
          "enum": [
            "business",
            "standard",
            "premium"
          ]
        },
        "name": "servicezone",
        "description": "Code of an ECP service zone",
        "in": "path",
        "required": true
      },
      "metric": {
        "name": "metric",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "enum": [
            "inboundTraffic",
            "inboundBandwidth",
            "outboundTraffic",
            "outboundBandwidth",
            "totalTraffic",
            "totalBandwidth",
            "podCount",
            "vcpu",
            "mem",
            "local-ssd",
            "persist-ssd",
            "ipCount"
          ]
        },
        "description": "Usage metric on compute, storage and network resources.\n\nMetric | Description | Measured in\n--- | --- | --- \ninboundTraffic | amount of data transmitted to ECP during a time period | byte\ninboundBandwidth | rate of data transfer to ECP during a time period | bps\noutboundTraffic | amount of data transmitted from ECP during a time period | byte\noutboundBandwidth | rate of data transfer from ECP during a time period | bps\ntotalTraffic | amount of data transmitted to and from ECP during a time period | byte\ntotalBandwidth | rate of data transfer to and from ECP during a time period | bps\nvcpu | amount of CPU cores allocated and available during a time period | core\nmem | amount of memory allocated and available during a time peirod | byte\nlocal-ssd | amount of local storage capacity allocated and available during a time period | byte\npersist-ssd | amount of remote storage capacity allocated and available during a time period | byte\npodCount | number of kubernetes pods existing and maintained for your application(s) during a time period | ea\nipCount | number of public IPv4 addresses allocated and available during a time period | ea\n"
      },
      "podMetric": {
        "name": "metric",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "enum": [
            "inboundTraffic",
            "inboundBandwidth",
            "outboundTraffic",
            "outboundBandwidth",
            "cpuUsage",
            "memUsage",
            "diskUsage"
          ]
        },
        "description": "Usage metric on compute, storage and network resources.\n\nMetric | Description | Measured in\n--- | --- | ---\ninboundTraffic | amount of data transmitted to a pod during a time period | byte\ninboundBandwidth | rate of data transfer to a pod during a time period | bps\noutboundTraffic | amount of data transmitted from a pod during a time period | byte\noutboundBandwidth | rate of data transfer from a pod during a time period | bps\ncpuUsage | amount of CPU cores consumed by container process(es) in a pod during a time period | core\nmemUsage | amount of memory consumed by container process(es) in a pod during a time period | byte\ndiskUsage | Disk usage rate. Here \"disk\" could be the rootFS of a container in a pod, or a PVC volume attached to a pod. | --\n"
      },
      "applicationID": {
        "name": "applicationID",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "ID of an ECP application"
      },
      "status": {
        "name": "status",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "waiting",
            "deploying",
            "deployed",
            "failed"
          ]
        },
        "description": "The deployment status of an application"
      },
      "podMetric-interval": {
        "schema": {
          "type": "string",
          "enum": [
            "oneminute",
            "fiveminutes",
            "hourly",
            "daily",
            "monthly"
          ]
        },
        "name": "interval",
        "required": true,
        "description": "The granularity of returned data. Raw report data is generated per 1 minute. The data is aggregated to give reports of different granularities. The aggregation method is “sum” for the metrics \"inboundTraffic\", and \"outboundTraffic\". For all other metrics, the aggregation method is \"average\".",
        "in": "query"
      },
      "limit(allows limit=0)": {
        "name": "limit",
        "in": "query",
        "description": "Maximum number of resources to return. To retrieve a complete list of resources, please pass this parameter with value “0”.",
        "required": false,
        "schema": {
          "type": "integer",
          "default": "100",
          "maximum": 200,
          "minimum": 0
        }
      },
      "Qtl-Request-Id": {
        "name": "Qtl-Request-Id",
        "in": "header",
        "description": "A string automatically generated by the api server to identify each request.",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "On-Behalf-Of": {
        "name": "On-Behalf-Of",
        "in": "header",
        "description": "If you are a reseller, you can use this header to specify the ID of a child customer and make API call on their behalf.",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "limit(registry)": {
        "name": "limit",
        "in": "query",
        "required": false,
        "schema": {
          "type": "integer",
          "default": 100,
          "minimum": 0,
          "maximum": 100
        },
        "description": "Indicates the maximum nuber of resources to return."
      },
      "offset(registry)": {
        "name": "offset",
        "in": "query",
        "required": false,
        "schema": {
          "type": "integer",
          "minimum": 0
        },
        "description": "Indicates the first resource to return. The first has an offset of 0. The value must be a valid non-negative integral multiple of the limit parameter."
      }
    },
    "securitySchemes": {
      "basicAuth": {
        "type": "http",
        "scheme": "Basic",
        "description": "All requests to ECP platform must be authenticated using an API login name and key assigned to your organization. For security, the API key is not passed directly but is secured as described below. \n\nThe authentication type is HTTP Basic, and the authorization string is specified in the HTTP request header called Authorization.\n```\n#!/bin/bash\n#URL of the ECP API server\nAPI_SERVER=https://ngapi.cdnetworks.com\n\n#You will be given the following information by the sales team\nUSER=\"{API user name}\"\nAPI_KEY=\"{API key (make sure to escape the $ sign if any)}\"\n\n#Date in RFC 1123 format\nDATE=`date \"+%a, %d %b %Y %H:%M:%S %Z\"`\n\n#Generate the password. Raw output from openssl by adding the \"-binary\" flag\npassw=$(echo -n \"$DATE\" | openssl dgst -sha1 -hmac \"$API_KEY\" -binary | base64)\necho \" \"\n\n#Construct the curl command to query list of applications\napiCall =\"curl -i --url '${API_SERVER}/ecp/v1/applications'\n                  -X GET\n                  -u $USER:$passw\n                  -H 'Date: $DATE'\n                  -H 'Accept: application/json'\"\neval $apiCall\necho \" \"\n```\n If you are a reseller, you can also specify a child customer's ID in an On-Behalf-Of HTTP header to make API calls to manage your child customer."
      }
    },
    "responses": {
      "project.NotAuthorized": {
        "description": "This error is returned if the API call is not permitted. Refer to response body for details.",
        "content": {
          "application/json": {
            "schema": {
              "title": "",
              "type": "object",
              "description": "A standard error object",
              "properties": {
                "error": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            },
            "examples": {
              "example-1": {
                "value": {
                  "error": "NotAuthorized",
                  "message": "Only the admin API account is allowed to perform this operation."
                }
              }
            }
          }
        },
        "headers": {
          "Qtl-Request-Id": {
            "name": "Qtl-Request-Id",
            "in": "header",
            "description": "A string automatically generated by the api server to identify each request.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "project.ProjectNotFound": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "title": "",
              "type": "object",
              "description": "A standard error object",
              "properties": {
                "error": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            },
            "examples": {
              "example-1": {
                "value": {
                  "error": "ProjectNotFound",
                  "message": "The project ID given does not exist."
                }
              }
            }
          }
        },
        "headers": {
          "Qtl-Request-Id": {
            "name": "Qtl-Request-Id",
            "in": "header",
            "description": "A string automatically generated by the api server to identify each request.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Applications",
      "description": "Configure your containerized application once and then distribute your application to our ECP locations across the globe."
    },
    {
      "name": "imagePullSecrets",
      "description": "An ImagePullSecret is a type of Kubernetes secret that contains encoded image registry credentials. The secret is used by Kubernetes to authenticate with your image registry when pulling your private images from the registry."
    },
    {
      "name": "CNAMEs",
      "description": "A Canonical Name Record (or \"CNAME\") is a DNS record used to alias one domain name to a different domain name. While your application runs on ECP, you can create a CNAME and point the hostname of your application to this CNAME. Then ECP will help intelligently route global traffic for your application by resolving the CNAME to different IP addresses pointing to your application instances at the edge as per user/client location. Incoming requests will be routed to your application instances that are the closest or respond the fastest."
    },
    {
      "name": "Registry Projects",
      "description": "A registry project contains image repositories. You can use a project to group repositories of similar purpose, e.g. repositories for a same application or for a same organization. Such grouping also allows you to manage access control per project."
    },
    {
      "name": "Registry Users",
      "description": "A registry user is an entity that is created and given certain permissions to access/manage repositories and tags in the registry. A registry user usually uses the docker CLI client to access an image registry."
    },
    {
      "name": "ECP Locations",
      "description": "ECP service is available at ECP PoPs and ECP regions. An ECP PoP refers to a specific location where an ECP Kubernetes cluster is operated and offers container service, while an ECP region represents multiple ECP PoPs grouped together (geographically or otherwise). For instance, “APAC” is an ECP region which refers to all ECP PoPs serving in Asia Pacific (excluding mainland China). The endpoints below help you get to know about the global footprint of ECP service and how you can leverage this to run your applications everywhere around the world."
    },
    {
      "name": "Reports",
      "description": "Call our report APIs to get information about your resources consumption on ECP."
    }
  ]
}