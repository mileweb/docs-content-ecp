{
  "openapi": "3.0.0",
  "info": {
    "title": "ECP API Specification",
    "version": "1.0",
    "contact": {
      "url": "https://www.cdnetworks.com"
    },
    "description": "The ECP API is a RESTful API that allows you to interact with ECP platform to manage your ECP resources."
  },
  "servers": [
    {
      "url": "https://ngapi.cdnetworks.com"
    }
  ],
  "paths": {
    "/ecp/v1/imagepullsecrets": {
      "post": {
        "summary": "Create an imagePullSecret",
        "operationId": "post-imagepullsecrets",
        "description": "This interface enables you to create imagePullSecrets to be used by Kubernetes when pulling private images for your applications. \n\nECP apiserver itself will not attempt to use the username and password passed to authenticate against the image registry. So make sure that the credentials are valid. Invalid credentials will cause failure in image pulling when deploying an application using that imagePullSecret.\n\nWhen an ECP registry user gets created, a corresponding imagePullSecret is created automatically. Manually creating an imagePullSecret for your ECP registry user is not allowed.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "title": "",
                    "type": "string",
                    "description": "Name of the imagePullSecret. Shall be unique within a namespace. Allows lower case alphanumeric characters, ‘-’ and ‘.’ only, must start and end with an alphanumeric character, and must be no more than 63 characters."
                  },
                  "description": {
                    "title": "",
                    "type": "string",
                    "description": "Arbitrary text about the imagePullSecret"
                  },
                  "registry": {
                    "title": "",
                    "type": "string",
                    "description": "Your docker registry FQDN"
                  },
                  "username": {
                    "title": "",
                    "type": "string",
                    "description": "Your docker registry username"
                  },
                  "password": {
                    "type": "string",
                    "title": "",
                    "description": "Your docker registry password",
                    "format": "password"
                  }
                },
                "required": [
                  "name",
                  "registry",
                  "username",
                  "password"
                ]
              },
              "examples": {
                "example-1": {
                  "value": {
                    "name": "myregistrykey",
                    "namespace": "demo",
                    "description": "imagePullSecret for docker registry",
                    "registry": "docker.io",
                    "username": "demo",
                    "password": "123456"
                  }
                }
              }
            }
          },
          "description": ""
        },
        "tags": [
          "imagePullSecrets"
        ],
        "responses": {
          "201": {
            "description": "This response indicates the imagePullSecret is successfully created.",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "in": "header",
                "name": "Location",
                "description": "Location of the newly created resource.",
                "required": false
              },
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Refer to response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "InvalidSecretName": {
                    "value": {
                      "error": "InvalidSecretName",
                      "message": "Invalid secret name. A valid secret name must consist of lower-case alphanumeric characters, ‘-', or '.’, must start and end with a lower-case alphanumeric character, and must be no more than 63 characters."
                    }
                  },
                  "RequiredFieldMissing": {
                    "value": {
                      "error": "RequiredFieldMissing",
                      "message": "The field {field} is required."
                    }
                  },
                  "RegistryNotAllowed": {
                    "value": {
                      "error": "RegistryNotAllowed",
                      "message": "Creating secret for an ECP registry user is not allowed. This is handled by ECP automatically."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "409": {
            "description": "This error is returned if you try to create an imagePullSecret that already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "SecretNameExists",
                      "message": "The secret name is already taken."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Query imagePullSecrets list",
        "operationId": "get-imagepullsecrets",
        "responses": {
          "200": {
            "description": "The response contains a list of imagePullSecrets.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ImagePullSecrets": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "imagepullsecretID": {
                            "title": "",
                            "type": "string"
                          },
                          "name": {
                            "title": "",
                            "type": "string",
                            "description": "Name of the imagePullSecret. Shall be unique within a namespace. Allows lower case alphanumeric characters, ‘-’ and ‘.’ only, must start and end with an alphanumeric character, and must be no more than 63 characters."
                          },
                          "description": {
                            "title": "",
                            "type": "string",
                            "description": "Arbitrary text about the imagePullSecret"
                          },
                          "creationTime": {
                            "title": "",
                            "format": "date-time",
                            "type": "string",
                            "description": "Datetime when the resource is created"
                          },
                          "lastUpdateTime": {
                            "type": "string",
                            "title": "",
                            "format": "date-time",
                            "description": "Datetime when the resource is last updated"
                          }
                        }
                      }
                    },
                    "totalCount": {
                      "title": "",
                      "type": "integer",
                      "description": "Total number of resources"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "ImagePullSecrets": [
                        {
                          "imagepullsecretID": "123456",
                          "name": "mysecret1",
                          "description": "image pull secret for qcc registry",
                          "creationTime": "2020-10-02T15:00:00Z",
                          "lastUpdateTime": "2020-10-02T15:00:00Z"
                        },
                        {
                          "imagepullsecretID": "123456",
                          "name": "mysecret2",
                          "description": "image pull secret for qcc registry",
                          "creationTime": "2020-10-02T15:00:00Z",
                          "lastUpdateTime": "2020-10-02T15:00:00Z"
                        },
                        {
                          "imagepullsecretID": "123456",
                          "name": "mysecret3",
                          "description": "image pull secret for qcc registry",
                          "creationTime": "2020-10-02T15:00:00Z",
                          "lastUpdateTime": "2020-10-02T15:00:00Z"
                        }
                      ],
                      "totalCount": 3
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Refer to response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "InvalidListOffset": {
                    "value": {
                      "error": "InvalidListOffset",
                      "message": "The value of offset must be a valid non-negative integer."
                    }
                  },
                  "InvalidListLimit": {
                    "value": {
                      "error": "InvalidListLimit",
                      "message": "The value of limit must be a valid integer between 1 and 200, both inclusive."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "description": "Get a list of imagePullSecrets. You can specify a search parameter, offset and limit to filter the results.",
        "tags": [
          "imagePullSecrets"
        ],
        "parameters": [
          {
            "name": "searchString",
            "in": "query",
            "description": "Keyword to search for particular resources. The value is matched against the \"name\" field of each resource.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates the first resource to return. The first has an offset of 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of resources to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 200,
              "minimum": 1
            }
          },
          {
            "name": "On-Behalf-Of",
            "in": "header",
            "description": "If you are a reseller, you can use this header to specify the ID of a child customer and make API call on their behalf.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "parameters": []
    },
    "/ecp/v1/imagepullsecrets/{imagepullsecretID}": {
      "parameters": [
        {
          "name": "imagepullsecretID",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "description": "ID of an imagePullSecret",
          "required": true
        }
      ],
      "get": {
        "summary": "Query an imagePullSecret",
        "tags": [
          "imagePullSecrets"
        ],
        "responses": {
          "200": {
            "description": "The response contains details of the imagePullSecret.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "imagepullsecretID": {
                      "title": "",
                      "type": "string"
                    },
                    "name": {
                      "title": "",
                      "type": "string",
                      "description": "Name of the imagePullSecret. Shall be unique within a namespace. Allows lower case alphanumeric characters, ‘-’ and ‘.’ only, must start and end with an alphanumeric character, and must be no more than 63 characters."
                    },
                    "description": {
                      "title": "",
                      "type": "string",
                      "description": "Arbitrary text about the imagePullSecret"
                    },
                    "registry": {
                      "title": "",
                      "type": "string",
                      "description": "Your docker registry FQDN"
                    },
                    "username": {
                      "title": "",
                      "type": "string",
                      "description": "Your docker registry username"
                    },
                    "password": {
                      "type": "string",
                      "title": "",
                      "description": "Your docker registry password",
                      "format": "password"
                    },
                    "creationTime": {
                      "title": "",
                      "format": "date-time",
                      "type": "string",
                      "description": "Datetime when the resource is created"
                    },
                    "lastUpdateTime": {
                      "type": "string",
                      "title": "",
                      "format": "date-time",
                      "description": "Datetime when the resource is last updated"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "imagepullsecretID": "32bd86d6312211eaae6398wc35ded775",
                      "name": "mysecret1",
                      "description": "image pull secret for qcc registry",
                      "registry": "docker.io",
                      "username": "demo",
                      "password": "123456",
                      "creationTime": "2020-10-02T15:00:00Z",
                      "lastUpdateTime": "2020-10-02T15:00:00Z"
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "SecretNotFound",
                      "message": "The secret ID given does not exist."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "operationId": "get-imagepullsecret-by-ID",
        "description": "Get the details of an imagePullSecret",
        "parameters": [
          {
            "name": "On-Behalf-Of",
            "in": "header",
            "description": "If you are a reseller, you can use this header to specify the ID of a child customer and make API call on their behalf.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "patch": {
        "summary": "Update an imagePullSecret",
        "operationId": "patch-imagepullsecret-by-ID",
        "responses": {
          "200": {
            "description": "This response indicates the imagePullSecret is successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "imagepullsecretID": {
                      "title": "",
                      "type": "string"
                    },
                    "name": {
                      "title": "",
                      "type": "string",
                      "description": "Name of the imagePullSecret. Shall be unique within a namespace. Allows lower case alphanumeric characters, ‘-’ and ‘.’ only, must start and end with an alphanumeric character, and must be no more than 63 characters."
                    },
                    "description": {
                      "title": "",
                      "type": "string",
                      "description": "Arbitrary text about the imagePullSecret"
                    },
                    "registry": {
                      "title": "",
                      "type": "string",
                      "description": "Your docker registry FQDN"
                    },
                    "username": {
                      "title": "",
                      "type": "string",
                      "description": "Your docker registry username"
                    },
                    "password": {
                      "type": "string",
                      "title": "",
                      "description": "Your docker registry password",
                      "format": "password"
                    },
                    "creationTime": {
                      "title": "",
                      "format": "date-time",
                      "type": "string",
                      "description": "Datetime when the resource is created"
                    },
                    "lastUpdateTime": {
                      "type": "string",
                      "title": "",
                      "format": "date-time",
                      "description": "Datetime when the resource is last updated"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "imagepullsecretID": "32bd86d6312211eaae6398wc35ded775",
                      "name": "mysecret1",
                      "description": "image pull secret for qcc registry",
                      "registry": "docker.io",
                      "username": "demo",
                      "password": "123456",
                      "creationTime": "2020-10-02T15:00:00Z",
                      "lastUpdateTime": "2020-10-02T15:05:00Z"
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Refer to response body for details.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "UpdateManagedSecretNotAllowed",
                      "message": "The secret is manged by ECP and cannot be updated."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "SecretNotFound",
                      "message": "The secret ID given does not exist."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "tags": [
          "imagePullSecrets"
        ],
        "description": "Update an existing imagePullSecret. The fields “name” and “registry” cannot be updated. If a request body includes any of these fields, they will simply be ignored.\n\nNote that updating an imagePullSecret in use might cause temporary failure in image pulling.\n\nWhen an ECP registry user is created, a corresponding imagePullSecret is created automatically. Such an imagePullSecret is managed by ECP and cannot be updated. ",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "title": "",
                    "type": "string",
                    "description": "Arbitrary text about the imagePullSecret"
                  },
                  "username": {
                    "title": "",
                    "type": "string",
                    "description": "Your docker registry username"
                  },
                  "password": {
                    "type": "string",
                    "title": "",
                    "description": "Your docker registry password",
                    "format": "password"
                  }
                }
              },
              "examples": {
                "example-1": {
                  "value": {
                    "description": "imagePullSecret for docker registry",
                    "username": "demo",
                    "password": "abcdef"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an imagePullSecret",
        "operationId": "delete-imagepullsecret-by-ID",
        "responses": {
          "204": {
            "description": "This response is returned if the imagePullSecret is successfully deleted.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Refer to response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "SecretBeingUsed": {
                    "value": {
                      "error": "SecretBeingUsed",
                      "message": "The secret is being used by applications and cannot be deleted."
                    }
                  },
                  "DeleteManagedSecretNotAllowed": {
                    "value": {
                      "error": "DeleteManagedSecretNotAllowed",
                      "message": "The secret is manged by ECP and cannot be deleted."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "SecretNotFound",
                      "message": "The secret ID given does not exist."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "tags": [
          "imagePullSecrets"
        ],
        "description": "Delete an existing imagePullSecret.\n\nNote that an imagePullSecret being referenced by an application cannot be deleted.\n\nWhen an ECP registry user is created, a corresponding imagePullSecret is created automatically. Such an imagePullSecret is managed by ECP and cannot be deleted."
      }
    },
    "/ecp/v1/cnames": {
      "get": {
        "summary": "Query CNAMEs list",
        "tags": [
          "CNAMEs"
        ],
        "responses": {
          "200": {
            "description": "The response contains a list of CNAMEs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "cnames": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "cnameID": {
                            "title": "",
                            "type": "string",
                            "description": "ID of a CNAME"
                          },
                          "cname": {
                            "title": "",
                            "type": "string",
                            "description": "FQDN CNAME"
                          },
                          "applicationID": {
                            "title": "",
                            "type": "string",
                            "description": "ID of application that the CNAME is created for",
                            "x-examples": {}
                          },
                          "applicationName": {
                            "title": "",
                            "type": "string",
                            "description": "Name of application that the CNAME is created for"
                          },
                          "description": {
                            "title": "",
                            "type": "string",
                            "description": "Arbitrary text about the CNAME"
                          },
                          "creationTime": {
                            "title": "",
                            "format": "date-time",
                            "type": "string",
                            "description": "Datetime when the resource is created"
                          },
                          "lastUpdateTime": {
                            "type": "string",
                            "title": "",
                            "format": "date-time",
                            "description": "Datetime when the resource is last updated"
                          }
                        }
                      }
                    },
                    "totalCount": {
                      "title": "",
                      "type": "integer",
                      "description": "Total number of resources"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "cnames": [
                        {
                          "cnameID": "12345601",
                          "cname": "cnamedemo1.ecp.qtlcdn.com",
                          "applicationID": "123456abcdef01",
                          "applicationName": "myapp1",
                          "description": "CNAME for myapp1",
                          "creationTime": "2020-10-02T15:00:00Z",
                          "lastUpdateTime": "2020-10-02T15:00:00Z"
                        },
                        {
                          "cnameID": "12345602",
                          "cname": "cnamedemo2.ecp.qtlcdn.com",
                          "applicationID": "123456abcdef02",
                          "applicationName": "myapp2",
                          "description": "CNAME for myapp2",
                          "creationTime": "2020-10-02T15:00:00Z",
                          "lastUpdateTime": "2020-10-02T15:00:00Z"
                        },
                        {
                          "cnameID": "12345603",
                          "cname": "cnamedemo3.ecp.qtlcdn.com",
                          "applicationID": "123456abcdef03",
                          "applicationName": "myapp3",
                          "description": "CNAME for myapp3",
                          "creationTime": "2020-10-02T15:00:00Z",
                          "lastUpdateTime": "2020-10-02T15:00:00Z"
                        }
                      ],
                      "totalCount": 3
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Refer to response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "InvalidListOffset": {
                    "value": {
                      "error": "InvalidListOffset",
                      "message": "The value of offset must be a valid non-negative integer."
                    }
                  },
                  "InvalidListLimit": {
                    "value": {
                      "error": "InvalidListLimit",
                      "message": "The value of limit must be a valid integer between 1 and 200, both inclusive."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "operationId": "get-cnames",
        "description": "Get a list of CNAMEs. You can specify a search parameter, offset and limit to filter the results.",
        "parameters": [
          {
            "name": "On-Behalf-Of",
            "in": "header",
            "description": "If you are a reseller, you can use this header to specify the ID of a child customer and make API call on their behalf.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "searchString",
            "description": "Keywords to search for particular CNAMEs. The searchString will be matched against the full form of a CNAME, i.e. including the prefix and zone of a CNAME."
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates the first resource to return. The first has an offset of 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of resources to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 200,
              "minimum": 1
            }
          }
        ]
      },
      "post": {
        "summary": "Create a CNAME",
        "operationId": "post-cnames",
        "responses": {
          "201": {
            "description": "This response indicates the CNAME is successfully created.",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "in": "header",
                "name": "Location",
                "description": "Location of the newly created resource.",
                "required": false
              },
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Refer to response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "InvalidCnamePrefix": {
                    "value": {
                      "error": "InvalidCnamePrefix",
                      "message": "Invalid prefix. A valid prefix must consist of lower-case alphanumeric characters and must be no more than 63 characters."
                    }
                  },
                  "RequiredFieldMissing": {
                    "value": {
                      "error": "RequiredFieldMissing",
                      "message": "The field {field} is required."
                    }
                  },
                  "ApplicationNotFound": {
                    "value": {
                      "error": "ApplicationNotFound",
                      "message": "The application ID given does not exist."
                    }
                  },
                  "ApplicationHasCname": {
                    "value": {
                      "error": "ApplicationHasCname",
                      "message": "A CNAME for the application already exists."
                    }
                  },
                  "ApplicationNotLoadBalanced": {
                    "value": {
                      "error": "ApplicationNotLoadBalanced",
                      "message": "Creating a CNAME for an application requires that the application be exposed by ECP layer4 load balancers."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "409": {
            "description": "This error is returned if you try to create a CNAME that already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "CnamePrefixExists",
                      "message": "The prefix is already taken."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "tags": [
          "CNAMEs"
        ],
        "description": "This interface allows you to create a CNAME for your ECP application. The CNAME created will let ECP route global traffic for the application. \n\nNote that ECP can manage global traffic for your application only when the application instances distributed at the edge locations are exposed by ECP defined LoadBalancer4 objects.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "prefix": {
                    "title": "",
                    "type": "string",
                    "description": "Prefix of a CNAME. Must be unique. Allows lower case alphanumeric characters only, and must be no more than 63 characters. Will be auto-generated if unspecified. The prefix will be combined with a fixed DNS zone to form a FQDN."
                  },
                  "applicationID": {
                    "title": "",
                    "type": "string",
                    "description": "ID of application that the CNAME is created for",
                    "x-examples": {}
                  },
                  "description": {
                    "title": "",
                    "type": "string",
                    "description": "Arbitrary text about the CNAME"
                  }
                },
                "required": [
                  "prefix",
                  "applicationID"
                ]
              },
              "examples": {
                "example-1": {
                  "value": {
                    "prefix": "47fcac940c0311ea977416f2b85656ba",
                    "applicationID": "3068f973f47f11e9977416f2b85638cd",
                    "description": "cname for my demo application"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": []
    },
    "/ecp/v1/cnames/{cnameID}": {
      "parameters": [
        {
          "name": "cnameID",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "ID of a CNAME"
        }
      ],
      "get": {
        "summary": "Query a CNAME",
        "tags": [
          "CNAMEs"
        ],
        "responses": {
          "200": {
            "description": "The response contains details of the CNAME.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "cnameID": {
                      "title": "",
                      "type": "string",
                      "description": "ID of a CNAME"
                    },
                    "cname": {
                      "title": "",
                      "type": "string",
                      "description": "FQDN CNAME"
                    },
                    "applicationID": {
                      "title": "",
                      "type": "string",
                      "description": "ID of application that the CNAME is created for",
                      "x-examples": {}
                    },
                    "applicationName": {
                      "title": "",
                      "type": "string",
                      "description": "Name of application that the CNAME is created for"
                    },
                    "description": {
                      "title": "",
                      "type": "string",
                      "description": "Arbitrary text about the CNAME"
                    },
                    "creationTime": {
                      "title": "",
                      "format": "date-time",
                      "type": "string",
                      "description": "Datetime when the resource is created"
                    },
                    "lastUpdateTime": {
                      "type": "string",
                      "title": "",
                      "format": "date-time",
                      "description": "Datetime when the resource is last updated"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "cnameID": "4cbb31772e0211eaae6398ac35ded775",
                      "cname": "b82745fdcad891.ecp.qtlcdn.com",
                      "applicationID": "fb46b51c125411eae36396ac35ded775",
                      "applicationName": "myapp1",
                      "description": "demo cname for myapp1",
                      "creationTime": "2020-10-03T08:23:20Z",
                      "lastUpdateTime": "2020-10-03T08:23:20Z"
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "CnameNotFound",
                      "message": "The CNAME ID given does not exist."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "operationId": "get-cname-by-ID",
        "description": "Get the details of an existing CNAME.",
        "parameters": [
          {
            "name": "On-Behalf-Of",
            "in": "header",
            "description": "If you are a reseller, you can use this header to specify the ID of a child customer and make API call on their behalf.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "patch": {
        "summary": "Update a CNAME",
        "operationId": "patch-cnames-by-ID",
        "responses": {
          "200": {
            "description": "This response indicates the CNAME is successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "cnameID": {
                      "title": "",
                      "type": "string",
                      "description": "ID of a CNAME"
                    },
                    "cname": {
                      "title": "",
                      "type": "string",
                      "description": "FQDN CNAME"
                    },
                    "applicationID": {
                      "title": "",
                      "type": "string",
                      "description": "ID of application that the CNAME is created for",
                      "x-examples": {}
                    },
                    "description": {
                      "title": "",
                      "type": "string",
                      "description": "Arbitrary text about the CNAME"
                    },
                    "creationTime": {
                      "title": "",
                      "format": "date-time",
                      "type": "string",
                      "description": "Datetime when the resource is created"
                    },
                    "lastUpdateTime": {
                      "type": "string",
                      "title": "",
                      "format": "date-time",
                      "description": "Datetime when the resource is last updated"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "cnameID": "4cbb31772e0211eaae6398ac35ded775",
                      "cname": "b82745fdcad891.ecp.qtlcdn.com",
                      "applicationID": "fb46b51c125411eae36396ac35ded775",
                      "applicationName": "myapp1",
                      "description": "demo cname for myapp1",
                      "creationTime": "2020-10-03T08:23:20Z",
                      "lastUpdateTime": "2020-10-03T08:23:20Z"
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "CnameNotFound",
                      "message": "The CNAME ID given does not exist."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "tags": [
          "CNAMEs"
        ],
        "description": "Update an existing CNAME. Only the field \"description\" can be updated. The fields \"prefix\" and \"applicationID\" cannot be updated. If the prefix needs to be changed, please delete the CNAME and create a new one using a new prefix.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "title": "",
                    "type": "string",
                    "description": "Arbitrary text about the CNAME"
                  }
                }
              },
              "examples": {
                "example-1": {
                  "value": {
                    "description": "demo cname for myapp1"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a CNAME",
        "operationId": "delete-cnames-by-ID",
        "responses": {
          "204": {
            "description": "This response is returned if the CNAME is successfully deleted.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "CnameNotFound",
                      "message": "The CNAME ID given does not exist."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "tags": [
          "CNAMEs"
        ],
        "description": "Delete an existing CNAME.\n\nAfter the CNAME is deleted, ECP will stop routing traffic for your application. Please make sure you've made necessary changes to the DNS record(s) for your application before deleting the CNAME."
      }
    },
    "/ecp/v1/metrics/{metric}": {
      "parameters": [
        {
          "name": "metric",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "enum": [
              "inboundTraffic",
              "inboundBandwidth",
              "outboundTraffic",
              "outboundBandwidth",
              "totalTraffic",
              "totalBandwidth",
              "podCount",
              "vcpu",
              "mem",
              "local-ssd",
              "persist-ssd",
              "ipCount"
            ]
          },
          "description": "Usage metric on compute, storage and network resources.\n\nMetric | Description | Measured in\n--- | --- | --- \ninboundTraffic | Amount of data transmitted to ECP during a time period | byte\ninboundBandwidth | Rate of data transfer to ECP during a time period | bps\noutboundTraffic | Amount of data transmitted from ECP during a time period | byte\noutboundBandwidth | Rate of data transfer from ECP during a time period | bps\ntotalTraffic | Amount of data transmitted to and from ECP during a time period | byte\ntotalBandwidth | Rate of data transfer to and from ECP during a time period | bps\nvcpu | Amount of CPU cores allocated for your application instances during a time period | core\nmem | Amount of memory allocated for your application instances during a time peirod | byte\nlocal-ssd | Amount of local SSD storage capacity allocated for your application instances during a time period | byte\npersist-ssd | Amount of remote SSD storage capacity allocated for your application instances during a time period | byte\npodCount | Number of your application instances (i.e. Kubernetes pods) existing during a time period | ea\nipCount | Number of public IPv4 addresses allocated for your applications during a time period. This includes addresses allocated for both application instances and ECP LoadBalancer4s, if any. | ea\n"
        }
      ],
      "get": {
        "summary": "Get summary of resource usage across all ECP locations",
        "tags": [
          "Reports"
        ],
        "responses": {
          "200": {
            "description": "This response returns report data. Note that it is always in UTC time.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "description": "Array of time serialized metric values",
                      "items": {
                        "type": "object",
                        "properties": {
                          "timestamp": {
                            "type": "string",
                            "description": "An RFC 3339 format date representing the beginning of a time interval. It is always in UTC time."
                          },
                          "value": {
                            "type": "number",
                            "description": "A value at that timestamp"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "traffic report at 5 min interval": {
                    "value": {
                      "data": [
                        {
                          "timestamp": "2020-10-02T15:00:00Z",
                          "value": 216326
                        },
                        {
                          "timestamp": "2020-10-02T15:05:00Z",
                          "value": 214326
                        },
                        {
                          "timestamp": "2020-10-02T15:10:00Z",
                          "value": 216226
                        },
                        {
                          "timestamp": "2020-10-02T15:15:00Z",
                          "value": 212126
                        },
                        {
                          "timestamp": "2020-10-02T15:20:00Z",
                          "value": 215326
                        }
                      ]
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Refer to response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "InvalidDateFormat": {
                    "value": {
                      "error": "InvalidDateFormat",
                      "message": "Invalid parameter {startTime | endTime}. {startTime | endTime} is not a valid RFC3339 timestamp. The timestamp should be in \"yyyy-MM-dd'T'HH:mm:ss'Z'\" format."
                    }
                  },
                  "InvalidRange": {
                    "value": {
                      "error": "InvalidRange",
                      "message": "The max time span of {interval} report must be no more than {xxx days}."
                    }
                  },
                  "InvalidRange(1)": {
                    "value": {
                      "error": "InvalidRange",
                      "message": "The parameter 'startTime' cannot be a time in the future."
                    }
                  },
                  "InvalidRange(2)": {
                    "value": {
                      "error": "InvalidRange",
                      "message": "The parameter 'endTime' should be after 'startTime'."
                    }
                  },
                  "InvalidInterval": {
                    "value": {
                      "error": "InvalidInterval",
                      "message": "The interval requested is invalid."
                    }
                  },
                  "InvalidReportRange": {
                    "value": {
                      "error": "InvalidReportRange",
                      "message": "A valid report range shall be “self-only”, “children-only”, or “self+children”."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "InvalidMetric",
                      "message": "The metric given is invalid."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "operationId": "get-summary-reports",
        "description": "Get summary of your resource usage across all ECP locations. Use the \"metric\" parameter to specify a metric and retrieve usage reports related to compute, storage or network.",
        "parameters": [
          {
            "in": "query",
            "name": "startTime",
            "description": "RFC 3339 date indicating the beginning of a time period. Example: <code>startTime=2020-10-30T00:00:00Z</code>. The time must be specified using the UTC timezone. Your startTime may be rounded down to the nearest minute, hour, or day depending on the \"interval\" parameter. For example, if you pass <code>startTime=2020-09-05T03:14:01Z&interval=hourly</code>, the response includes data beginning at 2020-09-05T03:00:00Z.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "endTime",
            "description": "RFC 3339 date indicating the end of a time period. Example: <code>endTime=2020-11-14T00:00:00Z</code> The time must be specified using the UTC timezone. Your endTime may be rounded up to the nearest minute, hour, or day depending on the \"interval\" parameter. For example, if you pass <code>endTime=2020-09-05T03:14:01Z&interval=hourly</code>, the response includes data ending at 2020-09-05T04:00:00Z.",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "oneminute",
                "fiveminutes",
                "hourly",
                "daily",
                "monthly"
              ]
            },
            "name": "interval",
            "required": true,
            "description": "The granularity of returned data. In the backend, raw data is reported every minute. The data is then aggregated to give reports of different granularities. The aggregation method is “sum” for those traffic metrics, and \"average\" for all other metrics. Note that \"oneminute\" interval is available only when the timespan is not longer than 7 days and that \"fiveminutes\" interval is available only when the timespan is not longer than 31 days.",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "default": "self-only",
              "enum": [
                "self-only",
                "children-only",
                "self+children"
              ]
            },
            "name": "Report-Range",
            "description": "An optional header that resellers can use to specify whether to include report data from children customers.",
            "in": "header"
          },
          {
            "name": "On-Behalf-Of",
            "in": "header",
            "description": "If you are a reseller, you can use this header to specify the ID of a child customer and make API call on their behalf.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/ecp/v1/metrics/{metric}/servergroups": {
      "parameters": [
        {
          "name": "metric",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "enum": [
              "inboundTraffic",
              "inboundBandwidth",
              "outboundTraffic",
              "outboundBandwidth",
              "totalTraffic",
              "totalBandwidth",
              "podCount",
              "vcpu",
              "mem",
              "local-ssd",
              "persist-ssd",
              "ipCount"
            ]
          },
          "description": "Usage metric on compute, storage and network resources.\n\nMetric | Description | Measured in\n--- | --- | --- \ninboundTraffic | Amount of data transmitted to ECP during a time period | byte\ninboundBandwidth | Rate of data transfer to ECP during a time period | bps\noutboundTraffic | Amount of data transmitted from ECP during a time period | byte\noutboundBandwidth | Rate of data transfer from ECP during a time period | bps\ntotalTraffic | Amount of data transmitted to and from ECP during a time period | byte\ntotalBandwidth | Rate of data transfer to and from ECP during a time period | bps\nvcpu | Amount of CPU cores allocated for your application instances during a time period | core\nmem | Amount of memory allocated for your application instances during a time peirod | byte\nlocal-ssd | Amount of local SSD storage capacity allocated for your application instances during a time period | byte\npersist-ssd | Amount of remote SSD storage capacity allocated for your application instances during a time period | byte\npodCount | Number of your application instances (i.e. Kubernetes pods) existing during a time period | ea\nipCount | Number of public IPv4 addresses allocated for your applications during a time period. This includes addresses allocated for both application instances and ECP LoadBalancer4s, if any. | ea\n"
        }
      ],
      "get": {
        "summary": "Get summary of resource usage grouped per ECP server groups",
        "tags": [
          "Reports"
        ],
        "responses": {
          "200": {
            "description": "This response returns report data. Note that it is always in UTC time.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "properties": {
                    "series": {
                      "type": "array",
                      "description": "Summary of resource usage grouped per ECP server groups",
                      "items": {
                        "type": "object",
                        "properties": {
                          "serverGroup": {
                            "type": "string",
                            "enum": [
                              "standard",
                              "premium",
                              "premium+",
                              "ultra"
                            ],
                            "description": "ECP server group"
                          },
                          "data": {
                            "type": "array",
                            "description": "Array of time serialized metric values",
                            "items": {
                              "type": "object",
                              "properties": {
                                "timestamp": {
                                  "type": "string",
                                  "description": "An RFC 3339 format date representing the beginning of a time interval. It is always in UTC time."
                                },
                                "value": {
                                  "type": "number",
                                  "description": "A value at that timestamp"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "traffic report at 5 minute interval": {
                    "value": {
                      "series": [
                        {
                          "serverGroup": "standard",
                          "data": [
                            {
                              "timestamp": "2020-10-02T15:00:00Z",
                              "value": 216326
                            },
                            {
                              "timestamp": "2020-10-02T15:05:00Z",
                              "value": 214326
                            },
                            {
                              "timestamp": "2020-10-02T15:10:00Z",
                              "value": 216226
                            },
                            {
                              "timestamp": "2020-10-02T15:15:00Z",
                              "value": 212126
                            },
                            {
                              "timestamp": "2020-10-02T15:20:00Z",
                              "value": 215326
                            }
                          ]
                        },
                        {
                          "serverGroup": "premium",
                          "data": [
                            {
                              "timestamp": "2020-10-02T15:00:00Z",
                              "value": 115326
                            },
                            {
                              "timestamp": "2020-10-02T15:05:00Z",
                              "value": 115326
                            },
                            {
                              "timestamp": "2020-10-02T15:10:00Z",
                              "value": 135326
                            },
                            {
                              "timestamp": "2020-10-02T15:15:00Z",
                              "value": 145326
                            },
                            {
                              "timestamp": "2020-10-02T15:20:00Z",
                              "value": 125326
                            }
                          ]
                        },
                        {
                          "serverGroup": "premium+",
                          "data": [
                            {
                              "timestamp": "2020-10-02T15:00:00Z",
                              "value": 0
                            },
                            {
                              "timestamp": "2020-10-02T15:05:00Z",
                              "value": 0
                            },
                            {
                              "timestamp": "2020-10-02T15:10:00Z",
                              "value": 0
                            },
                            {
                              "timestamp": "2020-10-02T15:15:00Z",
                              "value": 0
                            },
                            {
                              "timestamp": "2020-10-02T15:20:00Z",
                              "value": 0
                            }
                          ]
                        },
                        {
                          "serverGroup": "ultra",
                          "data": [
                            {
                              "timestamp": "2020-10-02T15:00:00Z",
                              "value": 134467
                            },
                            {
                              "timestamp": "2020-10-02T15:05:00Z",
                              "value": 137467
                            },
                            {
                              "timestamp": "2020-10-02T15:10:00Z",
                              "value": 124467
                            },
                            {
                              "timestamp": "2020-10-02T15:15:00Z",
                              "value": 154467
                            },
                            {
                              "timestamp": "2020-10-02T15:20:00Z",
                              "value": 135467
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Refer to response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "InvalidDateFormat": {
                    "value": {
                      "error": "InvalidDateFormat",
                      "message": "Invalid parameter {startTime | endTime}. {startTime | endTime} is not a valid RFC3339 timestamp. The timestamp should be in \"yyyy-MM-dd'T'HH:mm:ss'Z'\" format."
                    }
                  },
                  "InvalidRange": {
                    "value": {
                      "error": "InvalidRange",
                      "message": "The max time span of {interval} report must be no more than {xxx days}."
                    }
                  },
                  "InvalidRange(1)": {
                    "value": {
                      "error": "InvalidRange",
                      "message": "The parameter 'startTime' cannot be a time in the future."
                    }
                  },
                  "InvalidRange(2)": {
                    "value": {
                      "error": "InvalidRange",
                      "message": "The parameter 'endTime' should be after 'startTime'."
                    }
                  },
                  "InvalidInterval": {
                    "value": {
                      "error": "InvalidInterval",
                      "message": "The interval requested is invalid."
                    }
                  },
                  "InvalidReportRange": {
                    "value": {
                      "error": "InvalidReportRange",
                      "message": "A valid report range shall be “self-only”, “children-only”, or “self+children”."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "InvalidMetric",
                      "message": "The metric given is invalid."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "operationId": "get-reports-by-servergroups",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "default": "self-only",
              "enum": [
                "self-only",
                "children-only",
                "self+children"
              ]
            },
            "name": "Report-Range",
            "description": "An optional header that resellers can use to specify whether to include report data from children customers.",
            "in": "header"
          },
          {
            "in": "query",
            "name": "startTime",
            "description": "RFC 3339 date indicating the beginning of a time period. Example: <code>startTime=2020-10-30T00:00:00Z</code>. The time must be specified using the UTC timezone. Your startTime may be rounded down to the nearest minute, hour, or day depending on the \"interval\" parameter. For example, if you pass <code>startTime=2020-09-05T03:14:01Z&interval=hourly</code>, the response includes data beginning at 2020-09-05T03:00:00Z.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "endTime",
            "description": "RFC 3339 date indicating the end of a time period. Example: <code>endTime=2020-11-14T00:00:00Z</code> The time must be specified using the UTC timezone. Your endTime may be rounded up to the nearest minute, hour, or day depending on the \"interval\" parameter. For example, if you pass <code>endTime=2020-09-05T03:14:01Z&interval=hourly</code>, the response includes data ending at 2020-09-05T04:00:00Z.",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "oneminute",
                "fiveminutes",
                "hourly",
                "daily",
                "monthly"
              ]
            },
            "name": "interval",
            "required": true,
            "description": "The granularity of returned data. In the backend, raw data is reported every minute. The data is then aggregated to give reports of different granularities. The aggregation method is “sum” for those traffic metrics, and \"average\" for all other metrics. Note that \"oneminute\" interval is available only when the timespan is not longer than 7 days and that \"fiveminutes\" interval is available only when the timespan is not longer than 31 days.",
            "in": "query"
          },
          {
            "name": "On-Behalf-Of",
            "in": "header",
            "description": "If you are a reseller, you can use this header to specify the ID of a child customer and make API call on their behalf.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "Get summary of your resource usage grouped per ECP server groups. Use the \"metric\" parameter to specify a metric and retrieve usage reports related to compute, storage or network."
      }
    },
    "/ecp/v1/metrics/{metric}/servergroups/{servergroup}": {
      "parameters": [
        {
          "name": "metric",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "enum": [
              "inboundTraffic",
              "inboundBandwidth",
              "outboundTraffic",
              "outboundBandwidth",
              "totalTraffic",
              "totalBandwidth",
              "podCount",
              "vcpu",
              "mem",
              "local-ssd",
              "persist-ssd",
              "ipCount"
            ]
          },
          "description": "Usage metric on compute, storage and network resources.\n\nMetric | Description | Measured in\n--- | --- | --- \ninboundTraffic | Amount of data transmitted to ECP during a time period | byte\ninboundBandwidth | Rate of data transfer to ECP during a time period | bps\noutboundTraffic | Amount of data transmitted from ECP during a time period | byte\noutboundBandwidth | Rate of data transfer from ECP during a time period | bps\ntotalTraffic | Amount of data transmitted to and from ECP during a time period | byte\ntotalBandwidth | Rate of data transfer to and from ECP during a time period | bps\nvcpu | Amount of CPU cores allocated for your application instances during a time period | core\nmem | Amount of memory allocated for your application instances during a time peirod | byte\nlocal-ssd | Amount of local SSD storage capacity allocated for your application instances during a time period | byte\npersist-ssd | Amount of remote SSD storage capacity allocated for your application instances during a time period | byte\npodCount | Number of your application instances (i.e. Kubernetes pods) existing during a time period | ea\nipCount | Number of public IPv4 addresses allocated for your applications during a time period. This includes addresses allocated for both application instances and ECP LoadBalancer4s, if any. | ea\n"
        },
        {
          "schema": {
            "type": "string",
            "enum": [
              "standard",
              "premium",
              "premium+",
              "ultra"
            ]
          },
          "name": "servergroup",
          "description": "Code of an ECP server group",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get summary of resource usage in a specific ECP server group",
        "tags": [
          "Reports"
        ],
        "responses": {
          "200": {
            "description": "This response returns report data. Note that it is always in UTC time.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "description": "Array of time serialized metric values",
                      "items": {
                        "type": "object",
                        "properties": {
                          "timestamp": {
                            "type": "string",
                            "description": "An RFC 3339 format date representing the beginning of a time interval. It is always in UTC time."
                          },
                          "value": {
                            "type": "number",
                            "description": "A value at that timestamp"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "traffic report at 5 minute interval": {
                    "value": {
                      "data": [
                        {
                          "timestamp": "2020-10-02T15:00:00Z",
                          "value": 216326
                        },
                        {
                          "timestamp": "2020-10-02T15:05:00Z",
                          "value": 214326
                        },
                        {
                          "timestamp": "2020-10-02T15:10:00Z",
                          "value": 216226
                        },
                        {
                          "timestamp": "2020-10-02T15:15:00Z",
                          "value": 212126
                        },
                        {
                          "timestamp": "2020-10-02T15:20:00Z",
                          "value": 215326
                        }
                      ]
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Refer to response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "InvalidDateFormat": {
                    "value": {
                      "error": "InvalidDateFormat",
                      "message": "Invalid parameter {startTime | endTime}. {startTime | endTime} is not a valid RFC3339 timestamp. The timestamp should be in \"yyyy-MM-dd'T'HH:mm:ss'Z'\" format."
                    }
                  },
                  "InvalidRange": {
                    "value": {
                      "error": "InvalidRange",
                      "message": "The max time span of {interval} report must be no more than {xxx days}."
                    }
                  },
                  "InvalidRange(1)": {
                    "value": {
                      "error": "InvalidRange",
                      "message": "The parameter 'startTime' cannot be a time in the future."
                    }
                  },
                  "InvalidRange(2)": {
                    "value": {
                      "error": "InvalidRange",
                      "message": "The parameter 'endTime' should be after 'startTime'."
                    }
                  },
                  "InvalidInterval": {
                    "value": {
                      "error": "InvalidInterval",
                      "message": "The interval requested is invalid."
                    }
                  },
                  "InvalidReportRange": {
                    "value": {
                      "error": "InvalidReportRange",
                      "message": "A valid report range shall be “self-only”, “children-only”, or “self+children”."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "InvalidMetric": {
                    "value": {
                      "error": "InvalidMetric",
                      "message": "The metric given is invalid."
                    }
                  },
                  "ServerGroupNotExist": {
                    "value": {
                      "error": "ServerGroupNotExist",
                      "message": "The serverGroup given is invalid or does not exist."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "operationId": "get-reports-for-a-server-group",
        "description": "Get summary of resource usage in a specific ECP server group. Use the \"metric\" parameter to specify a metric and retrieve usage reports related to compute, storage or network.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "default": "self-only",
              "enum": [
                "self-only",
                "children-only",
                "self+children"
              ]
            },
            "name": "Report-Range",
            "description": "An optional header that resellers can use to specify whether to include report data from children customers.",
            "in": "header"
          },
          {
            "in": "query",
            "name": "startTime",
            "description": "RFC 3339 date indicating the beginning of a time period. Example: <code>startTime=2020-10-30T00:00:00Z</code>. The time must be specified using the UTC timezone. Your startTime may be rounded down to the nearest minute, hour, or day depending on the \"interval\" parameter. For example, if you pass <code>startTime=2020-09-05T03:14:01Z&interval=hourly</code>, the response includes data beginning at 2020-09-05T03:00:00Z.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "endTime",
            "description": "RFC 3339 date indicating the end of a time period. Example: <code>endTime=2020-11-14T00:00:00Z</code> The time must be specified using the UTC timezone. Your endTime may be rounded up to the nearest minute, hour, or day depending on the \"interval\" parameter. For example, if you pass <code>endTime=2020-09-05T03:14:01Z&interval=hourly</code>, the response includes data ending at 2020-09-05T04:00:00Z.",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "oneminute",
                "fiveminutes",
                "hourly",
                "daily",
                "monthly"
              ]
            },
            "name": "interval",
            "required": true,
            "description": "The granularity of returned data. In the backend, raw data is reported every minute. The data is then aggregated to give reports of different granularities. The aggregation method is “sum” for those traffic metrics, and \"average\" for all other metrics. Note that \"oneminute\" interval is available only when the timespan is not longer than 7 days and that \"fiveminutes\" interval is available only when the timespan is not longer than 31 days.",
            "in": "query"
          },
          {
            "name": "On-Behalf-Of",
            "in": "header",
            "description": "If you are a reseller, you can use this header to specify the ID of a child customer and make API call on their behalf.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/ecp/v1/metrics/{metric}/pops/{pop}": {
      "parameters": [
        {
          "name": "metric",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "enum": [
              "inboundTraffic",
              "inboundBandwidth",
              "outboundTraffic",
              "outboundBandwidth",
              "totalTraffic",
              "totalBandwidth",
              "podCount",
              "vcpu",
              "mem",
              "local-ssd",
              "persist-ssd",
              "ipCount"
            ]
          },
          "description": "Usage metric on compute, storage and network resources.\n\nMetric | Description | Measured in\n--- | --- | --- \ninboundTraffic | Amount of data transmitted to ECP during a time period | byte\ninboundBandwidth | Rate of data transfer to ECP during a time period | bps\noutboundTraffic | Amount of data transmitted from ECP during a time period | byte\noutboundBandwidth | Rate of data transfer from ECP during a time period | bps\ntotalTraffic | Amount of data transmitted to and from ECP during a time period | byte\ntotalBandwidth | Rate of data transfer to and from ECP during a time period | bps\nvcpu | Amount of CPU cores allocated for your application instances during a time period | core\nmem | Amount of memory allocated for your application instances during a time peirod | byte\nlocal-ssd | Amount of local SSD storage capacity allocated for your application instances during a time period | byte\npersist-ssd | Amount of remote SSD storage capacity allocated for your application instances during a time period | byte\npodCount | Number of your application instances (i.e. Kubernetes pods) existing during a time period | ea\nipCount | Number of public IPv4 addresses allocated for your applications during a time period. This includes addresses allocated for both application instances and ECP LoadBalancer4s, if any. | ea\n"
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "pop",
          "description": "Code of an ECP location",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get resource usage at a specific ECP location",
        "tags": [
          "Reports"
        ],
        "responses": {
          "200": {
            "description": "This response returns report data. Note that it is always in UTC time.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "description": "Array of time serialized metric values",
                      "items": {
                        "type": "object",
                        "properties": {
                          "timestamp": {
                            "type": "string",
                            "description": "An RFC 3339 format date representing the beginning of a time interval. It is always in UTC time."
                          },
                          "value": {
                            "type": "number",
                            "description": "A value at that timestamp"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "traffic report at 5 minute interval": {
                    "value": {
                      "data": [
                        {
                          "timestamp": "2020-10-02T15:00:00Z",
                          "value": 216326
                        },
                        {
                          "timestamp": "2020-10-02T15:05:00Z",
                          "value": 214326
                        },
                        {
                          "timestamp": "2020-10-02T15:10:00Z",
                          "value": 216226
                        },
                        {
                          "timestamp": "2020-10-02T15:15:00Z",
                          "value": 212126
                        },
                        {
                          "timestamp": "2020-10-02T15:20:00Z",
                          "value": 215326
                        }
                      ]
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Refer to response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "InvalidDateFormat": {
                    "value": {
                      "error": "InvalidDateFormat",
                      "message": "Invalid parameter {startTime | endTime}. {startTime | endTime} is not a valid RFC3339 timestamp. The timestamp should be in \"yyyy-MM-dd'T'HH:mm:ss'Z'\" format."
                    }
                  },
                  "InvalidRange": {
                    "value": {
                      "error": "InvalidRange",
                      "message": "The max time span of {interval} report must be no more than {xxx days}."
                    }
                  },
                  "InvalidRange(1)": {
                    "value": {
                      "error": "InvalidRange",
                      "message": "The parameter 'startTime' cannot be a time in the future."
                    }
                  },
                  "InvalidRange(2)": {
                    "value": {
                      "error": "InvalidRange",
                      "message": "The parameter 'endTime' should be after 'startTime'."
                    }
                  },
                  "InvalidInterval": {
                    "value": {
                      "error": "InvalidInterval",
                      "message": "The interval requested is invalid."
                    }
                  },
                  "InvalidReportRange": {
                    "value": {
                      "error": "InvalidReportRange",
                      "message": "A valid report range shall be “self-only”, “children-only”, or “self+children”."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "InvalidMetric": {
                    "value": {
                      "error": "InvalidMetric",
                      "message": "The metric given is invalid."
                    }
                  },
                  "PoPNotExist": {
                    "value": {
                      "error": "PoPNotExist",
                      "message": "The PoP given is invalid or does not exist."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "operationId": "get-reports-for-a-pop",
        "description": "Get report of resource usage at a specific ECP location. Use the \"metric\" parameter to specify a metric and retrieve usage reports related to compute, storage or network.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "default": "self-only",
              "enum": [
                "self-only",
                "children-only",
                "self+children"
              ]
            },
            "name": "Report-Range",
            "description": "An optional header that resellers can use to specify whether to include report data from children customers.",
            "in": "header"
          },
          {
            "in": "query",
            "name": "startTime",
            "description": "RFC 3339 date indicating the beginning of a time period. Example: <code>startTime=2020-10-30T00:00:00Z</code>. The time must be specified using the UTC timezone. Your startTime may be rounded down to the nearest minute, hour, or day depending on the \"interval\" parameter. For example, if you pass <code>startTime=2020-09-05T03:14:01Z&interval=hourly</code>, the response includes data beginning at 2020-09-05T03:00:00Z.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "endTime",
            "description": "RFC 3339 date indicating the end of a time period. Example: <code>endTime=2020-11-14T00:00:00Z</code> The time must be specified using the UTC timezone. Your endTime may be rounded up to the nearest minute, hour, or day depending on the \"interval\" parameter. For example, if you pass <code>endTime=2020-09-05T03:14:01Z&interval=hourly</code>, the response includes data ending at 2020-09-05T04:00:00Z.",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "oneminute",
                "fiveminutes",
                "hourly",
                "daily",
                "monthly"
              ]
            },
            "name": "interval",
            "required": true,
            "description": "The granularity of returned data. In the backend, raw data is reported every minute. The data is then aggregated to give reports of different granularities. The aggregation method is “sum” for those traffic metrics, and \"average\" for all other metrics. Note that \"oneminute\" interval is available only when the timespan is not longer than 7 days and that \"fiveminutes\" interval is available only when the timespan is not longer than 31 days.",
            "in": "query"
          },
          {
            "name": "On-Behalf-Of",
            "in": "header",
            "description": "If you are a reseller, you can use this header to specify the ID of a child customer and make API call on their behalf.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/ecp/v1/metrics/{metric}/applications/{applicationID}/instances/{instanceID}": {
      "parameters": [
        {
          "name": "metric",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string",
            "enum": [
              "inboundTraffic",
              "inboundBandwidth",
              "outboundTraffic",
              "outboundBandwidth",
              "cpuUsage",
              "memUsage",
              "diskUsage"
            ]
          },
          "description": "Usage metric on compute, storage and network resources.\n\nMetric | Description | Measured in\n--- | --- | ---\ninboundTraffic | Amount of data transmitted to an application instance during a time period | byte\ninboundBandwidth | Rate of data transfer to an application instance during a time period | bps\noutboundTraffic | Amount of data transmitted from an application instance during a time period | byte\noutboundBandwidth | Rate of data transfer from an application instance during a time period | bps\ncpuUsage | Amount of CPU cores utilized by processes running in an application instance during a time period | core\nmemUsage | Amount of memory utilized by processes running in an application instance during a time period | byte\ndiskUsage | Disk utilization rate. Here \"disk\" could mean the container rootFS and any data volume attached to an application instance. | --\n"
        },
        {
          "name": "applicationID",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "ID of an ECP application"
        },
        {
          "name": "instanceID",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "ID of an application instance"
        }
      ],
      "get": {
        "summary": "Get resource usage for a specific application instance",
        "tags": [
          "Reports"
        ],
        "responses": {
          "200": {
            "description": "This response returns report data. Note that it is always in UTC time.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "CPU/memory/traffic report",
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "description": "Array of time serialized metric values. This schema is used when the metric param is of a value other than 'diskUsage'.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "timestamp": {
                                "type": "string",
                                "description": "An RFC 3339 format date representing the beginning of a time interval. It is always in UTC time."
                              },
                              "value": {
                                "type": "number",
                                "description": "A value at that timestamp"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "title": "Disk utilization report",
                      "type": "object",
                      "description": "",
                      "properties": {
                        "data": {
                          "type": "array",
                          "description": "Array of time serialized metric values. This schema is used when the metric param is of the value 'diskUsage'.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "timestamp": {
                                "type": "string",
                                "description": "An RFC 3339 format date representing the beginning of a time interval. It is always in UTC time."
                              },
                              "volumes": {
                                "type": "array",
                                "description": "Array of volumes for an application instance, including container rootFS and data volumes (if any).",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "volume": {
                                      "type": "string",
                                      "description": "Name of a volume. \"Root_{containername}\" means the RootFS of {containername}. \"PVC_{PVCname}\" means a data volume which is backed by a PVC (persistentVolumeClaim)."
                                    },
                                    "value": {
                                      "type": "number",
                                      "description": "Disk utilization rate, e.g. \"0.2\" means 20% of disk capacity is used."
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ],
                  "description": "There are 2 response schemas. The schema for \"diskUsage\" metric is different from the schema for all other metrics."
                },
                "examples": {
                  "cpuUsage": {
                    "value": {
                      "data": [
                        {
                          "timestamp": "2020-10-02T15:00:00Z",
                          "value": 1.3
                        },
                        {
                          "timestamp": "2020-10-02T15:05:00Z",
                          "value": 1.2
                        },
                        {
                          "timestamp": "2020-10-02T15:10:00Z",
                          "value": 1.5
                        },
                        {
                          "timestamp": "2020-10-02T15:15:00Z",
                          "value": 1.3
                        },
                        {
                          "timestamp": "2020-10-02T15:20:00Z",
                          "value": 1.2
                        }
                      ]
                    }
                  },
                  "diskUsage": {
                    "value": {
                      "data": [
                        {
                          "timestamp": "2020-10-02T15:00:00Z",
                          "volumes": [
                            {
                              "volume": "Root_container1",
                              "value": 0.22
                            },
                            {
                              "volume": "Root_container2",
                              "value": 0.36
                            },
                            {
                              "volume": "PVC_data",
                              "value": 0.27
                            }
                          ]
                        },
                        {
                          "timestamp": "2020-10-02T15:05:00Z",
                          "volumes": [
                            {
                              "volume": "Root_container1",
                              "value": 0.22
                            },
                            {
                              "volume": "Root_container2",
                              "value": 0.16
                            },
                            {
                              "volume": "PVC_data",
                              "value": 0.27
                            }
                          ]
                        },
                        {
                          "timestamp": "2020-10-02T15:10:00Z",
                          "volumes": [
                            {
                              "volume": "Root_container1",
                              "value": 0.22
                            },
                            {
                              "volume": "Root_container2",
                              "value": 0.22
                            },
                            {
                              "volume": "PVC_data",
                              "value": 0.28
                            }
                          ]
                        },
                        {
                          "timestamp": "2020-10-02T15:15:00Z",
                          "volumes": [
                            {
                              "volume": "Root_container1",
                              "value": 0.22
                            },
                            {
                              "volume": "Root_container2",
                              "value": 0.36
                            },
                            {
                              "volume": "PVC_data",
                              "value": 0.27
                            }
                          ]
                        },
                        {
                          "timestamp": "2020-10-02T15:20:00Z",
                          "volumes": [
                            {
                              "volume": "Root_container1",
                              "value": 0.22
                            },
                            {
                              "volume": "Root_container2",
                              "value": 0.16
                            },
                            {
                              "volume": "PVC_data",
                              "value": 0.26
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Refer to response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "InvalidDateFormat": {
                    "value": {
                      "error": "InvalidDateFormat",
                      "message": "Invalid parameter {startTime | endTime}. {startTime | endTime} is not a valid RFC3339 timestamp. The timestamp should be in \"yyyy-MM-dd'T'HH:mm:ss'Z'\" format."
                    }
                  },
                  "InvalidRange": {
                    "value": {
                      "error": "InvalidRange",
                      "message": "The max time span of {interval} report must be no more than {xxx days}."
                    }
                  },
                  "InvalidRange(1)": {
                    "value": {
                      "error": "InvalidRange",
                      "message": "The parameter 'startTime' cannot be a time in the future."
                    }
                  },
                  "InvalidRange(2)": {
                    "value": {
                      "error": "InvalidRange",
                      "message": "The parameter 'endTime' should be after 'startTime'."
                    }
                  },
                  "InvalidInterval": {
                    "value": {
                      "error": "InvalidInterval",
                      "message": "The interval requested is invalid."
                    }
                  },
                  "InvalidReportRange": {
                    "value": {
                      "error": "InvalidReportRange",
                      "message": "A valid report range shall be “self-only”, “children-only”, or “self+children”."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "InvalidMetric": {
                    "value": {
                      "error": "InvalidMetric",
                      "message": "The metric given is invalid."
                    }
                  },
                  "ApplicationNotFound": {
                    "value": {
                      "error": "ApplicationNotFound",
                      "message": "The application ID given does not exist."
                    }
                  },
                  "InstanceNotFound": {
                    "value": {
                      "error": "InstanceNotFound",
                      "message": "The instance specified does not exist, or is not an instance of the given application."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "operationId": "get-reports-for-an-instance",
        "description": "Get report of actual resource usage by a specific application instance (i.e. Kubernetes pod). Use the \"metric\" parameter to specify a metric and retrieve reports related to netowrk i/o or cpu/memory/disks utilization.",
        "parameters": [
          {
            "in": "query",
            "name": "startTime",
            "description": "RFC 3339 date indicating the beginning of a time period. Example: <code>startTime=2020-10-30T00:00:00Z</code>. The time must be specified using the UTC timezone. Your startTime may be rounded down to the nearest minute, hour, or day depending on the \"interval\" parameter. For example, if you pass <code>startTime=2020-09-05T03:14:01Z&interval=hourly</code>, the response includes data beginning at 2020-09-05T03:00:00Z.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "endTime",
            "description": "RFC 3339 date indicating the end of a time period. Example: <code>endTime=2020-11-14T00:00:00Z</code> The time must be specified using the UTC timezone. Your endTime may be rounded up to the nearest minute, hour, or day depending on the \"interval\" parameter. For example, if you pass <code>endTime=2020-09-05T03:14:01Z&interval=hourly</code>, the response includes data ending at 2020-09-05T04:00:00Z.",
            "required": true
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "oneminute",
                "fiveminutes",
                "hourly",
                "daily",
                "monthly"
              ]
            },
            "name": "interval",
            "required": true,
            "description": "The granularity of returned data. In the backend, raw data is reported every minute. The data is then aggregated to give reports of different granularities. The aggregation method is “sum” for those traffic metrics, and \"average\" for all other metrics. Note that \"oneminute\" interval is available only when the timespan is not longer than 7 days and that \"fiveminutes\" interval is available only when the timespan is not longer than 31 days.",
            "in": "query"
          },
          {
            "name": "On-Behalf-Of",
            "in": "header",
            "description": "If you are a reseller, you can use this header to specify the ID of a child customer and make API call on their behalf.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/ecp/v1/regions": {
      "get": {
        "summary": "Query list of ECP regions",
        "responses": {
          "200": {
            "description": "This response contains a list of ECP regions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "regions": {
                      "type": "array",
                      "description": "Array of ECP regions",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string",
                            "description": "Code of an ECP region, e.g. \"APAC\""
                          },
                          "description": {
                            "type": "string",
                            "description": "Some text describing a region, e.g. “Asia Pacific without mainland China” for the region “APAC”."
                          },
                          "priority": {
                            "type": "integer",
                            "description": "Priority of a region which affects how instances of an application are distributed. Valid value is within the range 1~100. Higher value means higher priority. Each ECP PoP might be grouped into multiple ECP regions of differnt priorities. When ECP distributes application instances to ECP PoPs, regions of higher priority will be satisfied firt."
                          }
                        }
                      }
                    },
                    "totalCount": {
                      "title": "",
                      "type": "integer",
                      "description": "Total number of resources"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "regions": [
                        {
                          "code": "NA-WEST",
                          "description": "East of North America",
                          "priority": 10
                        },
                        {
                          "code": "NA-EAST",
                          "description": "West of North America",
                          "priority": 10
                        },
                        {
                          "code": "EU",
                          "description": "Europe",
                          "priority": 10
                        },
                        {
                          "code": "APAC",
                          "description": "Asia Pacific excluding mainland China",
                          "priority": 10
                        },
                        {
                          "code": "CN",
                          "description": "mainland China",
                          "priority": 10
                        }
                      ],
                      "totalCount": 5
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Refer to response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "InvalidListOffset": {
                    "value": {
                      "error": "InvalidListOffset",
                      "message": "The value of offset must be a valid non-negative integer."
                    }
                  },
                  "InvalidListLimit": {
                    "value": {
                      "error": "InvalidListLimit",
                      "message": "The value of limit must be a valid integer between 0 and 200, both inclusive. Set limit to 0 to retrieve a complete list."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "operationId": "get-regions",
        "description": "Get a list of ECP regions.",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates the first resource to return. The first has an offset of 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of resources to return. To retrieve a complete list of resources, please pass this parameter with value “0”.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 200,
              "minimum": 0
            }
          }
        ],
        "tags": [
          "ECP Locations"
        ]
      },
      "parameters": []
    },
    "/ecp/v1/pops": {
      "get": {
        "summary": "Query list of ECP PoPs",
        "responses": {
          "200": {
            "description": "The response contains a list of ECP PoPs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "PoPs": {
                      "type": "array",
                      "description": "Array of ECP PoPs",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string",
                            "description": "Code of an ECP PoP"
                          },
                          "description": {
                            "type": "string",
                            "description": "Full name of an ECP PoP, indicating country and city where the PoP is located"
                          },
                          "status": {
                            "type": "string",
                            "enum": [
                              "online",
                              "offline",
                              "suspended"
                            ],
                            "description": "Status of an ECP PoP"
                          },
                          "serverGroup": {
                            "type": "string",
                            "enum": [
                              "standard",
                              "premium",
                              "premium+",
                              "ultra"
                            ],
                            "description": "Server group that reflects the costs of an ECP PoP"
                          },
                          "longitude": {
                            "description": "Geographic longtitude of an ECP PoP",
                            "type": "string"
                          },
                          "latitude": {
                            "description": "Geographic latitude of an ECP PoP",
                            "type": "string"
                          },
                          "regions": {
                            "type": "array",
                            "description": "Array of ECP regions that an ECP PoP is grouped into",
                            "items": {
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": "string",
                                  "description": "Code of an ECP region"
                                },
                                "description": {
                                  "type": "string",
                                  "description": "Description of an ECP region"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "totalCount": {
                      "title": "",
                      "type": "integer",
                      "description": "Total number of resources"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "PoPs": [
                        {
                          "code": "den",
                          "description": "Denver,US",
                          "latitude": "39.4421",
                          "longitude": "-104.5905",
                          "regions": [
                            {
                              "code": "NA-WEST",
                              "description": "West of North America"
                            }
                          ],
                          "serverGroup": "standard",
                          "status": "online"
                        },
                        {
                          "code": "jfk",
                          "description": "New York,US",
                          "latitude": "40.40",
                          "longitude": "-73.56",
                          "regions": [
                            {
                              "code": "NA-EAST",
                              "description": "East of North America"
                            }
                          ],
                          "serverGroup": "standard",
                          "status": "online"
                        },
                        {
                          "code": "iad",
                          "description": "Ashburn,US",
                          "latitude": "39.03",
                          "longitude": "-77.48",
                          "regions": [
                            {
                              "code": "NA-EAST",
                              "description": "East of North America"
                            }
                          ],
                          "serverGroup": "standard",
                          "status": "online"
                        },
                        {
                          "code": "sjc",
                          "description": "San Jose,US",
                          "latitude": "37.1815",
                          "longitude": "-121.2252",
                          "regions": [
                            {
                              "code": "NA-WEST",
                              "description": "West of North America"
                            }
                          ],
                          "serverGroup": "standard",
                          "status": "online"
                        },
                        {
                          "code": "mxp",
                          "description": "Milan,IT",
                          "latitude": "45.2801",
                          "longitude": "9.1124",
                          "regions": [
                            {
                              "code": "EU",
                              "description": "Europe"
                            }
                          ],
                          "serverGroup": "standard",
                          "status": "online"
                        },
                        {
                          "code": "waw",
                          "description": "Warsaw,PL",
                          "latitude": "52.1348",
                          "longitude": "21.0039",
                          "regions": [
                            {
                              "code": "EU",
                              "description": "Europe"
                            }
                          ],
                          "serverGroup": "standard",
                          "status": "online"
                        }
                      ],
                      "totalCount": 6
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Refer to response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "InvalidListOffset": {
                    "value": {
                      "error": "InvalidListOffset",
                      "message": "The value of offset must be a valid non-negative integer."
                    }
                  },
                  "InvalidListLimit": {
                    "value": {
                      "error": "InvalidListLimit",
                      "message": "The value of limit must be a valid integer between 0 and 200, both inclusive. Set limit to 0 to retrieve a complete list."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "operationId": "get-pops",
        "description": "Get a list of ECP PoPs.",
        "parameters": [
          {
            "in": "query",
            "name": "searchString",
            "description": "Keywords to search for particular resources. The value is matched against the code and description of a PoP.",
            "schema": {
              "type": "string"
            }
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "online",
                "offline",
                "suspended"
              ]
            },
            "in": "query",
            "name": "status",
            "description": "Status of an ECP PoP"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "region",
            "description": "Code of an ECP region which represents a set of ECP PoPs grouped together"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "standard",
                "premium",
                "premium+",
                "ultra"
              ]
            },
            "in": "query",
            "name": "serverGroup",
            "description": "ECP server group which represents a set of ECP PoPs grouped per costs for billing purpose"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates the first resource to return. The first has an offset of 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of resources to return. To retrieve a complete list of resources, please pass this parameter with value “0”.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 200,
              "minimum": 0
            }
          }
        ],
        "tags": [
          "ECP Locations"
        ]
      },
      "parameters": []
    },
    "/ecp/v1/applications": {
      "get": {
        "summary": "Query applications list",
        "tags": [
          "Applications"
        ],
        "responses": {
          "200": {
            "description": "The response contains a list of applications.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "applications": {
                      "type": "array",
                      "description": "Array of ECP applications",
                      "items": {
                        "type": "object",
                        "properties": {
                          "applicationID": {
                            "title": "",
                            "type": "string",
                            "description": "ID of an ECP application"
                          },
                          "appName": {
                            "title": "",
                            "type": "string",
                            "description": "Name of an ECP application. Must contain only lower-case alphanumeric characters and ‘-', must start and end with a lower-case alphanumeric character, and must be no more than 48 characters."
                          },
                          "createdBy": {
                            "title": "",
                            "type": "string",
                            "description": "API account or user that creates an ECP resource"
                          },
                          "creationTime": {
                            "title": "",
                            "format": "date-time",
                            "type": "string",
                            "description": "Datetime when the resource is created"
                          },
                          "lastUpdateTime": {
                            "type": "string",
                            "title": "",
                            "format": "date-time",
                            "description": "Datetime when the resource is last updated"
                          },
                          "status": {
                            "type": "string",
                            "description": "The deployment status of an ECP application",
                            "enum": [
                              "waiting",
                              "deploying",
                              "deployed",
                              "failed"
                            ]
                          },
                          "message": {
                            "title": "",
                            "type": "string",
                            "description": "Message related to the deployment status of an ECP application"
                          },
                          "podCount": {
                            "title": "",
                            "type": "object",
                            "description": "An object showing the desired and current number of pods (i.e. application instances) for an ECP application",
                            "properties": {
                              "desired": {
                                "type": "integer",
                                "description": "Count of pods desired across all ECP locations"
                              },
                              "current": {
                                "type": "integer",
                                "description": "Count of pods that are created and currently existing  across all ECP locations. Pods in different phase (i.e. pending, running or failed) are all counted."
                              },
                              "running": {
                                "type": "integer",
                                "description": "Count of pods that are currently existing and in running phase across all ECP locations"
                              }
                            }
                          },
                          "ipCount": {
                            "title": "",
                            "type": "integer",
                            "description": "Count of public IPv4 addresses allocated to an ECP application. Can be the addresses of ECP layer4 load balancers or pods, depending on how the application instances are exposed."
                          },
                          "isLoadBalanced": {
                            "title": "",
                            "type": "boolean",
                            "description": "A flag indicating if the instances of an ECP application are exposed via ECP layer 4 load balancers."
                          },
                          "cpuLimitsTotal": {
                            "title": "",
                            "type": "number",
                            "description": "Sum of the amounts of “limits.cpu” allocated to instances of an ECP application. Measured in cores."
                          },
                          "memLimitsTotal": {
                            "title": "",
                            "type": "integer",
                            "description": "Sum of the amounts of “limits.mem” allocated to instances of an ECP application. Measured in bytes."
                          },
                          "localSSDTotal": {
                            "title": "",
                            "description": "Sum of local-ssd storage capacities allocated to instances of an ECP application. Measured in bytes.",
                            "type": "integer"
                          },
                          "persistSSDTotal": {
                            "title": "",
                            "type": "integer",
                            "description": "Sum of persist-ssd storage capacities allocated to instances of an ECP application. Measured in bytes."
                          },
                          "configuration": {
                            "title": "",
                            "type": "string",
                            "description": "Specifications of an ECP application of the latest version"
                          }
                        }
                      }
                    },
                    "totalCount": {
                      "title": "",
                      "type": "integer",
                      "description": "Total number of resources"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "totalCount": 1,
                      "applications": [
                        {
                          "applicationID": "2a766f310f5411ea977445f2b85638ba",
                          "appName": "myapp1",
                          "createdBy": "demo",
                          "creationTime": "2020-11-25T07:21:15Z",
                          "lastUpdateTime": "2020-12-26T03:06:32Z",
                          "status": "deployed",
                          "message": "",
                          "podCount": {
                            "desired": 2,
                            "current": 2,
                            "running": 2
                          },
                          "isLoadBalanced": true,
                          "cpuLimitsTotal": 0.4,
                          "memLimitsTotal": 536870912,
                          "localSSDTotal": 2000000000,
                          "persistSSDTotal": 0,
                          "ipCount": 2,
                          "configuration": "apiVersion: v1\nkind: RegionPreference\nmetadata:\n  namespace: demo\nspec:\n  regions:\n    - name: EU\n      replicas: 1\n    - name: NA-EAST\n      replicas: 1\n---\r\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  labels:\n    app: myapp1\n  namespace: demo\nspec:\n  selector:\n    matchLabels:\n      app: myapp1\n  template:\n    metadata:\n      labels:\n        app: myapp1\n    spec:\n      containers:\n        - image: nginx\n          name: myapp1\n          ports:\n            - containerPort: 80\n              protocol: TCP\n          resources:\n            limits:\n              cpu: 200m\n              memory: 256Mi\n            requests:\n              cpu: 200m\n              memory: 256Mi\n          volumeMounts:\n            - mountPath: /tmp\n              name: data\n  volumeClaimTemplates:\n    - metadata:\n        annotations:\n          volume.beta.kubernetes.io/storage-class: local-ssd\n        name: data\n      spec:\n        accessModes:\n          - ReadWriteOnce\n        resources:\n          requests:\n            storage: 1G\n---\r\napiVersion: v1\nkind: LoadBalancer4\nmetadata:\n  namespace: demo\nspec:\n  listeners:\n    - backendPort: 80\n      backendSelector:\n        app: myapp1\n      healthCheck: false\n      listenerPort: 80\n      name: listener-80\n      protocol: tcp\n      scheduler: lc\n"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Refere to response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "InvalidListOffset": {
                    "value": {
                      "error": "InvalidListOffset",
                      "message": "The value of offset must be a valid non-negative integer."
                    }
                  },
                  "InvalidListLimit": {
                    "value": {
                      "error": "InvalidListLimit",
                      "message": "The value of limit must be a valid integer between 1 and 200, both inclusive."
                    }
                  },
                  "InvalidStatus": {
                    "value": {
                      "error": "InvalidStatus",
                      "message": "The value of the 'status' parameter is invalid. Should be 'waiting', 'deploying', 'deployed', or 'failed'."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "operationId": "get-applications",
        "description": "Get a list of ECP applications. You can specify a search parameter, status, offset and limit to filter the results.",
        "parameters": [
          {
            "name": "searchString",
            "in": "query",
            "description": "Keyword to search for particular resources. The value is matched against the \"name\" field of each resource.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "waiting",
                "deploying",
                "deployed",
                "failed"
              ]
            },
            "description": "The deployment status of an ECP application"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates the first resource to return. The first has an offset of 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of resources to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 200,
              "minimum": 1
            }
          },
          {
            "name": "On-Behalf-Of",
            "in": "header",
            "description": "If you are a reseller, you can use this header to specify the ID of a child customer and make API call on their behalf.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "post": {
        "summary": "Create an application",
        "operationId": "post-applications",
        "responses": {
          "201": {
            "description": "This response indicates the application is successfully created.",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "in": "header",
                "name": "Location",
                "description": "Location of the newly created resource.",
                "required": false
              },
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Refer to response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "InvalidAppName": {
                    "value": {
                      "error": "InvalidAppName",
                      "message": "Invalid app name. A valid app name must consist of lower-case alphanumeric characters or ‘-', must start and end with a lower-case alphanumeric character, and must be no more than 48 characters."
                    }
                  },
                  "NotAuthorized": {
                    "value": {
                      "error": "NotAuthorized",
                      "message": "You can't modify resources in namespace {namespace}."
                    }
                  },
                  "NamespaceInconsistent": {
                    "value": {
                      "error": "NamespaceInconsistent",
                      "message": "Namespace is inconsistent. The \"metadata.namespace\" fields of the objects to be deployed should all use the same \"namespace\"."
                    }
                  },
                  "AppNameInconsistent": {
                    "value": {
                      "error": "AppNameInconsistent",
                      "message": "The appName parameter value is inconsistent with your YAML file. The metadata name fields of the objects to be deployed must use the same app name."
                    }
                  },
                  "QuotaExceeded": {
                    "value": {
                      "error": "QuotaExceeded",
                      "message": "The application could not be deployed because it requires {resource requests}. You have a quota of {resources available}."
                    }
                  },
                  "ConflictNetworkConfiguration": {
                    "value": {
                      "error": "ConflictNetworkConfiguration",
                      "message": "Requesting public IPv4 addresses for pods is not allowed when a LoadBalancer4 object is already specified. Please remove the LoadBalancer4 object if your pods need to have publicly accessible IPv4 addresses."
                    }
                  },
                  "InvalidResourceRequirement": {
                    "value": {
                      "error": "InvalidResourceRequirement",
                      "message": "The resource requirement is invalid. Can be: The limits.cpu of a container should not be lower than 0.05 core. The sum of limits.cpu of a pod should not be higher than 24 cores. The requests.cpu should be equal to limits.cpu. The limits.mem of a container should not be lower than 50MB. The sum of limits.mem of a pod should not be higher than 128GB. The requests.mem should be equal to limits.mem. The requests.storage of a PVC should be not lower than 500MB and not higher than 100GB."
                    }
                  },
                  "PoPDoesNotExist": {
                    "value": {
                      "error": "PoPDoesNotExist",
                      "message": "The PoP {code of location} specified is invalid or does not exist."
                    }
                  },
                  "PoPNotAvailable": {
                    "value": {
                      "error": "PoPNotAvailable",
                      "message": "The PoP {code of location} specified is {offline || suspended} and currently not available."
                    }
                  },
                  "PoPNotAvailable(1)": {
                    "value": {
                      "error": "PoPNotAvailable",
                      "message": "The PoP {code of location} specified does not support feature IPv6. Please choose a different location."
                    }
                  },
                  "PoPFullyLoaded": {
                    "value": {
                      "error": "PoPFullyLoaded",
                      "message": "The PoP {code of location} specified is fully loaded and cannot provision resources requested. Please choose a different location."
                    }
                  },
                  "DeploymentToMainlandChinaNotAllowed": {
                    "value": {
                      "error": "DeploymentToMainlandChinaNotAllowed",
                      "message": "You are not allowed to deploy applications to PoPs in mainland China. Please contact our sales engineers for support."
                    }
                  },
                  "RegionDoesNotExist": {
                    "value": {
                      "error": "RegionDoesNotExist",
                      "message": "The region {region} is invalid or does not exist."
                    }
                  },
                  "RegionNotAvailable": {
                    "value": {
                      "error": "RegionNotAvailable",
                      "message": "There are currently no available PoPs under the region {region}."
                    }
                  },
                  "RegionNotAvailable(1)": {
                    "value": {
                      "error": "RegionNotAvailable",
                      "message": "There are currently no PoPs that support feature {IPv6} under the region {region}."
                    }
                  },
                  "VolumeNotDefined": {
                    "value": {
                      "error": "VolumneNotDefined",
                      "message": "The volume {volume name} in “volumeMounts” is not defined."
                    }
                  },
                  "VolumeNotMounted": {
                    "value": {
                      "error": "VolumeNotMounted",
                      "message": "The volume {volume name} defined is not mounted to any mount points."
                    }
                  },
                  "ConflictVolumeMountPath": {
                    "value": {
                      "error": "ConflictVolumeMountPath",
                      "message": "The mountPath in volumeMounts must be unique and without overlapping."
                    }
                  },
                  "InvalidLoadBalancer4Listener": {
                    "value": {
                      "error": "InvalidLoadBalancer4Listener",
                      "message": "The LoadBalancer4 listener {listener name} is invalid. The “backendSelector” does not match {ReplicaSet/StatefulSet/Deployment}.spec.template.metadata.labels."
                    }
                  },
                  "InvalidRequestBody": {
                    "value": {
                      "error": "InvalidRequestBody",
                      "message": "Failed to parse {YAML | JSON} in the request body. Please check the content format."
                    }
                  },
                  "InvalidResourceKind": {
                    "value": {
                      "error": "InvalidResourceKind",
                      "message": "Can be:\nRequiredKindMissing\nUnrecognizableKind\nUnsupportedKubernetesResource\nUnsupportedPVC\nConflictKind\nRepeatedKind\nKindNotSpecified"
                    }
                  },
                  "InvalidSpecification": {
                    "value": {
                      "error": "InvalidSpecification",
                      "message": "The {Kind 1} specified in invalid: * {fieldPath}: {Code}: [{value}]: [{message}] The {Kind n} specified in invalid: * {fieldPath}: {Code}: [{value}]: [{message}]"
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "409": {
            "description": "This error is returned if you try to create an application that already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "AppNameExists",
                      "message": "The app name is already taken."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "tags": [
          "Applications"
        ],
        "description": "This interface allows you to configure an ECP application and have the application automatically deployed to ECP edge locations.\n\nPlease include specifications of all objects comprising an ECP application and pass them as an array in YAML or JSON format in the request body. An ECP application must include a Kubernetes workload resource and an ECP Target object, and might include an ECP LoadBalancer4 object depending on how you choose to expose the application instances. You can also include in the request body Kubernetes objects like <a href=\"https://kubernetes.io/docs/concepts/configuration/configmap/\">ConfigMap</a> and <a href=\"https://kubernetes.io/docs/concepts/configuration/secret/\">Secret</a>. Refer to examples of request body for possible use cases.\n\nWhen you specify an ECP Target, you can pick locations by yourself and have your application instances precisely placed at desired locations. You can also simply designate ECP regions and have your application instances automatically distributed across locations within each ECP region. Note that, in the latter case, there will be auto cross-location migration of application instances in the event of a location outage. Such migration happens among locations within the same ECP region.",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "appName",
            "description": "Name of your ECP application. Must contain only lower-case alphanumeric characters and ‘-', must start and end with a lower-case alphanumeric character, and must be no more than 48 characters.",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/yaml": {
              "schema": {
                "title": "",
                "description": "",
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "title": "Kubernetes Workload",
                      "oneOf": [
                        {
                          "title": "Deployment",
                          "type": "object",
                          "x-examples": {
                            "example-1": {}
                          },
                          "description": "Deployment",
                          "properties": {
                            "apiVersion": {
                              "type": "string",
                              "enum": [
                                "apps/v1"
                              ]
                            },
                            "Kind": {
                              "type": "string",
                              "description": "Use Kubernetes \"Deployment\" as workload controller if your application does not require persistent storage. Refer to <a href=\"https://kubernetes.io/docs/concepts/workloads/controllers/deployment/\">Kubernetes official documentation </a> for more about the controller.",
                              "enum": [
                                "Deployment"
                              ]
                            },
                            "metadata": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of a \"Deployment\" resource. Must be the same as the query param \"appName\"."
                                }
                              }
                            },
                            "spec": {
                              "type": "object",
                              "description": "This document only focuses on some typical configs of  a Deployment object. For more about how to specify a Deployment, please refer to the <a href=\"https://v1-17.docs.kubernetes.io/docs/reference/generated/kubernetes-api/v1.17/#deployment-v1-apps\">official Kubernetes API reference</a>.",
                              "required": [
                                "selector",
                                "template"
                              ],
                              "properties": {
                                "selector": {
                                  "type": "object",
                                  "description": "A label query over pods. Must match the pod template's labels.",
                                  "required": [
                                    "matchLabels"
                                  ],
                                  "properties": {
                                    "matchLabels": {
                                      "type": "object",
                                      "description": "A map of key value pairs"
                                    }
                                  }
                                },
                                "template": {
                                  "type": "object",
                                  "description": "Template of the pods that will be created by the Deployment",
                                  "required": [
                                    "metadata",
                                    "spec"
                                  ],
                                  "properties": {
                                    "metadata": {
                                      "type": "object",
                                      "required": [
                                        "labels"
                                      ],
                                      "properties": {
                                        "labels": {
                                          "type": "object",
                                          "description": "Map of string keys and values that can be used to organize and categorize pods. Must match selector of the Deployment"
                                        },
                                        "annotations": {
                                          "type": "object",
                                          "description": "An unstructured key value map stored with a pod",
                                          "properties": {
                                            "quantil.com/enableExternalIP": {
                                              "type": "boolean",
                                              "default": false,
                                              "description": "Pass this annotation and set to true if you would like to enable public IPv4 network interface for the pod. Alternatively, you can specify an ECP \"LoadBalancer4\" object for your ECP application to expose the pod. "
                                            },
                                            "quantil.com/enableIpv6ExternalIP": {
                                              "type": "boolean",
                                              "default": false,
                                              "description": "Set this annotation to true if you would like to have a public IPv6 address for the pod. Alternatively, you can create an ECP custom \"LoadBalancer4\" object for your ECP application to expose the pod. "
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "spec": {
                                      "type": "object",
                                      "description": "Specification of desired behavior of the pod",
                                      "required": [
                                        "containers"
                                      ],
                                      "properties": {
                                        "containers": {
                                          "type": "array",
                                          "description": "List of containers coupled in the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "image": {
                                                "type": "string",
                                                "description": "Docker image name"
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "Name of the container specified as a DNS_LABEL"
                                              },
                                              "resources": {
                                                "type": "object",
                                                "description": "Compute Resources required by this container. Cannot be updated.",
                                                "required": [
                                                  "limits"
                                                ],
                                                "properties": {
                                                  "limits": {
                                                    "type": "object",
                                                    "description": "The maximum amount of compute resources required",
                                                    "required": [
                                                      "cpu",
                                                      "memory"
                                                    ],
                                                    "properties": {
                                                      "cpu": {
                                                        "type": "string",
                                                        "description": "The amount of CPU required. Minimum 0.05 core. The sum of limits.cpu required by all containers in the pod must not exceed 24 cores."
                                                      },
                                                      "memory": {
                                                        "type": "string",
                                                        "description": "The amount of memory required. Minimum 50 MB. The sum of limits.memory required by all containers in the pod must not exceed 128 GB."
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "required": [
                                              "image",
                                              "name",
                                              "resources"
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "required": [
                            "apiVersion",
                            "Kind",
                            "metadata",
                            "spec"
                          ]
                        },
                        {
                          "title": "ReplicaSet",
                          "type": "object",
                          "x-examples": {
                            "example-1": {}
                          },
                          "description": "ReplicaSet",
                          "properties": {
                            "apiVersion": {
                              "type": "string",
                              "enum": [
                                "apps/v1"
                              ]
                            },
                            "Kind": {
                              "type": "string",
                              "description": "Use Kubernetes \"ReplicaSet\" as workload controller if your application does not require persistent storage. Refer to <a href=\"https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/\">Kubernetes official documentation </a> for more about the controller.",
                              "enum": [
                                "ReplicaSet"
                              ]
                            },
                            "metadata": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of a \"ReplicaSet\" resource. Must be the same as the query param \"appName\"."
                                }
                              }
                            },
                            "spec": {
                              "type": "object",
                              "description": "This document only focuses on some typical configs of  a ReplicaSet object. For more about how to specify a ReplicaSet, please refer to the <a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.17/#replicaset-v1-apps\">official Kubernetes API reference</a>",
                              "required": [
                                "selector",
                                "template"
                              ],
                              "properties": {
                                "selector": {
                                  "type": "object",
                                  "description": "A label query over pods. Must match the pod template's labels.",
                                  "required": [
                                    "matchLabels"
                                  ],
                                  "properties": {
                                    "matchLabels": {
                                      "type": "object",
                                      "description": "A map of key value pairs"
                                    }
                                  }
                                },
                                "template": {
                                  "type": "object",
                                  "description": "Template of the pods that will be created by the ReplicaSet",
                                  "required": [
                                    "metadata",
                                    "spec"
                                  ],
                                  "properties": {
                                    "metadata": {
                                      "type": "object",
                                      "required": [
                                        "labels"
                                      ],
                                      "properties": {
                                        "labels": {
                                          "type": "object",
                                          "description": "Map of string keys and values that can be used to organize and categorize pods. Must match selector of the ReplicaSet"
                                        },
                                        "annotations": {
                                          "type": "object",
                                          "description": "An unstructured key value map stored with a pod",
                                          "properties": {
                                            "quantil.com/enableExternalIP": {
                                              "type": "boolean",
                                              "default": false,
                                              "description": "Pass this annotation and set to true if you would like to enable public IPv4 network interface for the pod. Alternatively, you can specify an ECP \"LoadBalancer4\" object for your ECP application to expose the pod. "
                                            },
                                            "quantil.com/enableIpv6ExternalIP": {
                                              "type": "boolean",
                                              "default": false,
                                              "description": "Pass this annotation and set to true if you would like to enable public IPv6 network interface for the pod. Alternatively, you can specify an ECP custom \"LoadBalancer4\" object for your ECP application to expose the pod. "
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "spec": {
                                      "type": "object",
                                      "description": "Specifications of desired behavior of the pod",
                                      "required": [
                                        "containers"
                                      ],
                                      "properties": {
                                        "containers": {
                                          "type": "array",
                                          "description": "List of containers coupled in the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "image": {
                                                "type": "string",
                                                "description": "Docker image name"
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "Name of the container specified as a DNS_LABEL"
                                              },
                                              "resources": {
                                                "type": "object",
                                                "description": "Compute Resources required by this container. Cannot be updated.",
                                                "required": [
                                                  "limits"
                                                ],
                                                "properties": {
                                                  "limits": {
                                                    "type": "object",
                                                    "description": "The maximum amount of compute resources required",
                                                    "required": [
                                                      "cpu",
                                                      "memory"
                                                    ],
                                                    "properties": {
                                                      "cpu": {
                                                        "type": "string",
                                                        "description": "The amount of CPU required. Minimum 0.05 core. The sum of limits.cpu required by all containers in the pod must not exceed 24 cores."
                                                      },
                                                      "memory": {
                                                        "type": "string",
                                                        "description": "The amount of memory required. Minimum 50 MB. The sum of limits.memory required by all containers in the pod must not exceed 128 GB."
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "required": [
                                              "image",
                                              "name",
                                              "resources"
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "required": [
                            "apiVersion",
                            "Kind",
                            "metadata",
                            "spec"
                          ]
                        },
                        {
                          "title": "StatefulSet",
                          "type": "object",
                          "description": "StatefulSet",
                          "x-examples": {
                            "example-1": {}
                          },
                          "properties": {
                            "apiVersion": {
                              "type": "string",
                              "enum": [
                                "apps/v1"
                              ]
                            },
                            "Kind": {
                              "type": "string",
                              "description": "Use Kubernetes \"StatefulSet\" as workload controller if your application requires persistent storage. Refer to <a href=\"https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/\">Kubernetes official documentation </a> for more about the controller.",
                              "enum": [
                                "StatefulSet"
                              ]
                            },
                            "metadata": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of a \"StatefulSet\" resource. Must be the same as the query param \"appName\"."
                                }
                              }
                            },
                            "spec": {
                              "type": "object",
                              "description": "This document only focuses on some typical configs of  a StatefulSet object. For more about how to specify a StatefulSet, please refer to the <a href=\"https://v1-17.docs.kubernetes.io/docs/reference/generated/kubernetes-api/v1.17/#statefulset-v1-apps\"> official kubernetes API reference</a>.",
                              "required": [
                                "selector",
                                "template"
                              ],
                              "properties": {
                                "selector": {
                                  "type": "object",
                                  "description": "A label query over pods. Must match the pod template's labels.",
                                  "required": [
                                    "matchLabels"
                                  ],
                                  "properties": {
                                    "matchLabels": {
                                      "type": "object",
                                      "description": "A map of key value pairs"
                                    }
                                  }
                                },
                                "template": {
                                  "type": "object",
                                  "description": "Template of the pods that will be created by the StatefulSet",
                                  "required": [
                                    "metadata",
                                    "spec"
                                  ],
                                  "properties": {
                                    "metadata": {
                                      "type": "object",
                                      "required": [
                                        "labels"
                                      ],
                                      "properties": {
                                        "labels": {
                                          "type": "object",
                                          "description": "Map of string keys and values that can be used to organize and categorize pods. Must match selector of the StatefulSet"
                                        },
                                        "annotations": {
                                          "type": "object",
                                          "description": "An unstructured key value map stored with a pod",
                                          "properties": {
                                            "quantil.com/enableExternalIP": {
                                              "type": "boolean",
                                              "default": false,
                                              "description": "Pass this annotation and set to true if you would like to enable public IPv4 network interface for the pod. Alternatively, you can specify an ECP \"LoadBalancer4\" object for your ECP application to expose the pod."
                                            },
                                            "quantil.com/enableIpv6ExternalIP": {
                                              "type": "boolean",
                                              "default": false,
                                              "description": "Pass this annotation and set to true if you would like to enable public IPv6 network interface for the pod. Alternatively, you can specify an ECP \"LoadBalancer4\" object for your ECP application to expose the pod."
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "spec": {
                                      "type": "object",
                                      "description": "Specification of desired behavior of the pod",
                                      "required": [
                                        "containers"
                                      ],
                                      "properties": {
                                        "containers": {
                                          "type": "array",
                                          "description": "List of containers coupled in the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "image": {
                                                "type": "string",
                                                "description": "Docker image name"
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "Name of the container specified as a DNS_LABEL"
                                              },
                                              "resources": {
                                                "type": "object",
                                                "description": "Compute Resources required by this container. Cannot be updated.",
                                                "required": [
                                                  "limits"
                                                ],
                                                "properties": {
                                                  "limits": {
                                                    "type": "object",
                                                    "description": "The maximum amount of compute resources required",
                                                    "required": [
                                                      "cpu",
                                                      "memory"
                                                    ],
                                                    "properties": {
                                                      "cpu": {
                                                        "type": "string",
                                                        "description": "The amount of CPU required. Minimum 0.05 core. The sum of limits.cpu required by all containers in the pod must not exceed 24 cores."
                                                      },
                                                      "memory": {
                                                        "type": "string",
                                                        "description": "The amount of memory required. Minimum 50 MB. The sum of limits.memory required by all containers in the pod must not exceed 128 GB."
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              "volumeMounts": {
                                                "type": "array",
                                                "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "name": {
                                                      "type": "string",
                                                      "description": "This must match the Name of a Volume"
                                                    },
                                                    "mountPath": {
                                                      "type": "string",
                                                      "description": "Path within the container at which the volume should be mounted. Must not contain ':'."
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "required": [
                                              "image",
                                              "name",
                                              "resources"
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                "volumeClaimTemplates": {
                                  "type": "array",
                                  "description": "A list of persistent volume claims that pods are allowed to reference. Every claim in this list must have at least one matching (by name) volumeMount in one container in the pod template.",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "metadata": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "description": "Name of a volume claim"
                                          },
                                          "annotations": {
                                            "type": "object",
                                            "properties": {
                                              "volume.beta.kubernetes.io/storage-class": {
                                                "type": "string",
                                                "enum": [
                                                  "local-ssd"
                                                ],
                                                "description": "Specifiy the storageClass of a volume claim. Currently only \"local-ssd\" is available. \"local-ssd\" means local persistent SSD storage. Data is stored locally and persists across container restarts, but will be lost when pod is rescheduled to another node. "
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "spec": {
                                        "type": "object",
                                        "properties": {
                                          "accessModes": {
                                            "type": "array",
                                            "description": "The desired access modes the volume claim should have. Should be \"ReadWriteOnce\".",
                                            "items": {
                                              "type": "string",
                                              "enum": [
                                                "ReadWriteOnce"
                                              ]
                                            }
                                          },
                                          "resources": {
                                            "type": "object",
                                            "description": "The resources the volume claim should have",
                                            "properties": {
                                              "requests": {
                                                "type": "object",
                                                "description": "The minimum amount of resources required",
                                                "properties": {
                                                  "storage": {
                                                    "type": "string",
                                                    "description": "The storage capacity required. Must be not less than 500MB and not higher than 100GB."
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "required": [
                            "apiVersion",
                            "Kind",
                            "metadata",
                            "spec"
                          ]
                        }
                      ]
                    },
                    {
                      "title": "ECP LoadBalancer4",
                      "type": "object",
                      "description": "LoadBalancer4",
                      "properties": {
                        "apiVersion": {
                          "type": "string",
                          "enum": [
                            "v1"
                          ]
                        },
                        "Kind": {
                          "type": "string",
                          "enum": [
                            "LoadBalancer4"
                          ],
                          "description": "Use \"LoadBalancer4\", an ECP custom resource, to expose your application instances"
                        },
                        "metadata": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Name of a \"LoadBalancer4\" object. Must be the same as the query param \"appName\"."
                            }
                          }
                        },
                        "spec": {
                          "type": "object",
                          "required": [
                            "listeners"
                          ],
                          "properties": {
                            "listeners": {
                              "type": "array",
                              "description": "Array of rules for the LoadBalancer4 to forward incoming traffic to backend application instances",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "Name of a listener. Must be unique across a \"LoadBalancer4\" obejct. Allows lower-case letters, digits and hyphens only. Must not start or end with a hyphen, and must be less than 63 characters."
                                  },
                                  "backendSelector": {
                                    "type": "object",
                                    "description": "Key value pair that is used to match target pods (i.e. application instances) as backend of the LoadBalancer4."
                                  },
                                  "listenerPort": {
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 65535,
                                    "description": "Number of port that the LoadBalancer4 listens on"
                                  },
                                  "backendPort": {
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 65535,
                                    "description": "Number of the backend pods' port that receives traffic forwarded by the LoadBalancer4. Must be the same as \"listenerPort\"."
                                  },
                                  "protocol": {
                                    "type": "string",
                                    "enum": [
                                      "TCP",
                                      "UDP"
                                    ],
                                    "description": "Protocol of incoming traffic that the LoadBalancer4 will handle"
                                  },
                                  "scheduler": {
                                    "type": "string",
                                    "enum": [
                                      "rr",
                                      "lc",
                                      "sh"
                                    ],
                                    "description": "Load balancing algorithm used to make load balancing decision. Can be \"rr\" (Round Robin), \"lc\" (Least Conncetions) or \"sh\" (Source Hash).",
                                    "default": "rr"
                                  },
                                  "healthCheck": {
                                    "type": "boolean",
                                    "default": false,
                                    "description": "Whether to turn on periodic probes to check the healthiness of backend pods. Pod that fails health check will be removed by the LoadBalancer4 and hence will not receive traffic."
                                  },
                                  "healthCheckType": {
                                    "type": "string",
                                    "enum": [
                                      "TCP",
                                      "HTTP"
                                    ],
                                    "description": "When \"protocol\" field is set to \"TCP\", the health check type can be \"TCP\" or \"HTTP\". When the \"protocol\" is set to \"UDP\", health check is not available."
                                  },
                                  "healthCheckDomain": {
                                    "type": "string",
                                    "description": "Hostname to connect to. Acceptable only when the health check type is \"HTTP\". Default to the IP of a backend pod."
                                  },
                                  "healthCheckURI": {
                                    "type": "string",
                                    "description": "Path to access. Acceptable only when the health check type is \"HTTP\"."
                                  },
                                  "healthCheckConnectPort": {
                                    "type": "integer",
                                    "description": "Number of the port to access on the backend pods. Set to same as the \"backendPort\" by default.",
                                    "minimum": 1,
                                    "maximum": 65535
                                  },
                                  "healthCheckInterval": {
                                    "type": "integer",
                                    "default": 1,
                                    "description": "How often (in seconds) to perform the health check",
                                    "minimum": 1,
                                    "maximum": 5
                                  }
                                },
                                "required": [
                                  "name",
                                  "backendSelector",
                                  "listenerPort",
                                  "backendPort"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "required": [
                        "apiVersion",
                        "Kind",
                        "metadata",
                        "spec"
                      ]
                    },
                    {
                      "title": "ECP Target",
                      "oneOf": [
                        {
                          "title": "RegionPreference",
                          "type": "object",
                          "x-examples": {
                            "example-1": {
                              "apiVersion": "v1",
                              "kind": "RegionPreference",
                              "metadata": {
                                "name": "myapp",
                                "namespace": "demo"
                              },
                              "spec": {
                                "regions": [
                                  {
                                    "name": "NA-WEST",
                                    "replicas": 6
                                  },
                                  {
                                    "name": "EU",
                                    "replicas": 4
                                  }
                                ]
                              }
                            }
                          },
                          "description": "Region",
                          "properties": {
                            "apiVersion": {
                              "type": "string",
                              "enum": [
                                "v1"
                              ]
                            },
                            "Kind": {
                              "type": "string",
                              "description": "Use \"RegionPreference\", an ECP custom resource, to specify ECP regions and have your application instances automatically distributed across locations within each ECP region. ",
                              "enum": [
                                "RegionPreference"
                              ]
                            },
                            "metadata": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of a \"RegionPreference\" resource. Must be the same as the query param \"appName\"."
                                }
                              }
                            },
                            "spec": {
                              "type": "object",
                              "required": [
                                "regions"
                              ],
                              "properties": {
                                "regions": {
                                  "type": "array",
                                  "description": "Array of target ECP regions to distribute your application instances",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "type": "string",
                                        "description": "Code of an ECP region, e.g. \"NA-WEST\" which stands for west of North America."
                                      },
                                      "replicas": {
                                        "type": "integer",
                                        "description": "The total number of pods (i.e. application instances) desired across locations within an ECP region",
                                        "minimum": 1
                                      }
                                    },
                                    "required": [
                                      "name",
                                      "replicas"
                                    ]
                                  }
                                }
                              }
                            }
                          },
                          "required": [
                            "apiVersion",
                            "Kind",
                            "metadata",
                            "spec"
                          ]
                        },
                        {
                          "title": "Location",
                          "type": "object",
                          "description": "Location",
                          "x-examples": {
                            "example-1": {
                              "apiVersion": "v1",
                              "kind": "Location",
                              "metadata": {
                                "name": "myapp",
                                "namespace": "demo"
                              },
                              "spec": {
                                "locations": [
                                  {
                                    "name": "sjc",
                                    "replicas": 2
                                  },
                                  {
                                    "name": "ams",
                                    "replicas": 1
                                  }
                                ]
                              }
                            }
                          },
                          "properties": {
                            "apiVersion": {
                              "type": "string",
                              "enum": [
                                "v1"
                              ]
                            },
                            "Kind": {
                              "type": "string",
                              "enum": [
                                "Location"
                              ],
                              "description": "Use \"Location\", an ECP custom resource, to pick ECP locations and precisely place your application instances."
                            },
                            "metadata": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of a \"Location\" resource. Must be the same as the query param \"appName\"."
                                }
                              }
                            },
                            "spec": {
                              "type": "object",
                              "required": [
                                "locations"
                              ],
                              "properties": {
                                "locations": {
                                  "type": "array",
                                  "description": "Array of target ECP locations",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "type": "string",
                                        "description": "Code of an ECP location, e.g. \"sjc1\" which stands for the ECP location at San Jose, US."
                                      },
                                      "replicas": {
                                        "type": "integer",
                                        "description": "Number of pods (i.e. application instances) desired at an ECP location",
                                        "minimum": 1
                                      }
                                    },
                                    "required": [
                                      "name",
                                      "replicas"
                                    ]
                                  }
                                }
                              }
                            }
                          },
                          "required": [
                            "apiVersion",
                            "Kind",
                            "metadata",
                            "spec"
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              "examples": {
                "Typical usage": {
                  "value": "apiVersion: v1\nkind: RegionPreference\nmetadata:\n  name: myapp\n  namespace: demo\nspec:\n  regions:\n    - name: NA-WEST\n      replicas: 6\n    - name: EU\n      replicas: 4\n--- \napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: myapp\n  namespace: demo\nspec:\n  selector:\n    matchLabels:\n      app: myapp\n  template:\n    metadata:\n      labels:\n        app: myapp\n    spec:\n      imagePullSecrets:\n        - name: myregistrykey\n      containers:\n        - name: myapp\n          image: 'myregistry/myproject/myapp:1.0'\n          resources:\n            limits:\n              cpu: 200m\n              memory: 128Mi\n            requests:\n              cpu: 200m\n              memory: 128Mi\n---\napiVersion: v1\nkind: LoadBalancer4\nmetadata:\n  name: myapp\n  namespace: demo\nspec:\n  listeners:\n    - backendPort: 80\n      backendSelector:\n        app: myapp\n      healthCheck: true\n      healthCheckType: tcp\n      healthCheckConnectPort: 80\n      listenerPort: 80\n      name: listener-80\n      protocol: tcp\n      scheduler: lc"
                },
                "Manually pick ECP locations": {
                  "value": "apiVersion: v1\nkind: Location\nmetadata:\n  name: myapp\n  namespace: demo\nspec:\n  locations:\n    - name: jfk3\n      replicas: 2\n    - name: ams\n      replicas: 1\n--- \napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: myapp\n  namespace: demo\nspec:\n  selector:\n    matchLabels:\n      app: myapp\n  template:\n    metadata:\n      labels:\n        app: myapp\n    spec:\n      imagePullSecrets:\n        - name: myregistrykey\n      containers:\n        - name: myapp\n          image: 'myregistry/myproject/myapp:1.0'\n          resources:\n            limits:\n              cpu: 200m\n              memory: 128Mi\n            requests:\n              cpu: 200m\n              memory: 128Mi\n---\napiVersion: v1\nkind: LoadBalancer4\nmetadata:\n  name: myapp\n  namespace: demo\nspec:\n  listeners:\n    - backendPort: 80\n      backendSelector:\n        app: myapp\n      healthCheck: true\n      healthCheckType: tcp\n      healthCheckConnectPort: 80\n      listenerPort: 80\n      name: listener-80\n      protocol: tcp\n      scheduler: lc"
                },
                "Enable public network interface(s) for instances": {
                  "value": "apiVersion: v1\nkind: RegionPreference\nmetadata:\n  name: myapp\n  namespace: demo\nspec:\n  regions:\n    - name: NA-WEST\n      replicas: 3\n    - name: EU\n      replicas: 2\n--- \napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: myapp\n  namespace: demo\nspec:\n  selector:\n    matchLabels:\n      app: myapp\n  template:\n    metadata:\n      labels:\n        app: myapp\n      annotations:\n        quantil.com/enableExternalIP: 'true'\n        quantil.com/enableIpv6ExternalIP: 'true'\n    spec:\n      imagePullSecrets:\n        - name: myregistrykey\n      containers:\n        - name: myapp\n          image: 'myregistry/myproject/myapp:1.0'\n          resources:\n            limits:\n              cpu: 200m\n              memory: 128Mi\n            requests:\n              cpu: 200m\n              memory: 128Mi"
                },
                "Use persistent storage": {
                  "value": "apiVersion: v1\nkind: RegionPreference\nmetadata:\n  name: myapp\n  namespace: demo\nspec:\n  regions:\n    - name: NA-WEST\n      replicas: 6\n    - name: EU\n      replicas: 4\n--- \napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: myapp\n  namespace: demo\nspec:\n  selector:\n    matchLabels:\n      app: myapp\n  template:\n    metadata:\n      labels:\n        app: myapp\n    spec:\n      imagePullSecrets:\n        - name: myregistrykey\n      containers:\n        - name: myapp\n          image: 'myregistry/myproject/myapp:1.0'\n          resources:\n            limits:\n              cpu: 200m\n              memory: 256Mi\n            requests:\n              cpu: 200m\n              memory: 256Mi\n          volumeMounts:\n            - mountPath: /tmp\n              name: data\n  volumeClaimTemplates:\n    - metadata:\n        annotations:\n          volume.beta.kubernetes.io/storage-class: local-ssd\n        name: data\n      spec:\n        accessModes:\n          - ReadWriteOnce\n        resources:\n          requests:\n            storage: 10G\n---\napiVersion: v1\nkind: LoadBalancer4\nmetadata:\n  name: myapp\n  namespace: demo\nspec:\n  listeners:\n    - backendPort: 80\n      backendSelector:\n        app: myapp\n      healthCheck: true\n      healthCheckType: tcp\n      healthCheckConnectPort: 80\n      listenerPort: 80\n      name: listener-80\n      protocol: tcp\n      scheduler: lc"
                },
                "Include a ConfigMap object": {
                  "value": "apiVersion: v1\nkind: RegionPreference\nmetadata:\n  name: myapp\n  namespace: demo\nspec:\n  regions:\n    - name: NA-WEST\n      replicas: 1\n    - name: NA-EAST\n      replicas: 2\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: myapp\n  namespace: demo\nspec:\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n        - image: 'nginx'\n          name: nginx\n          resources:\n            limits:\n              cpu: 500m\n              memory: 512Mi\n            requests:\n              cpu: 500m\n              memory: 512Mi\n          volumeMounts:\n            - mountPath: /etc/nginx/conf.d\n              readOnly: true\n              name: nginx-conf\n      volumes:\n        - name: nginx-conf\n          configMap:\n            name: myapp\n            items:\n              - key: default.conf\n                path: default.conf\n---\napiVersion: v1\nkind: LoadBalancer4\nmetadata:\n  name: myapp\n  namespace: demo\nspec:\n  listeners:\n    - backendPort: 80\n      backendSelector:\n        app: nginx\n      healthCheck: false\n      listenerPort: 80\n      name: listener-80\n      protocol: tcp\n      scheduler: lc\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: myapp\n  namespace: demo\ndata:\n  default.conf: |-\n    server {\n      listen       80;\n      server_name  localhost;\n\n      #charset koi8-r;\n      #access_log  /var/log/nginx/host.access.log  main;\n\n      location / {\n          root   /usr/share/nginx/html;\n          index  index.html index.htm;\n      }\n\n      #error_page  404              /404.html;\n\n      # redirect server error pages to the static page /50x.html\n      #\n      error_page   500 502 503 504  /50x.html;\n      location = /50x.html {\n          root   /usr/share/nginx/html;\n      }\n\n      # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n      #\n      #location ~ \\.php$ {\n      #    proxy_pass   http://127.0.0.1;\n      #}\n\n      # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n      #\n      #location ~ \\.php$ {\n      #    root           html;\n      #    fastcgi_pass   127.0.0.1:9000;\n      #    fastcgi_index  index.php;\n      #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n      #    include        fastcgi_params;\n      #}\n\n      # deny access to .htaccess files, if Apache's document root\n      # concurs with nginx's one\n      #\n      #location ~ /\\.ht {\n      #    deny  all;\n      #}\n    }"
                }
              }
            }
          },
          "description": ""
        }
      },
      "parameters": []
    },
    "/ecp/v1/applications/{applicationID}": {
      "parameters": [
        {
          "name": "applicationID",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "ID of an ECP application"
        }
      ],
      "get": {
        "summary": "Query an application",
        "tags": [
          "Applications"
        ],
        "responses": {
          "200": {
            "description": "The response contains details of the ECP application.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "applicationID": {
                      "title": "",
                      "type": "string",
                      "description": "ID of an ECP application"
                    },
                    "appName": {
                      "title": "",
                      "type": "string",
                      "description": "Name of an ECP application. Must contain only lower-case alphanumeric characters and ‘-', must start and end with a lower-case alphanumeric character, and must be no more than 48 characters."
                    },
                    "createdBy": {
                      "title": "",
                      "type": "string",
                      "description": "API account or user that creates an ECP resource"
                    },
                    "creationTime": {
                      "title": "",
                      "format": "date-time",
                      "type": "string",
                      "description": "Datetime when the resource is created"
                    },
                    "lastUpdateTime": {
                      "type": "string",
                      "title": "",
                      "format": "date-time",
                      "description": "Datetime when the resource is last updated"
                    },
                    "status": {
                      "type": "string",
                      "description": "The deployment status of an ECP application",
                      "enum": [
                        "waiting",
                        "deploying",
                        "deployed",
                        "failed"
                      ]
                    },
                    "message": {
                      "title": "",
                      "type": "string",
                      "description": "Message related to the deployment status of an ECP application"
                    },
                    "podCount": {
                      "title": "",
                      "type": "object",
                      "description": "An object showing the desired and current number of pods (i.e. application instances) for an ECP application",
                      "properties": {
                        "desired": {
                          "type": "integer",
                          "description": "Count of pods desired across all ECP locations"
                        },
                        "current": {
                          "type": "integer",
                          "description": "Count of pods that are created and currently existing  across all ECP locations. Pods in different phase (i.e. pending, running or failed) are all counted."
                        },
                        "running": {
                          "type": "integer",
                          "description": "Count of pods that are currently existing and in running phase across all ECP locations"
                        }
                      }
                    },
                    "ipCount": {
                      "title": "",
                      "type": "integer",
                      "description": "Count of public IPv4 addresses allocated to an ECP application. Can be the addresses of ECP layer4 load balancers or pods, depending on how the application instances are exposed."
                    },
                    "cpuLimitsTotal": {
                      "title": "",
                      "type": "number",
                      "description": "Sum of the amounts of “limits.cpu” allocated to instances of an ECP application. Measured in cores."
                    },
                    "memLimitsTotal": {
                      "title": "",
                      "type": "integer",
                      "description": "Sum of the amounts of “limits.mem” allocated to instances of an ECP application. Measured in bytes."
                    },
                    "localSSDTotal": {
                      "title": "",
                      "description": "Sum of local-ssd storage capacities allocated to instances of an ECP application. Measured in bytes.",
                      "type": "integer"
                    },
                    "persistSSDTotal": {
                      "title": "",
                      "type": "integer",
                      "description": "Sum of persist-ssd storage capacities allocated to instances of an ECP application. Measured in bytes."
                    },
                    "isLoadBalanced": {
                      "title": "",
                      "type": "boolean",
                      "description": "A flag indicating if the instances of an ECP application are exposed via ECP layer 4 load balancers."
                    },
                    "configuration": {
                      "title": "",
                      "type": "string",
                      "description": "Specifications of an ECP application of the latest version"
                    },
                    "regions": {
                      "title": "",
                      "type": "array",
                      "description": "Array of ECP regions where the application is deployed",
                      "items": {
                        "type": "object",
                        "properties": {
                          "region": {
                            "type": "string",
                            "description": "Code of an ECP region, e.g. “NA-WEST”"
                          },
                          "PoPs": {
                            "type": "array",
                            "description": "Array of locations within an ECP region where an application is deployed",
                            "items": {
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": "string",
                                  "description": "Code of an ECP location, e.g. \"sjc1\""
                                },
                                "description": {
                                  "type": "string",
                                  "description": "Full name of an ECP location, e.g. \"San Jose, US\""
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "applicationID": "2a766f310f5411ea977445f2b85638ba",
                      "appName": "myapp1",
                      "createdBy": "demo",
                      "creationTime": "2020-11-25T07:21:15Z",
                      "lastUpdateTime": "2020-12-26T03:06:32Z",
                      "status": "deployed",
                      "message": "",
                      "podCount": {
                        "desired": 2,
                        "current": 2,
                        "running": 2
                      },
                      "isLoadBalanced": true,
                      "cpuLimitsTotal": 0.4,
                      "memLimitsTotal": 536870912,
                      "localSSDTotal": 2000000000,
                      "persistSSDTotal": 0,
                      "ipCount": 2,
                      "regions": [
                        {
                          "region": "EU",
                          "PoPs": [
                            {
                              "code": "waw",
                              "description": "Warsaw PL"
                            }
                          ]
                        },
                        {
                          "region": "NA-EAST",
                          "PoPs": [
                            {
                              "code": "iad",
                              "description": "Ashburn US"
                            }
                          ]
                        }
                      ],
                      "configuration": "apiVersion: v1\nkind: RegionPreference\nmetadata:\n  namespace: demo\nspec:\n  regions:\n    - name: EU\n      replicas: 1\n    - name: NA-EAST\n      replicas: 1\n---\r\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  labels:\n    app: myapp1\n  namespace: demo\nspec:\n  selector:\n    matchLabels:\n      app: myapp1\n  template:\n    metadata:\n      labels:\n        app: myapp1\n    spec:\n      containers:\n        - image: nginx\n          name: myapp1\n          ports:\n            - containerPort: 80\n              protocol: TCP\n          resources:\n            limits:\n              cpu: 200m\n              memory: 256Mi\n            requests:\n              cpu: 200m\n              memory: 256Mi\n          volumeMounts:\n            - mountPath: /tmp\n              name: data\n  volumeClaimTemplates:\n    - metadata:\n        annotations:\n          volume.beta.kubernetes.io/storage-class: local-ssd\n        name: data\n      spec:\n        accessModes:\n          - ReadWriteOnce\n        resources:\n          requests:\n            storage: 1G\n---\r\napiVersion: v1\nkind: LoadBalancer4\nmetadata:\n  namespace: demo\nspec:\n  listeners:\n    - backendPort: 80\n      backendSelector:\n        app: myapp1\n      healthCheck: false\n      listenerPort: 80\n      name: listener-80\n      protocol: tcp\n      scheduler: wlc\n"
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "ApplicationNotFound",
                      "message": "The application ID given does not exist."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "operationId": "get-application-by-ID",
        "description": "Get the details of an ECP application.",
        "parameters": [
          {
            "name": "On-Behalf-Of",
            "in": "header",
            "description": "If you are a reseller, you can use this header to specify the ID of a child customer and make API call on their behalf.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "delete": {
        "summary": "Delete an application",
        "operationId": "delete-application-by-ID",
        "responses": {
          "204": {
            "description": "This reponse is returned if the application is successfully deleted.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Refer to response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "ApplicationBeingDeleted": {
                    "value": {
                      "error": "ApplicationBeingDeleted",
                      "message": "The application is being deleted and cannot be updated or deleted again."
                    }
                  },
                  "ApplicationHasCname": {
                    "value": {
                      "error": "ApplicationHasCname",
                      "message": "A CNAME for the application exists. Please delete the CNAME first."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "ApplicationNotFound",
                      "message": "The application ID given does not exist."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "tags": [
          "Applications"
        ],
        "description": "Delete an existing ECP application. \n\n**Note that deleting an application will cause all objects created for the application to be deleted, including persistent storage volumes (if any).**"
      },
      "put": {
        "summary": "Replace an application",
        "operationId": "put-application-by-ID",
        "responses": {
          "204": {
            "description": "This response indicates the request is accepted.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Refer to response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "ApplicationBeingDeleted": {
                    "value": {
                      "error": "ApplicationBeingDeleted",
                      "message": "The application is being deleted and cannot be updated or deleted again."
                    }
                  },
                  "NotAuthorized": {
                    "value": {
                      "error": "NotAuthorized",
                      "message": "You can't modify resources in namespace {namespace}."
                    }
                  },
                  "NamespaceInconsistent": {
                    "value": {
                      "error": "NamespaceInconsistent",
                      "message": "Namespace is inconsistent. The \"metadata.namespace\" fields of the objects to be deployed should all use the same \"namespace\"."
                    }
                  },
                  "AppNameInconsistent": {
                    "value": {
                      "error": "AppNameInconsistent",
                      "message": "The appName parameter value is inconsistent with your YAML file. The metadata name fields of the objects to be deployed must use the same app name."
                    }
                  },
                  "QuotaExceeded": {
                    "value": {
                      "error": "QuotaExceeded",
                      "message": "The application could not be deployed because it requires {resource requests}. You have a quota of {resources available}."
                    }
                  },
                  "ConflictNetworkConfiguration": {
                    "value": {
                      "error": "ConflictNetworkConfiguration",
                      "message": "Requesting public IPv4 addresses for pods is not allowed when a LoadBalancer4 object is already specified. Please remove the LoadBalancer4 object if your pods need to have publicly accessible IPv4 addresses."
                    }
                  },
                  "InvalidResourceRequirement": {
                    "value": {
                      "error": "InvalidResourceRequirement",
                      "message": "The resource requirement is invalid. Can be: The limits.cpu of a container should not be lower than 0.05 core. The sum of limits.cpu of a pod should not be higher than 24 cores. The requests.cpu should be equal to limits.cpu. The limits.mem of a container should not be lower than 50MB. The sum of limits.mem of a pod should not be higher than 128GB. The requests.mem should be equal to limits.mem. The requests.storage of a PVC should be not lower than 500MB and not higher than 100GB."
                    }
                  },
                  "PoPDoesNotExist": {
                    "value": {
                      "error": "PoPDoesNotExist",
                      "message": "The PoP {code of location} specified is invalid or does not exist."
                    }
                  },
                  "PoPNotAvailable": {
                    "value": {
                      "error": "PoPNotAvailable",
                      "message": "The PoP {code of location} specified is {offline || suspended} and currently not available."
                    }
                  },
                  "PoPNotAvailable(1)": {
                    "value": {
                      "error": "PoPNotAvailable",
                      "message": "The PoP {code of location} specified does not support feature IPv6. Please choose a different location."
                    }
                  },
                  "PoPFullyLoaded": {
                    "value": {
                      "error": "PoPFullyLoaded",
                      "message": "The PoP {code of location} specified is fully loaded and cannot provision resources requested. Please choose a different location."
                    }
                  },
                  "DeploymentToMainlandChinaNotAllowed": {
                    "value": {
                      "error": "DeploymentToMainlandChinaNotAllowed",
                      "message": "You are not allowed to deploy applications to PoPs in mainland China. Please contact our sales engineers for support."
                    }
                  },
                  "RegionDoesNotExist": {
                    "value": {
                      "error": "RegionDoesNotExist",
                      "message": "The region {region} is invalid or does not exist."
                    }
                  },
                  "RegionNotAvailable": {
                    "value": {
                      "error": "RegionNotAvailable",
                      "message": "There are currently no available PoPs under the region {region}."
                    }
                  },
                  "RegionNotAvailable(1)": {
                    "value": {
                      "error": "RegionNotAvailable",
                      "message": "There are currently no PoPs that support feature {IPv6} under the region {region}."
                    }
                  },
                  "NamespaceUpdateNotAllowed": {
                    "value": {
                      "error": "NamespaceUpdateNotAllowed",
                      "message": "Using a different namespace to update an application is not allowed."
                    }
                  },
                  "PVCUpdateNotAllowed": {
                    "value": {
                      "error": "PVCUpdateNotAllowed",
                      "message": "Updating PVCs in use is not allowed."
                    }
                  },
                  "VolumeNotDefined": {
                    "value": {
                      "error": "VolumneNotDefined",
                      "message": "The volume {volume name} in “volumeMounts” is not defined."
                    }
                  },
                  "VolumeNotMounted": {
                    "value": {
                      "error": "VolumeNotMounted",
                      "message": "The volume {volume name} defined is not mounted to any mount points."
                    }
                  },
                  "ConflictVolumeMountPath": {
                    "value": {
                      "error": "ConflictVolumeMountPath",
                      "message": "The mountPath in volumeMounts must be unique and without overlapping."
                    }
                  },
                  "InvalidLoadBalancer4Listener": {
                    "value": {
                      "error": "InvalidLoadBalancer4Listener",
                      "message": "The LoadBalancer4 listener {listener name} is invalid. The “backendSelector” does not match {ReplicaSet/StatefulSet/Deployment}.spec.template.metadata.labels."
                    }
                  },
                  "ApplicationHasCname": {
                    "value": {
                      "error": "ApplicationHasCname",
                      "message": "A CNAME for the application exists. Please delete the CNAME first before removing layer 4 load balancers from this application."
                    }
                  },
                  "InvalidRequestBody": {
                    "value": {
                      "error": "InvalidRequestBody",
                      "message": "Failed to parse {YAML | JSON} in the request body. Please check the content format."
                    }
                  },
                  "InvalidResourceKind": {
                    "value": {
                      "error": "InvalidResourceKind",
                      "message": "Can be:\nRequiredKindMissing\nUnrecognizableKind\nUnsupportedKubernetesResource\nUnsupportedPVC\nConflictKind\nRepeatedKind\nKindNotSpecified"
                    }
                  },
                  "InvalidSpecification": {
                    "value": {
                      "error": "InvalidSpecification",
                      "message": "The {Kind 1} specified in invalid: * {fieldPath}: {Code}: [{value}]: [{message}] The {Kind n} specified in invalid: * {fieldPath}: {Code}: [{value}]: [{message}]"
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "ApplicationNotFound",
                      "message": "The application ID given does not exist."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "tags": [
          "Applications"
        ],
        "description": "Update an ECP application by using the HTTP method “PUT”. This operation will cause all existing objects (including persistent storage volumes, if any) of an application to be replaced.",
        "requestBody": {
          "content": {
            "application/yaml": {
              "schema": {
                "title": "",
                "description": "",
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "title": "Kubernetes Workload",
                      "oneOf": [
                        {
                          "title": "Deployment",
                          "type": "object",
                          "x-examples": {
                            "example-1": {}
                          },
                          "description": "Deployment",
                          "properties": {
                            "apiVersion": {
                              "type": "string",
                              "enum": [
                                "apps/v1"
                              ]
                            },
                            "Kind": {
                              "type": "string",
                              "description": "Use Kubernetes \"Deployment\" as workload controller if your application does not require persistent storage. Refer to <a href=\"https://kubernetes.io/docs/concepts/workloads/controllers/deployment/\">Kubernetes official documentation </a> for more about the controller.",
                              "enum": [
                                "Deployment"
                              ]
                            },
                            "metadata": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of a \"Deployment\" resource. Must be the same as the query param \"appName\"."
                                }
                              }
                            },
                            "spec": {
                              "type": "object",
                              "description": "This document only focuses on some typical configs of  a Deployment object. For more about how to specify a Deployment, please refer to the <a href=\"https://v1-17.docs.kubernetes.io/docs/reference/generated/kubernetes-api/v1.17/#deployment-v1-apps\">official Kubernetes API reference</a>.",
                              "required": [
                                "selector",
                                "template"
                              ],
                              "properties": {
                                "selector": {
                                  "type": "object",
                                  "description": "A label query over pods. Must match the pod template's labels.",
                                  "required": [
                                    "matchLabels"
                                  ],
                                  "properties": {
                                    "matchLabels": {
                                      "type": "object",
                                      "description": "A map of key value pairs"
                                    }
                                  }
                                },
                                "template": {
                                  "type": "object",
                                  "description": "Template of the pods that will be created by the Deployment",
                                  "required": [
                                    "metadata",
                                    "spec"
                                  ],
                                  "properties": {
                                    "metadata": {
                                      "type": "object",
                                      "required": [
                                        "labels"
                                      ],
                                      "properties": {
                                        "labels": {
                                          "type": "object",
                                          "description": "Map of string keys and values that can be used to organize and categorize pods. Must match selector of the Deployment"
                                        },
                                        "annotations": {
                                          "type": "object",
                                          "description": "An unstructured key value map stored with a pod",
                                          "properties": {
                                            "quantil.com/enableExternalIP": {
                                              "type": "boolean",
                                              "default": false,
                                              "description": "Pass this annotation and set to true if you would like to enable public IPv4 network interface for the pod. Alternatively, you can specify an ECP \"LoadBalancer4\" object for your ECP application to expose the pod. "
                                            },
                                            "quantil.com/enableIpv6ExternalIP": {
                                              "type": "boolean",
                                              "default": false,
                                              "description": "Set this annotation to true if you would like to have a public IPv6 address for the pod. Alternatively, you can create an ECP custom \"LoadBalancer4\" object for your ECP application to expose the pod. "
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "spec": {
                                      "type": "object",
                                      "description": "Specification of desired behavior of the pod",
                                      "required": [
                                        "containers"
                                      ],
                                      "properties": {
                                        "containers": {
                                          "type": "array",
                                          "description": "List of containers coupled in the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "image": {
                                                "type": "string",
                                                "description": "Docker image name"
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "Name of the container specified as a DNS_LABEL"
                                              },
                                              "resources": {
                                                "type": "object",
                                                "description": "Compute Resources required by this container. Cannot be updated.",
                                                "required": [
                                                  "limits"
                                                ],
                                                "properties": {
                                                  "limits": {
                                                    "type": "object",
                                                    "description": "The maximum amount of compute resources required",
                                                    "required": [
                                                      "cpu",
                                                      "memory"
                                                    ],
                                                    "properties": {
                                                      "cpu": {
                                                        "type": "string",
                                                        "description": "The amount of CPU required. Minimum 0.05 core. The sum of limits.cpu required by all containers in the pod must not exceed 24 cores."
                                                      },
                                                      "memory": {
                                                        "type": "string",
                                                        "description": "The amount of memory required. Minimum 50 MB. The sum of limits.memory required by all containers in the pod must not exceed 128 GB."
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "required": [
                                              "image",
                                              "name",
                                              "resources"
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "required": [
                            "apiVersion",
                            "Kind",
                            "metadata",
                            "spec"
                          ]
                        },
                        {
                          "title": "ReplicaSet",
                          "type": "object",
                          "x-examples": {
                            "example-1": {}
                          },
                          "description": "ReplicaSet",
                          "properties": {
                            "apiVersion": {
                              "type": "string",
                              "enum": [
                                "apps/v1"
                              ]
                            },
                            "Kind": {
                              "type": "string",
                              "description": "Use Kubernetes \"ReplicaSet\" as workload controller if your application does not require persistent storage. Refer to <a href=\"https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/\">Kubernetes official documentation </a> for more about the controller.",
                              "enum": [
                                "ReplicaSet"
                              ]
                            },
                            "metadata": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of a \"ReplicaSet\" resource. Must be the same as the query param \"appName\"."
                                }
                              }
                            },
                            "spec": {
                              "type": "object",
                              "description": "This document only focuses on some typical configs of  a ReplicaSet object. For more about how to specify a ReplicaSet, please refer to the <a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.17/#replicaset-v1-apps\">official Kubernetes API reference</a>",
                              "required": [
                                "selector",
                                "template"
                              ],
                              "properties": {
                                "selector": {
                                  "type": "object",
                                  "description": "A label query over pods. Must match the pod template's labels.",
                                  "required": [
                                    "matchLabels"
                                  ],
                                  "properties": {
                                    "matchLabels": {
                                      "type": "object",
                                      "description": "A map of key value pairs"
                                    }
                                  }
                                },
                                "template": {
                                  "type": "object",
                                  "description": "Template of the pods that will be created by the ReplicaSet",
                                  "required": [
                                    "metadata",
                                    "spec"
                                  ],
                                  "properties": {
                                    "metadata": {
                                      "type": "object",
                                      "required": [
                                        "labels"
                                      ],
                                      "properties": {
                                        "labels": {
                                          "type": "object",
                                          "description": "Map of string keys and values that can be used to organize and categorize pods. Must match selector of the ReplicaSet"
                                        },
                                        "annotations": {
                                          "type": "object",
                                          "description": "An unstructured key value map stored with a pod",
                                          "properties": {
                                            "quantil.com/enableExternalIP": {
                                              "type": "boolean",
                                              "default": false,
                                              "description": "Pass this annotation and set to true if you would like to enable public IPv4 network interface for the pod. Alternatively, you can specify an ECP \"LoadBalancer4\" object for your ECP application to expose the pod. "
                                            },
                                            "quantil.com/enableIpv6ExternalIP": {
                                              "type": "boolean",
                                              "default": false,
                                              "description": "Pass this annotation and set to true if you would like to enable public IPv6 network interface for the pod. Alternatively, you can specify an ECP custom \"LoadBalancer4\" object for your ECP application to expose the pod. "
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "spec": {
                                      "type": "object",
                                      "description": "Specifications of desired behavior of the pod",
                                      "required": [
                                        "containers"
                                      ],
                                      "properties": {
                                        "containers": {
                                          "type": "array",
                                          "description": "List of containers coupled in the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "image": {
                                                "type": "string",
                                                "description": "Docker image name"
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "Name of the container specified as a DNS_LABEL"
                                              },
                                              "resources": {
                                                "type": "object",
                                                "description": "Compute Resources required by this container. Cannot be updated.",
                                                "required": [
                                                  "limits"
                                                ],
                                                "properties": {
                                                  "limits": {
                                                    "type": "object",
                                                    "description": "The maximum amount of compute resources required",
                                                    "required": [
                                                      "cpu",
                                                      "memory"
                                                    ],
                                                    "properties": {
                                                      "cpu": {
                                                        "type": "string",
                                                        "description": "The amount of CPU required. Minimum 0.05 core. The sum of limits.cpu required by all containers in the pod must not exceed 24 cores."
                                                      },
                                                      "memory": {
                                                        "type": "string",
                                                        "description": "The amount of memory required. Minimum 50 MB. The sum of limits.memory required by all containers in the pod must not exceed 128 GB."
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "required": [
                                              "image",
                                              "name",
                                              "resources"
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "required": [
                            "apiVersion",
                            "Kind",
                            "metadata",
                            "spec"
                          ]
                        },
                        {
                          "title": "StatefulSet",
                          "type": "object",
                          "description": "StatefulSet",
                          "x-examples": {
                            "example-1": {}
                          },
                          "properties": {
                            "apiVersion": {
                              "type": "string",
                              "enum": [
                                "apps/v1"
                              ]
                            },
                            "Kind": {
                              "type": "string",
                              "description": "Use Kubernetes \"StatefulSet\" as workload controller if your application requires persistent storage. Refer to <a href=\"https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/\">Kubernetes official documentation </a> for more about the controller.",
                              "enum": [
                                "StatefulSet"
                              ]
                            },
                            "metadata": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of a \"StatefulSet\" resource. Must be the same as the query param \"appName\"."
                                }
                              }
                            },
                            "spec": {
                              "type": "object",
                              "description": "This document only focuses on some typical configs of  a StatefulSet object. For more about how to specify a StatefulSet, please refer to the <a href=\"https://v1-17.docs.kubernetes.io/docs/reference/generated/kubernetes-api/v1.17/#statefulset-v1-apps\"> official kubernetes API reference</a>.",
                              "required": [
                                "selector",
                                "template"
                              ],
                              "properties": {
                                "selector": {
                                  "type": "object",
                                  "description": "A label query over pods. Must match the pod template's labels.",
                                  "required": [
                                    "matchLabels"
                                  ],
                                  "properties": {
                                    "matchLabels": {
                                      "type": "object",
                                      "description": "A map of key value pairs"
                                    }
                                  }
                                },
                                "template": {
                                  "type": "object",
                                  "description": "Template of the pods that will be created by the StatefulSet",
                                  "required": [
                                    "metadata",
                                    "spec"
                                  ],
                                  "properties": {
                                    "metadata": {
                                      "type": "object",
                                      "required": [
                                        "labels"
                                      ],
                                      "properties": {
                                        "labels": {
                                          "type": "object",
                                          "description": "Map of string keys and values that can be used to organize and categorize pods. Must match selector of the StatefulSet"
                                        },
                                        "annotations": {
                                          "type": "object",
                                          "description": "An unstructured key value map stored with a pod",
                                          "properties": {
                                            "quantil.com/enableExternalIP": {
                                              "type": "boolean",
                                              "default": false,
                                              "description": "Pass this annotation and set to true if you would like to enable public IPv4 network interface for the pod. Alternatively, you can specify an ECP \"LoadBalancer4\" object for your ECP application to expose the pod."
                                            },
                                            "quantil.com/enableIpv6ExternalIP": {
                                              "type": "boolean",
                                              "default": false,
                                              "description": "Pass this annotation and set to true if you would like to enable public IPv6 network interface for the pod. Alternatively, you can specify an ECP \"LoadBalancer4\" object for your ECP application to expose the pod."
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "spec": {
                                      "type": "object",
                                      "description": "Specification of desired behavior of the pod",
                                      "required": [
                                        "containers"
                                      ],
                                      "properties": {
                                        "containers": {
                                          "type": "array",
                                          "description": "List of containers coupled in the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "image": {
                                                "type": "string",
                                                "description": "Docker image name"
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "Name of the container specified as a DNS_LABEL"
                                              },
                                              "resources": {
                                                "type": "object",
                                                "description": "Compute Resources required by this container. Cannot be updated.",
                                                "required": [
                                                  "limits"
                                                ],
                                                "properties": {
                                                  "limits": {
                                                    "type": "object",
                                                    "description": "The maximum amount of compute resources required",
                                                    "required": [
                                                      "cpu",
                                                      "memory"
                                                    ],
                                                    "properties": {
                                                      "cpu": {
                                                        "type": "string",
                                                        "description": "The amount of CPU required. Minimum 0.05 core. The sum of limits.cpu required by all containers in the pod must not exceed 24 cores."
                                                      },
                                                      "memory": {
                                                        "type": "string",
                                                        "description": "The amount of memory required. Minimum 50 MB. The sum of limits.memory required by all containers in the pod must not exceed 128 GB."
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              "volumeMounts": {
                                                "type": "array",
                                                "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "name": {
                                                      "type": "string",
                                                      "description": "This must match the Name of a Volume"
                                                    },
                                                    "mountPath": {
                                                      "type": "string",
                                                      "description": "Path within the container at which the volume should be mounted. Must not contain ':'."
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "required": [
                                              "image",
                                              "name",
                                              "resources"
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                "volumeClaimTemplates": {
                                  "type": "array",
                                  "description": "A list of persistent volume claims that pods are allowed to reference. Every claim in this list must have at least one matching (by name) volumeMount in one container in the pod template.",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "metadata": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "description": "Name of a volume claim"
                                          },
                                          "annotations": {
                                            "type": "object",
                                            "properties": {
                                              "volume.beta.kubernetes.io/storage-class": {
                                                "type": "string",
                                                "enum": [
                                                  "local-ssd"
                                                ],
                                                "description": "Specifiy the storageClass of a volume claim. Currently only \"local-ssd\" is available. \"local-ssd\" means local persistent SSD storage. Data is stored locally and persists across container restarts, but will be lost when pod is rescheduled to another node. "
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "spec": {
                                        "type": "object",
                                        "properties": {
                                          "accessModes": {
                                            "type": "array",
                                            "description": "The desired access modes the volume claim should have. Should be \"ReadWriteOnce\".",
                                            "items": {
                                              "type": "string",
                                              "enum": [
                                                "ReadWriteOnce"
                                              ]
                                            }
                                          },
                                          "resources": {
                                            "type": "object",
                                            "description": "The resources the volume claim should have",
                                            "properties": {
                                              "requests": {
                                                "type": "object",
                                                "description": "The minimum amount of resources required",
                                                "properties": {
                                                  "storage": {
                                                    "type": "string",
                                                    "description": "The storage capacity required. Must be not less than 500MB and not higher than 100GB."
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "required": [
                            "apiVersion",
                            "Kind",
                            "metadata",
                            "spec"
                          ]
                        }
                      ]
                    },
                    {
                      "title": "ECP LoadBalancer4",
                      "type": "object",
                      "description": "LoadBalancer4",
                      "properties": {
                        "apiVersion": {
                          "type": "string",
                          "enum": [
                            "v1"
                          ]
                        },
                        "Kind": {
                          "type": "string",
                          "enum": [
                            "LoadBalancer4"
                          ],
                          "description": "Use \"LoadBalancer4\", an ECP custom resource, to expose your application instances"
                        },
                        "metadata": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Name of a \"LoadBalancer4\" object. Must be the same as the query param \"appName\"."
                            }
                          }
                        },
                        "spec": {
                          "type": "object",
                          "required": [
                            "listeners"
                          ],
                          "properties": {
                            "listeners": {
                              "type": "array",
                              "description": "Array of rules for the LoadBalancer4 to forward incoming traffic to backend application instances",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "Name of a listener. Must be unique across a \"LoadBalancer4\" obejct. Allows lower-case letters, digits and hyphens only. Must not start or end with a hyphen, and must be less than 63 characters."
                                  },
                                  "backendSelector": {
                                    "type": "object",
                                    "description": "Key value pair that is used to match target pods (i.e. application instances) as backend of the LoadBalancer4."
                                  },
                                  "listenerPort": {
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 65535,
                                    "description": "Number of port that the LoadBalancer4 listens on"
                                  },
                                  "backendPort": {
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 65535,
                                    "description": "Number of the backend pods' port that receives traffic forwarded by the LoadBalancer4. Must be the same as \"listenerPort\"."
                                  },
                                  "protocol": {
                                    "type": "string",
                                    "enum": [
                                      "TCP",
                                      "UDP"
                                    ],
                                    "description": "Protocol of incoming traffic that the LoadBalancer4 will handle"
                                  },
                                  "scheduler": {
                                    "type": "string",
                                    "enum": [
                                      "rr",
                                      "lc",
                                      "sh"
                                    ],
                                    "description": "Load balancing algorithm used to make load balancing decision. Can be \"rr\" (Round Robin), \"lc\" (Least Conncetions) or \"sh\" (Source Hash).",
                                    "default": "rr"
                                  },
                                  "healthCheck": {
                                    "type": "boolean",
                                    "default": false,
                                    "description": "Whether to turn on periodic probes to check the healthiness of backend pods. Pod that fails health check will be removed by the LoadBalancer4 and hence will not receive traffic."
                                  },
                                  "healthCheckType": {
                                    "type": "string",
                                    "enum": [
                                      "TCP",
                                      "HTTP"
                                    ],
                                    "description": "When \"protocol\" field is set to \"TCP\", the health check type can be \"TCP\" or \"HTTP\". When the \"protocol\" is set to \"UDP\", health check is not available."
                                  },
                                  "healthCheckDomain": {
                                    "type": "string",
                                    "description": "Hostname to connect to. Acceptable only when the health check type is \"HTTP\". Default to the IP of a backend pod."
                                  },
                                  "healthCheckURI": {
                                    "type": "string",
                                    "description": "Path to access. Acceptable only when the health check type is \"HTTP\"."
                                  },
                                  "healthCheckConnectPort": {
                                    "type": "integer",
                                    "description": "Number of the port to access on the backend pods. Set to same as the \"backendPort\" by default.",
                                    "minimum": 1,
                                    "maximum": 65535
                                  },
                                  "healthCheckInterval": {
                                    "type": "integer",
                                    "default": 1,
                                    "description": "How often (in seconds) to perform the health check",
                                    "minimum": 1,
                                    "maximum": 5
                                  }
                                },
                                "required": [
                                  "name",
                                  "backendSelector",
                                  "listenerPort",
                                  "backendPort"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "required": [
                        "apiVersion",
                        "Kind",
                        "metadata",
                        "spec"
                      ]
                    },
                    {
                      "title": "ECP Target",
                      "oneOf": [
                        {
                          "title": "RegionPreference",
                          "type": "object",
                          "x-examples": {
                            "example-1": {
                              "apiVersion": "v1",
                              "kind": "RegionPreference",
                              "metadata": {
                                "name": "myapp",
                                "namespace": "demo"
                              },
                              "spec": {
                                "regions": [
                                  {
                                    "name": "NA-WEST",
                                    "replicas": 6
                                  },
                                  {
                                    "name": "EU",
                                    "replicas": 4
                                  }
                                ]
                              }
                            }
                          },
                          "description": "Region",
                          "properties": {
                            "apiVersion": {
                              "type": "string",
                              "enum": [
                                "v1"
                              ]
                            },
                            "Kind": {
                              "type": "string",
                              "description": "Use \"RegionPreference\", an ECP custom resource, to specify ECP regions and have your application instances automatically distributed across locations within each ECP region. ",
                              "enum": [
                                "RegionPreference"
                              ]
                            },
                            "metadata": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of a \"RegionPreference\" resource. Must be the same as the query param \"appName\"."
                                }
                              }
                            },
                            "spec": {
                              "type": "object",
                              "required": [
                                "regions"
                              ],
                              "properties": {
                                "regions": {
                                  "type": "array",
                                  "description": "Array of target ECP regions to distribute your application instances",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "type": "string",
                                        "description": "Code of an ECP region, e.g. \"NA-WEST\" which stands for west of North America."
                                      },
                                      "replicas": {
                                        "type": "integer",
                                        "description": "The total number of pods (i.e. application instances) desired across locations within an ECP region",
                                        "minimum": 1
                                      }
                                    },
                                    "required": [
                                      "name",
                                      "replicas"
                                    ]
                                  }
                                }
                              }
                            }
                          },
                          "required": [
                            "apiVersion",
                            "Kind",
                            "metadata",
                            "spec"
                          ]
                        },
                        {
                          "title": "Location",
                          "type": "object",
                          "description": "Location",
                          "x-examples": {
                            "example-1": {
                              "apiVersion": "v1",
                              "kind": "Location",
                              "metadata": {
                                "name": "myapp",
                                "namespace": "demo"
                              },
                              "spec": {
                                "locations": [
                                  {
                                    "name": "sjc",
                                    "replicas": 2
                                  },
                                  {
                                    "name": "ams",
                                    "replicas": 1
                                  }
                                ]
                              }
                            }
                          },
                          "properties": {
                            "apiVersion": {
                              "type": "string",
                              "enum": [
                                "v1"
                              ]
                            },
                            "Kind": {
                              "type": "string",
                              "enum": [
                                "Location"
                              ],
                              "description": "Use \"Location\", an ECP custom resource, to pick ECP locations and precisely place your application instances."
                            },
                            "metadata": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of a \"Location\" resource. Must be the same as the query param \"appName\"."
                                }
                              }
                            },
                            "spec": {
                              "type": "object",
                              "required": [
                                "locations"
                              ],
                              "properties": {
                                "locations": {
                                  "type": "array",
                                  "description": "Array of target ECP locations",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "type": "string",
                                        "description": "Code of an ECP location, e.g. \"sjc1\" which stands for the ECP location at San Jose, US."
                                      },
                                      "replicas": {
                                        "type": "integer",
                                        "description": "Number of pods (i.e. application instances) desired at an ECP location",
                                        "minimum": 1
                                      }
                                    },
                                    "required": [
                                      "name",
                                      "replicas"
                                    ]
                                  }
                                }
                              }
                            }
                          },
                          "required": [
                            "apiVersion",
                            "Kind",
                            "metadata",
                            "spec"
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Partially update an application",
        "operationId": "patch-application-by-ID",
        "responses": {
          "204": {
            "description": "This response indicates the request is accepted.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Refer to response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "ApplicationBeingDeleted": {
                    "value": {
                      "error": "ApplicationBeingDeleted",
                      "message": "The application is being deleted and cannot be updated or deleted again."
                    }
                  },
                  "NotAuthorized": {
                    "value": {
                      "error": "NotAuthorized",
                      "message": "You can't modify resources in namespace {namespace}."
                    }
                  },
                  "NamespaceInconsistent": {
                    "value": {
                      "error": "NamespaceInconsistent",
                      "message": "Namespace is inconsistent. The \"metadata.namespace\" fields of the objects to be deployed should all use the same \"namespace\"."
                    }
                  },
                  "AppNameInconsistent": {
                    "value": {
                      "error": "AppNameInconsistent",
                      "message": "The appName parameter value is inconsistent with your YAML file. The metadata name fields of the objects to be deployed must use the same app name."
                    }
                  },
                  "QuotaExceeded": {
                    "value": {
                      "error": "QuotaExceeded",
                      "message": "The application could not be deployed because it requires {resource requests}. You have a quota of {resources available}."
                    }
                  },
                  "ConflictNetworkConfiguration": {
                    "value": {
                      "error": "ConflictNetworkConfiguration",
                      "message": "Requesting public IPv4 addresses for pods is not allowed when a LoadBalancer4 object is already specified. Please remove the LoadBalancer4 object if your pods need to have publicly accessible IPv4 addresses."
                    }
                  },
                  "ResourceObjectNotExist": {
                    "value": {
                      "error": "ResourceObjectNotExist",
                      "message": "The application does not contain a {kind} object. Please use PUT method if you would like to add a new object."
                    }
                  },
                  "InvalidResourceRequirement": {
                    "value": {
                      "error": "InvalidResourceRequirement",
                      "message": "The resource requirement is invalid. Can be: The limits.cpu of a container should not be lower than 0.05 core. The sum of limits.cpu of a pod should not be higher than 24 cores. The requests.cpu should be equal to limits.cpu. The limits.mem of a container should not be lower than 50MB. The sum of limits.mem of a pod should not be higher than 128GB. The requests.mem should be equal to limits.mem. The requests.storage of a PVC should be not lower than 500MB and not higher than 100GB."
                    }
                  },
                  "PoPDoesNotExist": {
                    "value": {
                      "error": "PoPDoesNotExist",
                      "message": "The PoP {code of location} specified is invalid or does not exist."
                    }
                  },
                  "PoPNotAvailable": {
                    "value": {
                      "error": "PoPNotAvailable",
                      "message": "The PoP {code of location} specified is {offline || suspended} and currently not available."
                    }
                  },
                  "PoPNotAvailable(1)": {
                    "value": {
                      "error": "PoPNotAvailable",
                      "message": "The PoP {code of location} specified does not support feature IPv6. Please choose a different location."
                    }
                  },
                  "PoPFullyLoaded": {
                    "value": {
                      "error": "PoPFullyLoaded",
                      "message": "The PoP {code of location} specified is fully loaded and cannot provision resources requested. Please choose a different location."
                    }
                  },
                  "DeploymentToMainlandChinaNotAllowed": {
                    "value": {
                      "error": "DeploymentToMainlandChinaNotAllowed",
                      "message": "You are not allowed to deploy applications to PoPs in mainland China. Please contact our sales engineers for support."
                    }
                  },
                  "RegionDoesNotExist": {
                    "value": {
                      "error": "RegionDoesNotExist",
                      "message": "The region {region} is invalid or does not exist."
                    }
                  },
                  "RegionNotAvailable": {
                    "value": {
                      "error": "RegionNotAvailable",
                      "message": "There are currently no available PoPs under the region {region}."
                    }
                  },
                  "RegionNotAvailable(1)": {
                    "value": {
                      "error": "RegionNotAvailable",
                      "message": "There are currently no PoPs that support feature {IPv6} under the region {region}."
                    }
                  },
                  "NamespaceUpdateNotAllowed": {
                    "value": {
                      "error": "NamespaceUpdateNotAllowed",
                      "message": "Using a different namespace to update an application is not allowed."
                    }
                  },
                  "PVCUpdateNotAllowed": {
                    "value": {
                      "error": "PVCUpdateNotAllowed",
                      "message": "Updating PVCs in use is not allowed."
                    }
                  },
                  "VolumeNotDefined": {
                    "value": {
                      "error": "VolumneNotDefined",
                      "message": "The volume {volume name} in “volumeMounts” is not defined."
                    }
                  },
                  "VolumeNotMounted": {
                    "value": {
                      "error": "VolumeNotMounted",
                      "message": "The volume {volume name} defined is not mounted to any mount points."
                    }
                  },
                  "ConflictVolumeMountPath": {
                    "value": {
                      "error": "ConflictVolumeMountPath",
                      "message": "The mountPath in volumeMounts must be unique and without overlapping."
                    }
                  },
                  "InvalidLoadBalancer4Listener": {
                    "value": {
                      "error": "InvalidLoadBalancer4Listener",
                      "message": "The LoadBalancer4 listener {listener name} is invalid. The “backendSelector” does not match {ReplicaSet/StatefulSet/Deployment}.spec.template.metadata.labels."
                    }
                  },
                  "ApplicationHasCname": {
                    "value": {
                      "error": "ApplicationHasCname",
                      "message": "A CNAME for the application exists. Please delete the CNAME first before removing layer 4 load balancers from this application."
                    }
                  },
                  "InvalidRequestBody": {
                    "value": {
                      "error": "InvalidRequestBody",
                      "message": "Failed to parse {YAML | JSON} in the request body. Please check the content format."
                    }
                  },
                  "InvalidResourceKind": {
                    "value": {
                      "error": "InvalidResourceKind",
                      "message": "Can be:\nRequiredKindMissing\nUnrecognizableKind\nUnsupportedKubernetesResource\nUnsupportedPVC\nConflictKind\nRepeatedKind\nKindNotSpecified"
                    }
                  },
                  "InvalidSpecification": {
                    "value": {
                      "error": "InvalidSpecification",
                      "message": "The {Kind 1} specified in invalid: * {fieldPath}: {Code}: [{value}]: [{message}] The {Kind n} specified in invalid: * {fieldPath}: {Code}: [{value}]: [{message}]"
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "ApplicationNotFound",
                      "message": "The application ID given does not exist."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "tags": [
          "Applications"
        ],
        "description": "Update an ECP application by using the HTTP method “PATCH”. **Note that if an application is using persistent storage volumes, scaling down or redistributing the instances of an application might cause existing persistent volumes to be deleted along with instances deletion.**",
        "requestBody": {
          "content": {
            "application/yaml": {
              "schema": {
                "title": "",
                "description": "",
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "title": "Kubernetes Workload",
                      "oneOf": [
                        {
                          "title": "Deployment",
                          "type": "object",
                          "x-examples": {
                            "example-1": {}
                          },
                          "description": "Deployment",
                          "properties": {
                            "apiVersion": {
                              "type": "string",
                              "enum": [
                                "apps/v1"
                              ]
                            },
                            "Kind": {
                              "type": "string",
                              "description": "Use Kubernetes \"Deployment\" as workload controller if your application does not require persistent storage. Refer to <a href=\"https://kubernetes.io/docs/concepts/workloads/controllers/deployment/\">Kubernetes official documentation </a> for more about the controller.",
                              "enum": [
                                "Deployment"
                              ]
                            },
                            "metadata": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of a \"Deployment\" resource. Must be the same as the query param \"appName\"."
                                }
                              }
                            },
                            "spec": {
                              "type": "object",
                              "description": "This document only focuses on some typical configs of  a Deployment object. For more about how to specify a Deployment, please refer to the <a href=\"https://v1-17.docs.kubernetes.io/docs/reference/generated/kubernetes-api/v1.17/#deployment-v1-apps\">official Kubernetes API reference</a>.",
                              "required": [
                                "selector",
                                "template"
                              ],
                              "properties": {
                                "selector": {
                                  "type": "object",
                                  "description": "A label query over pods. Must match the pod template's labels.",
                                  "required": [
                                    "matchLabels"
                                  ],
                                  "properties": {
                                    "matchLabels": {
                                      "type": "object",
                                      "description": "A map of key value pairs"
                                    }
                                  }
                                },
                                "template": {
                                  "type": "object",
                                  "description": "Template of the pods that will be created by the Deployment",
                                  "required": [
                                    "metadata",
                                    "spec"
                                  ],
                                  "properties": {
                                    "metadata": {
                                      "type": "object",
                                      "required": [
                                        "labels"
                                      ],
                                      "properties": {
                                        "labels": {
                                          "type": "object",
                                          "description": "Map of string keys and values that can be used to organize and categorize pods. Must match selector of the Deployment"
                                        },
                                        "annotations": {
                                          "type": "object",
                                          "description": "An unstructured key value map stored with a pod",
                                          "properties": {
                                            "quantil.com/enableExternalIP": {
                                              "type": "boolean",
                                              "default": false,
                                              "description": "Pass this annotation and set to true if you would like to enable public IPv4 network interface for the pod. Alternatively, you can specify an ECP \"LoadBalancer4\" object for your ECP application to expose the pod. "
                                            },
                                            "quantil.com/enableIpv6ExternalIP": {
                                              "type": "boolean",
                                              "default": false,
                                              "description": "Set this annotation to true if you would like to have a public IPv6 address for the pod. Alternatively, you can create an ECP custom \"LoadBalancer4\" object for your ECP application to expose the pod. "
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "spec": {
                                      "type": "object",
                                      "description": "Specification of desired behavior of the pod",
                                      "required": [
                                        "containers"
                                      ],
                                      "properties": {
                                        "containers": {
                                          "type": "array",
                                          "description": "List of containers coupled in the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "image": {
                                                "type": "string",
                                                "description": "Docker image name"
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "Name of the container specified as a DNS_LABEL"
                                              },
                                              "resources": {
                                                "type": "object",
                                                "description": "Compute Resources required by this container. Cannot be updated.",
                                                "required": [
                                                  "limits"
                                                ],
                                                "properties": {
                                                  "limits": {
                                                    "type": "object",
                                                    "description": "The maximum amount of compute resources required",
                                                    "required": [
                                                      "cpu",
                                                      "memory"
                                                    ],
                                                    "properties": {
                                                      "cpu": {
                                                        "type": "string",
                                                        "description": "The amount of CPU required. Minimum 0.05 core. The sum of limits.cpu required by all containers in the pod must not exceed 24 cores."
                                                      },
                                                      "memory": {
                                                        "type": "string",
                                                        "description": "The amount of memory required. Minimum 50 MB. The sum of limits.memory required by all containers in the pod must not exceed 128 GB."
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "required": [
                                              "image",
                                              "name",
                                              "resources"
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "required": [
                            "apiVersion",
                            "Kind",
                            "metadata",
                            "spec"
                          ]
                        },
                        {
                          "title": "ReplicaSet",
                          "type": "object",
                          "x-examples": {
                            "example-1": {}
                          },
                          "description": "ReplicaSet",
                          "properties": {
                            "apiVersion": {
                              "type": "string",
                              "enum": [
                                "apps/v1"
                              ]
                            },
                            "Kind": {
                              "type": "string",
                              "description": "Use Kubernetes \"ReplicaSet\" as workload controller if your application does not require persistent storage. Refer to <a href=\"https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/\">Kubernetes official documentation </a> for more about the controller.",
                              "enum": [
                                "ReplicaSet"
                              ]
                            },
                            "metadata": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of a \"ReplicaSet\" resource. Must be the same as the query param \"appName\"."
                                }
                              }
                            },
                            "spec": {
                              "type": "object",
                              "description": "This document only focuses on some typical configs of  a ReplicaSet object. For more about how to specify a ReplicaSet, please refer to the <a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.17/#replicaset-v1-apps\">official Kubernetes API reference</a>",
                              "required": [
                                "selector",
                                "template"
                              ],
                              "properties": {
                                "selector": {
                                  "type": "object",
                                  "description": "A label query over pods. Must match the pod template's labels.",
                                  "required": [
                                    "matchLabels"
                                  ],
                                  "properties": {
                                    "matchLabels": {
                                      "type": "object",
                                      "description": "A map of key value pairs"
                                    }
                                  }
                                },
                                "template": {
                                  "type": "object",
                                  "description": "Template of the pods that will be created by the ReplicaSet",
                                  "required": [
                                    "metadata",
                                    "spec"
                                  ],
                                  "properties": {
                                    "metadata": {
                                      "type": "object",
                                      "required": [
                                        "labels"
                                      ],
                                      "properties": {
                                        "labels": {
                                          "type": "object",
                                          "description": "Map of string keys and values that can be used to organize and categorize pods. Must match selector of the ReplicaSet"
                                        },
                                        "annotations": {
                                          "type": "object",
                                          "description": "An unstructured key value map stored with a pod",
                                          "properties": {
                                            "quantil.com/enableExternalIP": {
                                              "type": "boolean",
                                              "default": false,
                                              "description": "Pass this annotation and set to true if you would like to enable public IPv4 network interface for the pod. Alternatively, you can specify an ECP \"LoadBalancer4\" object for your ECP application to expose the pod. "
                                            },
                                            "quantil.com/enableIpv6ExternalIP": {
                                              "type": "boolean",
                                              "default": false,
                                              "description": "Pass this annotation and set to true if you would like to enable public IPv6 network interface for the pod. Alternatively, you can specify an ECP custom \"LoadBalancer4\" object for your ECP application to expose the pod. "
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "spec": {
                                      "type": "object",
                                      "description": "Specifications of desired behavior of the pod",
                                      "required": [
                                        "containers"
                                      ],
                                      "properties": {
                                        "containers": {
                                          "type": "array",
                                          "description": "List of containers coupled in the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "image": {
                                                "type": "string",
                                                "description": "Docker image name"
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "Name of the container specified as a DNS_LABEL"
                                              },
                                              "resources": {
                                                "type": "object",
                                                "description": "Compute Resources required by this container. Cannot be updated.",
                                                "required": [
                                                  "limits"
                                                ],
                                                "properties": {
                                                  "limits": {
                                                    "type": "object",
                                                    "description": "The maximum amount of compute resources required",
                                                    "required": [
                                                      "cpu",
                                                      "memory"
                                                    ],
                                                    "properties": {
                                                      "cpu": {
                                                        "type": "string",
                                                        "description": "The amount of CPU required. Minimum 0.05 core. The sum of limits.cpu required by all containers in the pod must not exceed 24 cores."
                                                      },
                                                      "memory": {
                                                        "type": "string",
                                                        "description": "The amount of memory required. Minimum 50 MB. The sum of limits.memory required by all containers in the pod must not exceed 128 GB."
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "required": [
                                              "image",
                                              "name",
                                              "resources"
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "required": [
                            "apiVersion",
                            "Kind",
                            "metadata",
                            "spec"
                          ]
                        },
                        {
                          "title": "StatefulSet",
                          "type": "object",
                          "description": "StatefulSet",
                          "x-examples": {
                            "example-1": {}
                          },
                          "properties": {
                            "apiVersion": {
                              "type": "string",
                              "enum": [
                                "apps/v1"
                              ]
                            },
                            "Kind": {
                              "type": "string",
                              "description": "Use Kubernetes \"StatefulSet\" as workload controller if your application requires persistent storage. Refer to <a href=\"https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/\">Kubernetes official documentation </a> for more about the controller.",
                              "enum": [
                                "StatefulSet"
                              ]
                            },
                            "metadata": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of a \"StatefulSet\" resource. Must be the same as the query param \"appName\"."
                                }
                              }
                            },
                            "spec": {
                              "type": "object",
                              "description": "This document only focuses on some typical configs of  a StatefulSet object. For more about how to specify a StatefulSet, please refer to the <a href=\"https://v1-17.docs.kubernetes.io/docs/reference/generated/kubernetes-api/v1.17/#statefulset-v1-apps\"> official kubernetes API reference</a>.",
                              "required": [
                                "selector",
                                "template"
                              ],
                              "properties": {
                                "selector": {
                                  "type": "object",
                                  "description": "A label query over pods. Must match the pod template's labels.",
                                  "required": [
                                    "matchLabels"
                                  ],
                                  "properties": {
                                    "matchLabels": {
                                      "type": "object",
                                      "description": "A map of key value pairs"
                                    }
                                  }
                                },
                                "template": {
                                  "type": "object",
                                  "description": "Template of the pods that will be created by the StatefulSet",
                                  "required": [
                                    "metadata",
                                    "spec"
                                  ],
                                  "properties": {
                                    "metadata": {
                                      "type": "object",
                                      "required": [
                                        "labels"
                                      ],
                                      "properties": {
                                        "labels": {
                                          "type": "object",
                                          "description": "Map of string keys and values that can be used to organize and categorize pods. Must match selector of the StatefulSet"
                                        },
                                        "annotations": {
                                          "type": "object",
                                          "description": "An unstructured key value map stored with a pod",
                                          "properties": {
                                            "quantil.com/enableExternalIP": {
                                              "type": "boolean",
                                              "default": false,
                                              "description": "Pass this annotation and set to true if you would like to enable public IPv4 network interface for the pod. Alternatively, you can specify an ECP \"LoadBalancer4\" object for your ECP application to expose the pod."
                                            },
                                            "quantil.com/enableIpv6ExternalIP": {
                                              "type": "boolean",
                                              "default": false,
                                              "description": "Pass this annotation and set to true if you would like to enable public IPv6 network interface for the pod. Alternatively, you can specify an ECP \"LoadBalancer4\" object for your ECP application to expose the pod."
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "spec": {
                                      "type": "object",
                                      "description": "Specification of desired behavior of the pod",
                                      "required": [
                                        "containers"
                                      ],
                                      "properties": {
                                        "containers": {
                                          "type": "array",
                                          "description": "List of containers coupled in the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "image": {
                                                "type": "string",
                                                "description": "Docker image name"
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "Name of the container specified as a DNS_LABEL"
                                              },
                                              "resources": {
                                                "type": "object",
                                                "description": "Compute Resources required by this container. Cannot be updated.",
                                                "required": [
                                                  "limits"
                                                ],
                                                "properties": {
                                                  "limits": {
                                                    "type": "object",
                                                    "description": "The maximum amount of compute resources required",
                                                    "required": [
                                                      "cpu",
                                                      "memory"
                                                    ],
                                                    "properties": {
                                                      "cpu": {
                                                        "type": "string",
                                                        "description": "The amount of CPU required. Minimum 0.05 core. The sum of limits.cpu required by all containers in the pod must not exceed 24 cores."
                                                      },
                                                      "memory": {
                                                        "type": "string",
                                                        "description": "The amount of memory required. Minimum 50 MB. The sum of limits.memory required by all containers in the pod must not exceed 128 GB."
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              "volumeMounts": {
                                                "type": "array",
                                                "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "name": {
                                                      "type": "string",
                                                      "description": "This must match the Name of a Volume"
                                                    },
                                                    "mountPath": {
                                                      "type": "string",
                                                      "description": "Path within the container at which the volume should be mounted. Must not contain ':'."
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "required": [
                                              "image",
                                              "name",
                                              "resources"
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                "volumeClaimTemplates": {
                                  "type": "array",
                                  "description": "A list of persistent volume claims that pods are allowed to reference. Every claim in this list must have at least one matching (by name) volumeMount in one container in the pod template.",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "metadata": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "description": "Name of a volume claim"
                                          },
                                          "annotations": {
                                            "type": "object",
                                            "properties": {
                                              "volume.beta.kubernetes.io/storage-class": {
                                                "type": "string",
                                                "enum": [
                                                  "local-ssd"
                                                ],
                                                "description": "Specifiy the storageClass of a volume claim. Currently only \"local-ssd\" is available. \"local-ssd\" means local persistent SSD storage. Data is stored locally and persists across container restarts, but will be lost when pod is rescheduled to another node. "
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "spec": {
                                        "type": "object",
                                        "properties": {
                                          "accessModes": {
                                            "type": "array",
                                            "description": "The desired access modes the volume claim should have. Should be \"ReadWriteOnce\".",
                                            "items": {
                                              "type": "string",
                                              "enum": [
                                                "ReadWriteOnce"
                                              ]
                                            }
                                          },
                                          "resources": {
                                            "type": "object",
                                            "description": "The resources the volume claim should have",
                                            "properties": {
                                              "requests": {
                                                "type": "object",
                                                "description": "The minimum amount of resources required",
                                                "properties": {
                                                  "storage": {
                                                    "type": "string",
                                                    "description": "The storage capacity required. Must be not less than 500MB and not higher than 100GB."
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "required": [
                            "apiVersion",
                            "Kind",
                            "metadata",
                            "spec"
                          ]
                        }
                      ]
                    },
                    {
                      "title": "ECP LoadBalancer4",
                      "type": "object",
                      "description": "LoadBalancer4",
                      "properties": {
                        "apiVersion": {
                          "type": "string",
                          "enum": [
                            "v1"
                          ]
                        },
                        "Kind": {
                          "type": "string",
                          "enum": [
                            "LoadBalancer4"
                          ],
                          "description": "Use \"LoadBalancer4\", an ECP custom resource, to expose your application instances"
                        },
                        "metadata": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Name of a \"LoadBalancer4\" object. Must be the same as the query param \"appName\"."
                            }
                          }
                        },
                        "spec": {
                          "type": "object",
                          "required": [
                            "listeners"
                          ],
                          "properties": {
                            "listeners": {
                              "type": "array",
                              "description": "Array of rules for the LoadBalancer4 to forward incoming traffic to backend application instances",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "Name of a listener. Must be unique across a \"LoadBalancer4\" obejct. Allows lower-case letters, digits and hyphens only. Must not start or end with a hyphen, and must be less than 63 characters."
                                  },
                                  "backendSelector": {
                                    "type": "object",
                                    "description": "Key value pair that is used to match target pods (i.e. application instances) as backend of the LoadBalancer4."
                                  },
                                  "listenerPort": {
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 65535,
                                    "description": "Number of port that the LoadBalancer4 listens on"
                                  },
                                  "backendPort": {
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 65535,
                                    "description": "Number of the backend pods' port that receives traffic forwarded by the LoadBalancer4. Must be the same as \"listenerPort\"."
                                  },
                                  "protocol": {
                                    "type": "string",
                                    "enum": [
                                      "TCP",
                                      "UDP"
                                    ],
                                    "description": "Protocol of incoming traffic that the LoadBalancer4 will handle"
                                  },
                                  "scheduler": {
                                    "type": "string",
                                    "enum": [
                                      "rr",
                                      "lc",
                                      "sh"
                                    ],
                                    "description": "Load balancing algorithm used to make load balancing decision. Can be \"rr\" (Round Robin), \"lc\" (Least Conncetions) or \"sh\" (Source Hash).",
                                    "default": "rr"
                                  },
                                  "healthCheck": {
                                    "type": "boolean",
                                    "default": false,
                                    "description": "Whether to turn on periodic probes to check the healthiness of backend pods. Pod that fails health check will be removed by the LoadBalancer4 and hence will not receive traffic."
                                  },
                                  "healthCheckType": {
                                    "type": "string",
                                    "enum": [
                                      "TCP",
                                      "HTTP"
                                    ],
                                    "description": "When \"protocol\" field is set to \"TCP\", the health check type can be \"TCP\" or \"HTTP\". When the \"protocol\" is set to \"UDP\", health check is not available."
                                  },
                                  "healthCheckDomain": {
                                    "type": "string",
                                    "description": "Hostname to connect to. Acceptable only when the health check type is \"HTTP\". Default to the IP of a backend pod."
                                  },
                                  "healthCheckURI": {
                                    "type": "string",
                                    "description": "Path to access. Acceptable only when the health check type is \"HTTP\"."
                                  },
                                  "healthCheckConnectPort": {
                                    "type": "integer",
                                    "description": "Number of the port to access on the backend pods. Set to same as the \"backendPort\" by default.",
                                    "minimum": 1,
                                    "maximum": 65535
                                  },
                                  "healthCheckInterval": {
                                    "type": "integer",
                                    "default": 1,
                                    "description": "How often (in seconds) to perform the health check",
                                    "minimum": 1,
                                    "maximum": 5
                                  }
                                },
                                "required": [
                                  "name",
                                  "backendSelector",
                                  "listenerPort",
                                  "backendPort"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "required": [
                        "apiVersion",
                        "Kind",
                        "metadata",
                        "spec"
                      ]
                    },
                    {
                      "title": "ECP Target",
                      "oneOf": [
                        {
                          "title": "RegionPreference",
                          "type": "object",
                          "x-examples": {
                            "example-1": {
                              "apiVersion": "v1",
                              "kind": "RegionPreference",
                              "metadata": {
                                "name": "myapp",
                                "namespace": "demo"
                              },
                              "spec": {
                                "regions": [
                                  {
                                    "name": "NA-WEST",
                                    "replicas": 6
                                  },
                                  {
                                    "name": "EU",
                                    "replicas": 4
                                  }
                                ]
                              }
                            }
                          },
                          "description": "Region",
                          "properties": {
                            "apiVersion": {
                              "type": "string",
                              "enum": [
                                "v1"
                              ]
                            },
                            "Kind": {
                              "type": "string",
                              "description": "Use \"RegionPreference\", an ECP custom resource, to specify ECP regions and have your application instances automatically distributed across locations within each ECP region. ",
                              "enum": [
                                "RegionPreference"
                              ]
                            },
                            "metadata": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of a \"RegionPreference\" resource. Must be the same as the query param \"appName\"."
                                }
                              }
                            },
                            "spec": {
                              "type": "object",
                              "required": [
                                "regions"
                              ],
                              "properties": {
                                "regions": {
                                  "type": "array",
                                  "description": "Array of target ECP regions to distribute your application instances",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "type": "string",
                                        "description": "Code of an ECP region, e.g. \"NA-WEST\" which stands for west of North America."
                                      },
                                      "replicas": {
                                        "type": "integer",
                                        "description": "The total number of pods (i.e. application instances) desired across locations within an ECP region",
                                        "minimum": 1
                                      }
                                    },
                                    "required": [
                                      "name",
                                      "replicas"
                                    ]
                                  }
                                }
                              }
                            }
                          },
                          "required": [
                            "apiVersion",
                            "Kind",
                            "metadata",
                            "spec"
                          ]
                        },
                        {
                          "title": "Location",
                          "type": "object",
                          "description": "Location",
                          "x-examples": {
                            "example-1": {
                              "apiVersion": "v1",
                              "kind": "Location",
                              "metadata": {
                                "name": "myapp",
                                "namespace": "demo"
                              },
                              "spec": {
                                "locations": [
                                  {
                                    "name": "sjc",
                                    "replicas": 2
                                  },
                                  {
                                    "name": "ams",
                                    "replicas": 1
                                  }
                                ]
                              }
                            }
                          },
                          "properties": {
                            "apiVersion": {
                              "type": "string",
                              "enum": [
                                "v1"
                              ]
                            },
                            "Kind": {
                              "type": "string",
                              "enum": [
                                "Location"
                              ],
                              "description": "Use \"Location\", an ECP custom resource, to pick ECP locations and precisely place your application instances."
                            },
                            "metadata": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of a \"Location\" resource. Must be the same as the query param \"appName\"."
                                }
                              }
                            },
                            "spec": {
                              "type": "object",
                              "required": [
                                "locations"
                              ],
                              "properties": {
                                "locations": {
                                  "type": "array",
                                  "description": "Array of target ECP locations",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "type": "string",
                                        "description": "Code of an ECP location, e.g. \"sjc1\" which stands for the ECP location at San Jose, US."
                                      },
                                      "replicas": {
                                        "type": "integer",
                                        "description": "Number of pods (i.e. application instances) desired at an ECP location",
                                        "minimum": 1
                                      }
                                    },
                                    "required": [
                                      "name",
                                      "replicas"
                                    ]
                                  }
                                }
                              }
                            }
                          },
                          "required": [
                            "apiVersion",
                            "Kind",
                            "metadata",
                            "spec"
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/ecp/v1/applications/{applicationID}/vips": {
      "parameters": [
        {
          "name": "applicationID",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "ID of an ECP application"
        }
      ],
      "get": {
        "summary": "Query list of VIPs for an application",
        "tags": [
          "Applications"
        ],
        "responses": {
          "200": {
            "description": "The response contains a list of VIPs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "applicationID": {
                      "title": "",
                      "type": "string",
                      "description": "ID of an ECP application"
                    },
                    "appName": {
                      "title": "",
                      "type": "string",
                      "description": "Name of an ECP application. Must contain only lower-case alphanumeric characters and ‘-', must start and end with a lower-case alphanumeric character, and must be no more than 48 characters."
                    },
                    "createdBy": {
                      "title": "",
                      "type": "string",
                      "description": "API account or user that creates an ECP resource"
                    },
                    "creationTime": {
                      "title": "",
                      "format": "date-time",
                      "type": "string",
                      "description": "Datetime when the resource is created"
                    },
                    "lastUpdateTime": {
                      "type": "string",
                      "title": "",
                      "format": "date-time",
                      "description": "Datetime when the resource is last updated"
                    },
                    "VIPs": {
                      "title": "",
                      "type": "array",
                      "description": "Array of VIPs grouped per ECP locations",
                      "items": {
                        "type": "object",
                        "properties": {
                          "VIP": {
                            "type": "string",
                            "description": "Public IPv4 address(es) exposing application instances at a specific ECP location. Multiple addresses are separated by comma."
                          },
                          "VIP-v6": {
                            "type": "string",
                            "description": "Public IPv6 address(es) exposing application instances at a specific ECP location. Multiple addresses are separated by comma."
                          },
                          "isLoadBalanced": {
                            "type": "boolean",
                            "description": "A flag indicating if the VIP and/or VIP-v6 are for an ECP LoadBalancer4"
                          },
                          "PoP": {
                            "type": "string",
                            "description": "Code of an ECP location where the VIP and/or VIP-v6 are exposing application instances"
                          },
                          "podCount": {
                            "type": "integer",
                            "description": "Number of application instances behind the VIP and/or VIP-v6 at an ECP location"
                          }
                        }
                      }
                    },
                    "totalCount": {
                      "type": "integer",
                      "description": "Total number of VIP groups which equals to the number of ECP locations where the application is deployed."
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "applicationID": "2a766f310f5411ea977416f2b85638ba",
                      "appName": "myapp1",
                      "creationTime": "2020-11-25T07:21:15Z",
                      "createdBy": "demo",
                      "lastUpdateTime": "2020-12-26T03:06:32Z",
                      "totalCount": 2,
                      "VIPs": [
                        {
                          "VIP": "163.171.228.23",
                          "VIP-v6": "",
                          "isLoadBalanced": true,
                          "PoP": "iad",
                          "podCount": 2
                        },
                        {
                          "VIP": "163.171.235.53",
                          "VIP-v6": "",
                          "isLoadBalanced": true,
                          "PoP": "waw",
                          "podCount": 1
                        }
                      ]
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Refer to response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "InvalidListOffset": {
                    "value": {
                      "error": "InvalidListOffset",
                      "message": "The value of offset must be a valid non-negative integer."
                    }
                  },
                  "InvalidListLimit": {
                    "value": {
                      "error": "InvalidListLimit",
                      "message": "The value of limit must be a valid integer between 1 and 200, both inclusive."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "ApplicationNotFound",
                      "message": "The application ID given does not exist."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "operationId": "get-application-vips",
        "description": "This interface allows you to query list of VIPs (i.e. virtual IP) that expose your ECP application. The response returns a list of VIPs grouped per ECP locations. Each VIP points to one or multiple application instances. Depending on how the instances of your ECP application are exposed, the concept of VIP as used here could mean either the IP of an ECP LoadBalancer4 which proxies your application instance(s) at an ECP location, or the public IP configured on the network interface of an application instance. The VIP can be of protocol IPv4 and/or IPv6.",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates the first resource to return. The first has an offset of 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of resources to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 200,
              "minimum": 1
            }
          },
          {
            "name": "On-Behalf-Of",
            "in": "header",
            "description": "If you are a reseller, you can use this header to specify the ID of a child customer and make API call on their behalf.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/ecp/v1/applications/{applicationID}/history": {
      "parameters": [
        {
          "name": "applicationID",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "ID of an ECP application"
        }
      ],
      "get": {
        "summary": "Query history of operations against an application",
        "tags": [
          "Applications"
        ],
        "responses": {
          "200": {
            "description": "The response contains history of operations.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "applicationID": {
                      "title": "",
                      "type": "string",
                      "description": "ID of an ECP application"
                    },
                    "appName": {
                      "title": "",
                      "type": "string",
                      "description": "Name of an ECP application. Must contain only lower-case alphanumeric characters and ‘-', must start and end with a lower-case alphanumeric character, and must be no more than 48 characters."
                    },
                    "createdBy": {
                      "title": "",
                      "type": "string",
                      "description": "API account or user that creates an ECP resource"
                    },
                    "creationTime": {
                      "title": "",
                      "format": "date-time",
                      "type": "string",
                      "description": "Datetime when the resource is created"
                    },
                    "lastUpdateTime": {
                      "type": "string",
                      "title": "",
                      "format": "date-time",
                      "description": "Datetime when the resource is last updated"
                    },
                    "history": {
                      "title": "",
                      "type": "array",
                      "description": "Array of history operations against an ECP application",
                      "items": {
                        "type": "object",
                        "properties": {
                          "action": {
                            "type": "string",
                            "description": "Type of operation performed",
                            "enum": [
                              "create",
                              "patch",
                              "replace",
                              "delete"
                            ]
                          },
                          "timestamp": {
                            "type": "string",
                            "description": "Date-time indicating when the operation is performed",
                            "format": "date-time"
                          },
                          "configuration": {
                            "type": "string",
                            "description": "The application specifications submitted along with the operation request"
                          },
                          "version": {
                            "type": "integer",
                            "description": "A number indicating the version of an ECP application. This is auto generated by ECP API server."
                          },
                          "isLatest": {
                            "type": "boolean",
                            "description": "A flag indicating if the above version is currently the newest"
                          },
                          "calledBy": {
                            "description": "API account or user who calls for the operation",
                            "type": "string"
                          },
                          "deployStart": {
                            "type": "string",
                            "description": "Date-time indicating when the deployment as triggered by this operation starts",
                            "format": "date-time"
                          },
                          "deployEnd": {
                            "type": "string",
                            "description": "Date-time indicating when the deployment as triggered by this operation ends",
                            "format": "date-time"
                          },
                          "status": {
                            "type": "string",
                            "description": "Status of the deployment as triggered by this operation",
                            "enum": [
                              "waiting",
                              "deploying",
                              "deployed",
                              "failed",
                              "aborted"
                            ]
                          },
                          "message": {
                            "type": "string",
                            "description": "Message related to the status of deployment"
                          }
                        }
                      }
                    },
                    "totalCount": {
                      "title": "",
                      "type": "integer",
                      "description": "Total number of resources"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "appName": "myapp1",
                      "applicationID": "2a766f310f5411ea977416f2b85638ba",
                      "creationTime": "2020-11-25T07:21:15Z",
                      "createdBy": "admin",
                      "lastUpdateTime": "2020-11-25T07:34:36Z",
                      "history": [
                        {
                          "action": "patch",
                          "timestamp": "2020-11-25T07:34:36Z",
                          "configuration": "apiVersion: v1\nkind: RegionPreference\nmetadata:\n  namespace: demo\nspec:\n  regions:\n    - name: EU\n      replicas: 1\n    - name: NA-EAST\n      replicas: 1\n---\r\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  labels:\n    app: myapp1\n  namespace: demo\nspec:\n  selector:\n    matchLabels:\n      app: myapp1\n  template:\n    metadata:\n      labels:\n        app: myapp1\n    spec:\n      containers:\n        - image: nginx\n          name: myapp1\n          ports:\n            - containerPort: 80\n              protocol: TCP\n          resources:\n            limits:\n              cpu: 200m\n              memory: 256Mi\n            requests:\n              cpu: 200m\n              memory: 256Mi\n          volumeMounts:\n            - mountPath: /tmp\n              name: data\n  volumeClaimTemplates:\n    - metadata:\n        annotations:\n          volume.beta.kubernetes.io/storage-class: local-ssd\n        name: data\n      spec:\n        accessModes:\n          - ReadWriteOnce\n        resources:\n          requests:\n            storage: 1G\n---\r\napiVersion: v1\nkind: LoadBalancer4\nmetadata:\n  namespace: demo\nspec:\n  listeners:\n    - backendPort: 80\n      backendSelector:\n        app: myapp1\n      healthCheck: false\n      listenerPort: 80\n      name: listener-80\n      protocol: tcp\n      scheduler: lc\n",
                          "version": 2,
                          "calledBy": "demo",
                          "isLatest": false,
                          "deployStart": "2020-11-25T07:34:44Z",
                          "deployEnd": "2020-11-25T07:36:04Z",
                          "status": "deployed",
                          "message": ""
                        },
                        {
                          "action": "create",
                          "timestamp": "2020-11-25T07:21:15Z",
                          "configuration": "apiVersion: v1\nkind: RegionPreference\nmetadata:\n  namespace: demo\nspec:\n  regions:\n    - name: EU\n      replicas: 1\n    - name: NA-EAST\n      replicas: 2\n---\r\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  labels:\n    app: myapp1\n  namespace: demo\nspec:\n  selector:\n    matchLabels:\n      app: myapp1\n  template:\n    metadata:\n      labels:\n        app: myapp1\n    spec:\n      containers:\n        - image: nginx\n          name: myapp1\n          ports:\n            - containerPort: 80\n              protocol: TCP\n          resources:\n            limits:\n              cpu: 200m\n              memory: 256Mi\n            requests:\n              cpu: 200m\n              memory: 256Mi\n          volumeMounts:\n            - mountPath: /tmp\n              name: data\n  volumeClaimTemplates:\n    - metadata:\n        annotations:\n          volume.beta.kubernetes.io/storage-class: local-ssd\n        name: data\n      spec:\n        accessModes:\n          - ReadWriteOnce\n        resources:\n          requests:\n            storage: 1G\n---\r\napiVersion: v1\nkind: LoadBalancer4\nmetadata:\n  namespace: demo\nspec:\n  listeners:\n    - backendPort: 80\n      backendSelector:\n        app: myapp1\n      healthCheck: false\n      listenerPort: 80\n      name: listener-80\n      protocol: tcp\n      scheduler: lc\n",
                          "version": 1,
                          "calledBy": "admin",
                          "isLatest": false,
                          "deployStart": "2020-11-25T07:21:24Z",
                          "deployEnd": "2020-11-25T07:32:44Z",
                          "status": "deployed",
                          "message": ""
                        }
                      ],
                      "totalCount": 2
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Refer to response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "InvalidListOffset": {
                    "value": {
                      "error": "InvalidListOffset",
                      "message": "The value of offset must be a valid non-negative integer."
                    }
                  },
                  "InvalidListLimit": {
                    "value": {
                      "error": "InvalidListLimit",
                      "message": "The value of limit must be a valid integer between 1 and 200, both inclusive."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "ApplicationNotFound",
                      "message": "The application ID given does not exist."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "operationId": "get-application-history",
        "description": "This interface allows you to query history of operations against your ECP application.",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates the first resource to return. The first has an offset of 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of resources to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 200,
              "minimum": 1
            }
          },
          {
            "name": "On-Behalf-Of",
            "in": "header",
            "description": "If you are a reseller, you can use this header to specify the ID of a child customer and make API call on their behalf.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/ecp/v1/applications/{applicationID}/instances": {
      "parameters": [
        {
          "name": "applicationID",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "ID of an ECP application"
        }
      ],
      "get": {
        "summary": "Query list of application instances",
        "tags": [
          "Applications"
        ],
        "responses": {
          "200": {
            "description": "The response contains a list of application instances.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "instances": {
                      "type": "array",
                      "description": "Array of application instances",
                      "items": {
                        "type": "object",
                        "properties": {
                          "ID": {
                            "type": "string",
                            "description": "ID of a pod"
                          },
                          "name": {
                            "type": "string",
                            "description": "Name of a pod"
                          },
                          "namespace": {
                            "type": "string",
                            "description": "Namespace that owns a pod"
                          },
                          "phase": {
                            "type": "string",
                            "description": "Kubernetes defined term indicating where a pod is in its lifecycle. For more information, refer to <a href=\"https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#PodStatus\">official documentation<a/>",
                            "enum": [
                              "Pending",
                              "Running",
                              "Failed"
                            ]
                          },
                          "pop": {
                            "type": "string",
                            "description": "Short form of an ECP location where a pod is located"
                          },
                          "ready": {
                            "type": "string",
                            "description": "Readiness of containers in a pod, e.g. “2/2” means 2 containers in a pod are both ready."
                          },
                          "restarts": {
                            "type": "integer",
                            "description": "Number of times containers in a pod have restarted"
                          },
                          "age": {
                            "type": "string",
                            "description": "Elapse of time since creation of a pod"
                          }
                        }
                      }
                    },
                    "totalCount": {
                      "title": "",
                      "type": "integer",
                      "description": "Total number of resources"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "instances": [
                        {
                          "ID": "43800104-0f98-11ea-8c9f-3417ebe72177",
                          "age": "44d",
                          "name": "myapp1-0",
                          "namespace": "demo",
                          "phase": "Running",
                          "pop": "waw",
                          "ready": "1/1",
                          "restarts": 0
                        },
                        {
                          "ID": "6d28dd2d-8u6a-11ea-baa4-f04da27334b5",
                          "age": "43d",
                          "name": "myapp1-0",
                          "namespace": "demo",
                          "phase": "Running",
                          "pop": "iad",
                          "ready": "1/1",
                          "restarts": 0
                        }
                      ],
                      "totalCount": 2
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Refer to response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "InvalidListOffset": {
                    "value": {
                      "error": "InvalidListOffset",
                      "message": "The value of offset must be a valid non-negative integer."
                    }
                  },
                  "InvalidListLimit": {
                    "value": {
                      "error": "InvalidListLimit",
                      "message": "The value of limit must be a valid integer between 0 and 200, both inclusive. Set limit to 0 to retrieve a complete list."
                    }
                  },
                  "InvalidPhase": {
                    "value": {
                      "error": "InvalidPhase",
                      "message": "The phase given is invalid. The value should be one of \"Pending\", \"Running\", and \"Failed\"."
                    }
                  },
                  "PoPNotExist": {
                    "value": {
                      "error": "PoPNotExist",
                      "message": "The PoP given is invalid or does not exist."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "ApplicationNotFound",
                      "message": "The application ID given does not exist."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "operationId": "get-application-instances",
        "description": "This interface allows you to query list of instances (i.e. Kubernetes pods) for your ECP application.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "enum": [
                "Pending",
                "Running",
                "Failed"
              ]
            },
            "in": "query",
            "name": "phase",
            "description": "Kubernetes defined term indicating where a pod is in its lifecycle. For more information, please refer to <a href=\"https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#PodStatus\">official documentation</a>"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "pop",
            "description": "Short form of an ECP location where a pod is running"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates the first resource to return. The first has an offset of 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of resources to return. To retrieve a complete list of resources, please pass this parameter with value “0”.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 200,
              "minimum": 0
            }
          },
          {
            "name": "On-Behalf-Of",
            "in": "header",
            "description": "If you are a reseller, you can use this header to specify the ID of a child customer and make API call on their behalf.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/ecp/v1/applications/{applicationID}/instances/{instanceID}": {
      "parameters": [
        {
          "name": "applicationID",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "ID of an ECP application"
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "instanceID",
          "in": "path",
          "required": true,
          "description": "ID of an application instance"
        }
      ],
      "get": {
        "summary": "Query the details of an application instance",
        "tags": [
          "Applications"
        ],
        "responses": {
          "200": {
            "description": "The response contains details of an application instance.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ID": {
                      "type": "string",
                      "description": "ID of a pod"
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of a pod"
                    },
                    "namespace": {
                      "type": "string",
                      "description": "Namespace that owns a pod"
                    },
                    "phase": {
                      "type": "string",
                      "description": "Kubernetes defined term indicating where a pod is in its lifecycle. For more information, refer to <a href=\"https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#PodStatus\">official documentation<a/>",
                      "enum": [
                        "Pending",
                        "Running",
                        "Failed"
                      ]
                    },
                    "pop": {
                      "type": "string",
                      "description": "Short form of an ECP location where a pod is located"
                    },
                    "restarts": {
                      "type": "integer",
                      "description": "Number of times containers in a pod have restarted"
                    },
                    "age": {
                      "type": "string",
                      "description": "Elapse of time since creation of a pod"
                    },
                    "ready": {
                      "type": "string",
                      "description": "Readiness of containers in a pod, e.g. “2/2” means 2 containers in a pod are both ready."
                    },
                    "creationTime": {
                      "type": "string",
                      "description": "Date-time when a pod was created",
                      "format": "date-time"
                    },
                    "publicIPv4": {
                      "title": "",
                      "type": "string",
                      "description": "Public IPv4 address assigned to a pod"
                    },
                    "publicIPv6": {
                      "title": "",
                      "type": "string",
                      "description": "Public IPv6 address assigned to a pod"
                    },
                    "podIP": {
                      "title": "",
                      "type": "string",
                      "description": "Private IPv4 address assigned to a pod"
                    },
                    "conditions": {
                      "title": "",
                      "type": "array",
                      "description": "Array of conditions describing the current service state of a pod. For more information, refer to <a href=\"https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#PodStatus\">official documentation</a>.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "lastProbeTime": {
                            "type": "string",
                            "description": "Timestamp when the Pod condition was last probed",
                            "format": "date-time"
                          },
                          "lastTransitionTime": {
                            "type": "string",
                            "description": "Timestamp when the Pod last transitioned from one status to another",
                            "format": "date-time"
                          },
                          "message": {
                            "type": "string",
                            "description": "Message indicating details about the transition"
                          },
                          "reason": {
                            "type": "string",
                            "description": "A unique, one-word, CamelCase reason for the condition’s last transition"
                          },
                          "status": {
                            "type": "string",
                            "description": "Status of the condition",
                            "enum": [
                              "True",
                              "False",
                              "Unknown"
                            ]
                          },
                          "type": {
                            "type": "string",
                            "description": "Type of the condition",
                            "enum": [
                              "PodScheduled",
                              "Ready",
                              "Initialized",
                              "Unschedulable",
                              "ContainersReady"
                            ]
                          }
                        }
                      }
                    },
                    "containers": {
                      "title": "",
                      "type": "array",
                      "description": "Array of containers in a pod",
                      "items": {
                        "type": "object",
                        "properties": {
                          "containerID": {
                            "type": "string",
                            "description": "Container's ID in the format 'docker://<container_id>'"
                          },
                          "name": {
                            "type": "string",
                            "description": "Container name"
                          },
                          "image": {
                            "type": "string",
                            "description": "The image the container is running"
                          },
                          "imageID": {
                            "type": "string",
                            "description": "ImageID of the container's image"
                          },
                          "lastState": {
                            "type": "object",
                            "description": "Details about the container's last termination condition"
                          },
                          "ready": {
                            "description": "A flag indicating whether the container has passed its readiness probe",
                            "type": "boolean"
                          },
                          "restartCount": {
                            "description": "The number of times the container has been restarted",
                            "type": "integer"
                          },
                          "state": {
                            "type": "object",
                            "description": "Details about the container's current condition"
                          }
                        }
                      }
                    },
                    "events": {
                      "title": "",
                      "type": "array",
                      "description": "Array of Kubernetes events related to a pod. Note that an event will be removed in 3 hours after last occurence. For more information, refer to the <a href=\"https://kubernetes.io/docs/reference/kubernetes-api/cluster-resources/event-v1/\">official documenation</a>.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "firstTimestamp": {
                            "type": "string",
                            "description": "The time at which the event was first recorded",
                            "format": "date-time"
                          },
                          "lastTimestamp": {
                            "type": "string",
                            "description": "The time at which the most recent occurrence of this event was recorded",
                            "format": "date-time"
                          },
                          "count": {
                            "type": "integer",
                            "description": "The number of times this event has occurred"
                          },
                          "involvedObject": {
                            "type": "object",
                            "description": "The object that this event is about"
                          },
                          "reason": {
                            "type": "string",
                            "description": "A short string that gives the reason for the transition into the object's current status"
                          },
                          "message": {
                            "type": "string",
                            "description": "A human-readable description of the status of this operation"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "ID": "a7939895-3290-11ea-a2f0-f04da272e870",
                      "age": "16s",
                      "conditions": [
                        {
                          "lastTransitionTime": "2020-11-09T03:32:25Z",
                          "status": "True",
                          "type": "Initialized"
                        },
                        {
                          "lastTransitionTime": "2020-11-09T03:32:29Z",
                          "status": "True",
                          "type": "Ready"
                        },
                        {
                          "lastTransitionTime": "2020-11-09T03:32:25Z",
                          "status": "True",
                          "type": "PodScheduled"
                        }
                      ],
                      "containers": [
                        {
                          "containerID": "docker://2652cdfe329b6ff0a9cf8f13b746927b18ce258a1df8bfad2245ef6976137f9d",
                          "image": "registry-qcc.quantil.com/demo/webserver:1.0.6",
                          "imageID": "docker-pullable://registry-qcc.quantil.com/demo/webserver@sha256:0b32618ffba401ad89525fad3d3ec658dd6c3070bb818ec730628c949b0a8965",
                          "lastState": {},
                          "name": "webserver",
                          "ready": true,
                          "restartCount": 0,
                          "state": {
                            "running": {
                              "startedAt": "2020-11-09T03:32:28Z"
                            }
                          }
                        }
                      ],
                      "creationTime": "2020-11-09T03:32:25Z",
                      "events": [
                        {
                          "count": 1,
                          "firstTimestamp": "2020-11-09T03:23:45Z",
                          "involvedObject": {
                            "apiVersion": "v1",
                            "kind": "Pod",
                            "name": "app-robot20200109032328-0",
                            "namespace": "demo",
                            "resourceVersion": "73090529",
                            "uid": "719926aa-328f-11ea-a2f0-f04da272e870"
                          },
                          "lastTimestamp": "2020-11-09T03:23:45Z",
                          "message": "Successfully assigned app-robot20200109032328-0 to mil4",
                          "reason": "Scheduled"
                        },
                        {
                          "count": 1,
                          "firstTimestamp": "2020-11-09T03:23:45Z",
                          "involvedObject": {
                            "apiVersion": "v1",
                            "kind": "Pod",
                            "name": "app-robot20200109032328-0",
                            "namespace": "demo",
                            "resourceVersion": "73090535",
                            "uid": "719926aa-328f-11ea-a2f0-f04da272e870"
                          },
                          "lastTimestamp": "2020-11-09T03:23:45Z",
                          "message": "MountVolume.SetUp succeeded for volume \"default-token-zf44t\" ",
                          "reason": "SuccessfulMountVolume"
                        },
                        {
                          "count": 1,
                          "firstTimestamp": "2020-11-09T03:23:49Z",
                          "involvedObject": {
                            "apiVersion": "v1",
                            "fieldPath": "spec.containers{webserver}",
                            "kind": "Pod",
                            "name": "app-robot20200109032328-0",
                            "namespace": "demo",
                            "resourceVersion": "73090535",
                            "uid": "719926aa-328f-11ea-a2f0-f04da272e870"
                          },
                          "lastTimestamp": "2020-11-09T03:23:49Z",
                          "message": "Container image \"registry-qcc.quantil.com/demo/centos7-base-pod:1.0.6\" already present on machine",
                          "reason": "Pulled"
                        },
                        {
                          "count": 1,
                          "firstTimestamp": "2020-11-09T03:23:49Z",
                          "involvedObject": {
                            "apiVersion": "v1",
                            "fieldPath": "spec.containers{webserver}",
                            "kind": "Pod",
                            "name": "app-robot20200109032328-0",
                            "namespace": "demo",
                            "resourceVersion": "73090535",
                            "uid": "719926aa-328f-11ea-a2f0-f04da272e870"
                          },
                          "lastTimestamp": "2020-11-09T03:23:49Z",
                          "message": "Created container",
                          "reason": "Created"
                        },
                        {
                          "count": 1,
                          "firstTimestamp": "2020-11-09T03:23:50Z",
                          "involvedObject": {
                            "apiVersion": "v1",
                            "fieldPath": "spec.containers{webserver}",
                            "kind": "Pod",
                            "name": "app-robot20200109032328-0",
                            "namespace": "demo",
                            "resourceVersion": "73090535",
                            "uid": "719926aa-328f-11ea-a2f0-f04da272e870"
                          },
                          "lastTimestamp": "2020-11-09T03:23:50Z",
                          "message": "Started container",
                          "reason": "Started"
                        }
                      ],
                      "name": "app-robot20200109032328-0",
                      "namespace": "demo",
                      "phase": "Running",
                      "podIP": "10.1.0.143",
                      "pop": "mxp",
                      "publicIPv4": "163.170.245.37",
                      "ready": "1/1",
                      "restarts": 0
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "ApplicationNotFound": {
                    "value": {
                      "error": "ApplicationNotFound",
                      "message": "The application ID given does not exist."
                    }
                  },
                  "InstanceNotFound": {
                    "value": {
                      "error": "InstanceNotFound",
                      "message": "The instance specified does not exist, or is not an instance of the given application."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "operationId": "get-instance-by-ID",
        "description": "This interface allows you to query the details of a specific application instance (i.e. Kubernetes pod).",
        "parameters": [
          {
            "name": "On-Behalf-Of",
            "in": "header",
            "description": "If you are a reseller, you can use this header to specify the ID of a child customer and make API call on their behalf.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/ecp/v1/registry/projects": {
      "get": {
        "summary": "Query list of registry projects",
        "tags": [
          "Registry Projects"
        ],
        "responses": {
          "200": {
            "description": "The response contains a list of registry projects.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "projects": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "projectID": {
                            "title": "",
                            "type": "integer",
                            "description": "ID of a registry project"
                          },
                          "name": {
                            "title": "",
                            "type": "string",
                            "description": "Name of a registry project. Must be unique globally. Allows lower case alphanumeric characters, ‘-’, ‘_’ and ‘.’ only, must start and end with an alphanumeric character, and must be not more than 128 characters."
                          },
                          "createdBy": {
                            "title": "",
                            "type": "string",
                            "description": "Name of apiAccount or contact who created the registry project"
                          },
                          "creationTime": {
                            "title": "",
                            "format": "date-time",
                            "type": "string",
                            "description": "Datetime when the resource is created"
                          },
                          "lastUpdateTime": {
                            "type": "string",
                            "title": "",
                            "format": "date-time",
                            "description": "Datetime when the resource is last updated"
                          },
                          "accessLevel": {
                            "title": "",
                            "type": "string",
                            "description": "How a registry project is accessible to registry users"
                          }
                        }
                      }
                    },
                    "totalCount": {
                      "title": "",
                      "type": "integer",
                      "description": "Total number of resources"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "projects": [
                        {
                          "projectID": 123456,
                          "name": "demoproject",
                          "createdBy": "demouser",
                          "creationTime": "2020-10-02T15:00:00Z",
                          "lastUpdateTime": "2020-11-02T15:00:00Z",
                          "accessLevel": "private"
                        },
                        {
                          "projectID": 456789,
                          "name": "demoproject1",
                          "createdBy": "demouser",
                          "creationTime": "2020-11-02T15:00:00Z",
                          "lastUpdateTime": "2020-12-02T15:00:00Z",
                          "accessLevel": "private"
                        }
                      ],
                      "totalCount": 2
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Refer to the response body for details.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "InvalidListOffset": {
                    "value": {
                      "error": "InvalidListOffset",
                      "message": "The value of offset must be a valid non-negative integer."
                    }
                  },
                  "InvalidListLimit": {
                    "value": {
                      "error": "InvalidListLimit",
                      "message": "The value of limit must be a valid integer between 1 and 200, both inclusive."
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-registry-projects",
        "description": "Get a list of registry projects. You can specify a search parameter, offset and limit to filter your results.",
        "parameters": [
          {
            "name": "On-Behalf-Of",
            "in": "header",
            "description": "If you are a reseller, you can use this header to specify the ID of a child customer and make API call on their behalf.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchString",
            "in": "query",
            "description": "Keyword to search for particular resources. The value is matched against the \"name\" field of each resource.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "createdBy",
            "description": "Filter projects by the name of apiAccount or contact who creates projects."
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates the first resource to return. The first has an offset of 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of resources to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 200,
              "minimum": 1
            }
          }
        ]
      },
      "post": {
        "summary": "Create a registry project",
        "operationId": "post-registry-projects",
        "responses": {
          "201": {
            "description": "This response indicates the registry project is successfully created",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "in": "header",
                "name": "Location",
                "description": "Location of the newly created resource.",
                "required": false
              },
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Refer to response body for details",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "RequiredFieldMissing": {
                    "value": {
                      "error": "RequiredFieldMissing",
                      "message": "The field {field} is required."
                    }
                  },
                  "InvalidProjectName": {
                    "value": {
                      "error": "InvalidProjectName",
                      "message": "Invalid project name. A valid project name must consist of lower case alphanumeric characters, ‘-’, ‘_’ and ‘.’ only, must start and end with an alphanumeric character, and must be not more than 128 characters."
                    }
                  },
                  "InvalidVulnerabilitySeverity": {
                    "value": {
                      "error": "InvalidVulnerabilitySeverity",
                      "message": "The vulnerability severity {severity} specified is invalid. Must be one of “negligible”, “low”, “medium”, and “high”."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "This error is returned if the API call is not permitted. Refer to response body for details",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "NotAuthorized",
                      "message": "Only the admin API account is allowed to perform this operation."
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "This error is returned if you try to create a registry project that already exists",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "ProjectNameExists",
                      "message": "The project name is already taken."
                    }
                  }
                }
              }
            }
          }
        },
        "description": "This interface enables you to create a registry project. Note that only your \"admin\" apiAccount is allowed to make this call. Also note that all projects created are privately accessible only (i.e. authentication is always required when pushing/pulling images). Creating projects of public access level is not allowed.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "title": "",
                    "type": "string",
                    "description": "Name of a registry project. Must be unique globally. Allows lower case alphanumeric characters, ‘-’, ‘_’ and ‘.’ only, must start and end with an alphanumeric character, and must be not more than 128 characters."
                  },
                  "preventVulnerable": {
                    "title": "",
                    "type": "boolean",
                    "description": "Whether to prevent vulnerable images from running. Default to false."
                  },
                  "severity": {
                    "type": "string",
                    "title": "",
                    "description": "If \"preventVulnerable\" is enabled and the vulnerability of an image is equal to or higher than severity defined here, the image can't be pulled.",
                    "default": "low",
                    "enum": [
                      "negligible",
                      "low",
                      "medium",
                      "high"
                    ]
                  },
                  "autoScan": {
                    "title": "",
                    "type": "boolean",
                    "description": "Whether to scan images automatically when images are pushed to registry. Default to false."
                  }
                },
                "required": [
                  "name"
                ]
              },
              "examples": {
                "example-1": {
                  "value": {
                    "name": "demoproject",
                    "preventVulnerable": true,
                    "severity": "medium",
                    "autoScan": true
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Registry Projects"
        ]
      }
    },
    "/ecp/v1/registry/projects/{projectID}": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "projectID",
          "in": "path",
          "required": true,
          "description": "ID of a registry project"
        }
      ],
      "get": {
        "summary": "Query a registry project",
        "tags": [
          "Registry Projects"
        ],
        "responses": {
          "200": {
            "description": "The response contains details of the registry project.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "projectID": {
                      "title": "",
                      "type": "integer",
                      "description": "ID of a registry project"
                    },
                    "name": {
                      "title": "",
                      "type": "string",
                      "description": "Name of a registry project. Must be unique globally. Allows lower case alphanumeric characters, ‘-’, ‘_’ and ‘.’ only, must start and end with an alphanumeric character, and must be not more than 128 characters."
                    },
                    "createdBy": {
                      "title": "",
                      "type": "string",
                      "description": "Name of apiAccount or contact who created the registry project"
                    },
                    "creationTime": {
                      "type": "string",
                      "description": "Date-time when a pod was created",
                      "format": "date-time"
                    },
                    "lastUpdateTime": {
                      "type": "string",
                      "title": "",
                      "format": "date-time",
                      "description": "Datetime when the resource is last updated"
                    },
                    "accessLevel": {
                      "title": "",
                      "type": "string",
                      "description": "How a registry project is accessible to registry users"
                    },
                    "repoCount": {
                      "title": "",
                      "type": "integer",
                      "description": "Number of repositories under a registry project"
                    },
                    "configs": {
                      "type": "object",
                      "properties": {
                        "preventVulnerable": {
                          "title": "",
                          "type": "boolean",
                          "description": "Whether to prevent vulnerable images from running. Default to false."
                        },
                        "severity": {
                          "type": "string",
                          "title": "",
                          "description": "If \"preventVulnerable\" is enabled and the vulnerability of an image is equal to or higher than severity defined here, the image can't be pulled.",
                          "default": "low",
                          "enum": [
                            "negligible",
                            "low",
                            "medium",
                            "high"
                          ]
                        },
                        "autoScan": {
                          "title": "",
                          "type": "boolean",
                          "description": "Whether to scan images automatically when images are pushed to registry. Default to false."
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "projectID": 123456,
                      "name": "demoproject",
                      "createdBy": "demouser",
                      "creationTime": "2020-10-02T15:00:00Z",
                      "lastUpdateTime": "2020-10-05T15:00:00Z",
                      "accessLevel": "private",
                      "repoCount": 3,
                      "configs": {
                        "preventVulnerable": true,
                        "severity": "medium",
                        "autoScan": true
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "ProjectNotFound",
                      "message": "The project ID given does not exist."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "schema": {
                  "type": "string"
                },
                "description": "A string automatically generated by the api server to identify each request."
              }
            }
          }
        },
        "operationId": "get-registry-project-by-ID",
        "description": "Get the details of a registry project.",
        "parameters": [
          {
            "name": "On-Behalf-Of",
            "in": "header",
            "description": "If you are a reseller, you can use this header to specify the ID of a child customer and make API call on their behalf.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "patch": {
        "summary": "Update a registry project",
        "operationId": "patch-registry-project-by-ID",
        "responses": {
          "200": {
            "description": "This response indicates the project is successfully updated.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "projectID": {
                      "title": "",
                      "type": "integer",
                      "description": "ID of a registry project"
                    },
                    "name": {
                      "title": "",
                      "type": "string",
                      "description": "Name of a registry project. Must be unique globally. Allows lower case alphanumeric characters, ‘-’, ‘_’ and ‘.’ only, must start and end with an alphanumeric character, and must be not more than 128 characters."
                    },
                    "createdBy": {
                      "title": "",
                      "type": "string",
                      "description": "Name of apiAccount or contact who created the registry project"
                    },
                    "creationTime": {
                      "type": "string",
                      "description": "Date-time when a pod was created",
                      "format": "date-time"
                    },
                    "lastUpdateTime": {
                      "type": "string",
                      "title": "",
                      "format": "date-time",
                      "description": "Datetime when the resource is last updated"
                    },
                    "accessLevel": {
                      "title": "",
                      "type": "string",
                      "description": "How a registry project is accessible to registry users"
                    },
                    "repoCount": {
                      "title": "",
                      "type": "integer",
                      "description": "Number of repositories under a registry project"
                    },
                    "configs": {
                      "type": "object",
                      "description": "Security settings of a registry project",
                      "properties": {
                        "preventVulnerable": {
                          "title": "",
                          "type": "boolean",
                          "description": "Whether to prevent vulnerable images from running. Default to false."
                        },
                        "severity": {
                          "type": "string",
                          "title": "",
                          "description": "If \"preventVulnerable\" is enabled and the vulnerability of an image is equal to or higher than severity defined here, the image can't be pulled.",
                          "default": "low",
                          "enum": [
                            "negligible",
                            "low",
                            "medium",
                            "high"
                          ]
                        },
                        "autoScan": {
                          "title": "",
                          "type": "boolean",
                          "description": "Whether to scan images automatically when images are pushed to registry. Default to false."
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "projectID": 123456,
                      "name": "demoproject",
                      "createdBy": "demouser",
                      "creationTime": "2020-10-02T15:00:00Z",
                      "lastUpdateTime": "2020-10-05T15:00:00Z",
                      "accessLevel": "private",
                      "repoCount": 3,
                      "configs": {
                        "preventVulnerable": true,
                        "severity": "medium",
                        "autoScan": true
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Refer to response body for details.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "InvalidVulnerabilitySeverity": {
                    "value": {
                      "error": "InvalidVulnerabilitySeverity",
                      "message": "The vulnerability severity {severity} specified is invalid. Must be one of “negligible”, “low”, “medium”, and “high”."
                    }
                  },
                  "UpdateProjectNameNotAllowed": {
                    "value": {
                      "error": "UpdateProjectNameNotAllowed",
                      "message": "The project name cannot be updated."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "This error is returned if the API call is not permitted. Refer to response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "NotAuthorized",
                      "message": "Only the admin API account is allowed to perform this operation."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "description": "A string automatically generated by the api server to identify each request.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "ProjectNotFound",
                      "message": "The project ID given does not exist."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "schema": {
                  "type": "string"
                },
                "description": "A string automatically generated by the api server to identify each request."
              }
            }
          }
        },
        "description": "Update an existing registry project. Note that only your \"admin\" apiAccount is allowed to make this call.",
        "tags": [
          "Registry Projects"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "preventVulnerable": {
                    "title": "",
                    "type": "boolean",
                    "description": "Whether to prevent vulnerable images from running. Default to false."
                  },
                  "severity": {
                    "type": "string",
                    "title": "",
                    "description": "If \"preventVulnerable\" is enabled and the vulnerability of an image is equal to or higher than severity defined here, the image can't be pulled.",
                    "default": "low",
                    "enum": [
                      "negligible",
                      "low",
                      "medium",
                      "high"
                    ]
                  },
                  "autoScan": {
                    "title": "",
                    "type": "boolean",
                    "description": "Whether to scan images automatically when images are pushed to registry. Default to false."
                  }
                }
              },
              "examples": {
                "example-1": {
                  "value": {
                    "preventVulnerable": true,
                    "severity": "high"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a registry project",
        "operationId": "delete-registry-project-by-ID",
        "responses": {
          "204": {
            "description": "This response is returned if the project is successfully deleted.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "This error is returned if the API call is not permitted. Refer to response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "NotAuthorized",
                      "message": "Only the admin API account is allowed to perform this operation."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "description": "A string automatically generated by the api server to identify each request.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "ProjectNotFound",
                      "message": "The project ID given does not exist."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "schema": {
                  "type": "string"
                },
                "description": "A string automatically generated by the api server to identify each request."
              }
            }
          }
        },
        "description": "Delete an existing registry project. Note that only your \"admin\" apiAccount is allowed to make this call. Also note that a registry project which still has repositories cannot be deleted.",
        "tags": [
          "Registry Projects"
        ]
      }
    },
    "/ecp/v1/registry/projects/{projectID}/logs": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "projectID",
          "in": "path",
          "required": true,
          "description": "ID of a registry project"
        }
      ],
      "get": {
        "summary": "Retrieve access logs",
        "tags": [
          "Registry Projects"
        ],
        "responses": {
          "200": {
            "description": "The response contains a list of access logs.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "logs": {
                      "type": "array",
                      "description": "Array of access logs",
                      "items": {
                        "type": "object",
                        "properties": {
                          "logID": {
                            "type": "string",
                            "description": "ID of a log entry"
                          },
                          "username": {
                            "type": "string",
                            "description": "Name of user who performs the operation. \n\nNote that an operation against the registry might be executed via API, customer portal, or docker CLI. If the username returned here is “admin”, it means the operation is performed by either an admin API account or a portal contact (“admin” doesn’t represent any registry user). Otherwise, it means the operation is performed by a registry user via docker CLI."
                          },
                          "repo": {
                            "type": "string",
                            "description": "Name of repository affected by the operation"
                          },
                          "tag": {
                            "type": "string",
                            "description": "Tag affected by the operation"
                          },
                          "operation": {
                            "type": "string",
                            "description": "Type of operation",
                            "enum": [
                              "push",
                              "pull",
                              "create",
                              "delete"
                            ]
                          },
                          "timestamp": {
                            "type": "string",
                            "description": "Time when the operation is triggered, in RFC 3339 format.",
                            "format": "date-time"
                          }
                        }
                      }
                    },
                    "totalCount": {
                      "type": "integer",
                      "description": "Total number of log entries"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "logs": [
                        {
                          "logID": "2",
                          "username": "repouser1",
                          "repo": "testproj1/nginx",
                          "tag": "v1",
                          "operation": "push",
                          "timestamp": "2020-10-14T07:52:56Z"
                        },
                        {
                          "logID": "1",
                          "username": "admin",
                          "repo": "testproj1/",
                          "tag": "N/A",
                          "operation": "create",
                          "timestamp": "2020-10-14T07:38:31Z"
                        }
                      ],
                      "totalCount": 2
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Refer to response body for details.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "InvalidListOffset": {
                    "value": {
                      "error": "InvalidListOffset",
                      "message": "The value of offset must be a valid non-negative integral multiple of the limit parameter."
                    }
                  },
                  "InvalidListLimit": {
                    "value": {
                      "error": "InvalidListLimit",
                      "message": "The value of limit must be a valid integer between 1 and 100, both inclusive."
                    }
                  },
                  "InvalidDateFormat": {
                    "value": {
                      "error": "InvalidDateFormat",
                      "message": "Invalid parameter {startTime / endTime}. {startTime/endTime} is not a valid RFC3339 timestamp. The timestamp should be in yyyy-MM-dd T HH:mm:ss Z format."
                    }
                  },
                  "InvalidRange": {
                    "value": {
                      "error": "InvalidRange",
                      "message": "The max time span must be no more than 366 days."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "ProjectNotFound",
                      "message": "The project ID given does not exist."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "schema": {
                  "type": "string"
                },
                "description": "A string automatically generated by the api server to identify each request."
              }
            }
          }
        },
        "operationId": "get-registry-project-logs",
        "description": "Retrieve access logs for a registry project.",
        "parameters": [
          {
            "name": "On-Behalf-Of",
            "in": "header",
            "description": "If you are a reseller, you can use this header to specify the ID of a child customer and make API call on their behalf.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "username",
            "description": "Username of a registry user. Use this parameter to filter access logs related to a specific registry user."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "repository",
            "description": "Name of a repository. Use this parameter to filter access logs related to a specific repository."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "tag",
            "description": "Name of an image tag under a repository. Use this parameter to filter access logs related to a specific tag."
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "push",
                "pull",
                "delete",
                "create"
              ]
            },
            "in": "query",
            "name": "operation",
            "description": "Type of operation."
          },
          {
            "in": "query",
            "name": "startTime",
            "description": "RFC 3339 datetime indicating the start of a time period. Example: startTime=2020-10-20T00:00:00Z.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "endTime",
            "description": "RFC 3339 datetime indicating the end of a time period. Example: endTime=2020-10-30T00:00:00Z.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            },
            "description": "Indicates the first resource to return. The first has an offset of 0. The value must be a valid non-negative integral multiple of the limit parameter."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 0,
              "maximum": 100
            },
            "description": "Indicates the maximum nuber of resources to return."
          }
        ]
      }
    },
    "/ecp/v1/registry/projects/{projectID}/repositories": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "projectID",
          "in": "path",
          "required": true,
          "description": "ID of a registry project"
        }
      ],
      "get": {
        "summary": "Query list of repositories under a registry project",
        "tags": [
          "Registry Projects"
        ],
        "responses": {
          "200": {
            "description": "The response contains a list of image repositories.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "repositories": {
                      "type": "array",
                      "description": "Array of image repositories",
                      "items": {
                        "type": "object",
                        "properties": {
                          "repositoryID": {
                            "title": "",
                            "type": "integer",
                            "description": "ID of an image repository"
                          },
                          "name": {
                            "title": "",
                            "type": "string",
                            "description": "Name of an image repository"
                          },
                          "projectID": {
                            "type": "integer",
                            "description": "ID of the registry project that the image repository is affiliated to"
                          },
                          "description": {
                            "title": "",
                            "type": "string",
                            "description": "Arbitrary text describing an image repository"
                          },
                          "pullCount": {
                            "title": "",
                            "type": "integer",
                            "description": "The number of image pulls from an image repository"
                          },
                          "tagsCount": {
                            "title": "",
                            "type": "integer",
                            "description": "The number of tags in an image repository"
                          },
                          "creationTime": {
                            "title": "",
                            "format": "date-time",
                            "type": "string",
                            "description": "Datetime when the resource is created"
                          },
                          "lastUpdateTime": {
                            "type": "string",
                            "title": "",
                            "format": "date-time",
                            "description": "Datetime when the resource is last updated"
                          }
                        }
                      }
                    },
                    "totalCount": {
                      "title": "",
                      "type": "integer",
                      "description": "Total number of resources"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "repositories": [
                        {
                          "repositoryID": 29,
                          "name": "testproj1/demoapp",
                          "projectID": 3,
                          "description": "this is a demo",
                          "pullCount": 0,
                          "tagsCount": 1,
                          "creationTime": "2020-12-16T03:18:05Z",
                          "lastUpdateTime": "2020-12-16T03:18:05Z"
                        },
                        {
                          "repositoryID": 1,
                          "name": "testproj1/nginx",
                          "projectID": 3,
                          "description": "this is a demo",
                          "pullCount": 1,
                          "tagsCount": 2,
                          "creationTime": "2020-10-14T07:52:56Z",
                          "lastUpdateTime": "2020-12-23T08:36:03Z"
                        }
                      ],
                      "totalCount": 2
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Refer to response body for details.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "InvalidListLimit": {
                    "value": {
                      "error": "InvalidListLimit",
                      "message": "The value of limit must be a valid integer between 1 and 100, both inclusive."
                    }
                  },
                  "InvalidListOffset": {
                    "value": {
                      "error": "InvalidListOffset",
                      "message": "The value of offset must be a valid non-negative integral multiple of the limit parameter."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "ProjectNotFound",
                      "message": "The project ID given does not exist."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "schema": {
                  "type": "string"
                },
                "description": "A string automatically generated by the api server to identify each request."
              }
            }
          }
        },
        "operationId": "get-registry-project-repositories",
        "description": "A repository is a collection of related container images that usually represent different versions of the same application. Repositories are stored and managed under registry projects. \n\nTo create a new repository on ECP, tag your image and hit the command \"docker push registry-qcc.quantil.com/{project-name}/{repo-name}:{tag}\" in your docker environment. A new repository will be created automatically using the {repo-name} parameter. The image will be pushed to the ECP registry and stored under the repository.\n\nThis interface allows you to list repositories under a specific registry project.",
        "parameters": [
          {
            "name": "On-Behalf-Of",
            "in": "header",
            "description": "If you are a reseller, you can use this header to specify the ID of a child customer and make API call on their behalf.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchString",
            "in": "query",
            "description": "Keyword to search for particular resources. The value is matched against the \"name\" field of each resource.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0
            },
            "description": "Indicates the first resource to return. The first has an offset of 0. The value must be a valid non-negative integral multiple of the limit parameter."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 0,
              "maximum": 100
            },
            "description": "Indicates the maximum nuber of resources to return."
          }
        ]
      }
    },
    "/ecp/v1/registry/projects/{projectID}/repositories/{repository}": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "projectID",
          "in": "path",
          "required": true,
          "description": "ID of a registry project"
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "repository",
          "in": "path",
          "required": true,
          "description": "Name of a repository"
        }
      ],
      "get": {
        "summary": "Query an image repository",
        "tags": [
          "Registry Projects"
        ],
        "responses": {
          "200": {
            "description": "The response contains details of the image repository.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "repositoryID": {
                      "title": "",
                      "type": "integer",
                      "description": "ID of an image repository"
                    },
                    "name": {
                      "title": "",
                      "type": "string",
                      "description": "Name of an image repository"
                    },
                    "projectID": {
                      "description": "ID of the registry project that an image repository is affiliated to",
                      "type": "integer"
                    },
                    "description": {
                      "title": "",
                      "type": "string",
                      "description": "Arbitrary text describing an image repository"
                    },
                    "pullCount": {
                      "title": "",
                      "type": "integer",
                      "description": "The number of image pulls from an image repository"
                    },
                    "tagsCount": {
                      "title": "",
                      "type": "integer",
                      "description": "The number of tags in an image repository"
                    },
                    "creationTime": {
                      "title": "",
                      "format": "date-time",
                      "type": "string",
                      "description": "Datetime when the resource is created"
                    },
                    "lastUpdateTime": {
                      "type": "string",
                      "title": "",
                      "format": "date-time",
                      "description": "Datetime when the resource is last updated"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "repositoryID": 29,
                      "name": "testproj1/demoapp",
                      "projectID": 3,
                      "description": "this is a demo",
                      "pullCount": 1,
                      "tagsCount": 1,
                      "creationTime": "2020-12-16T03:18:05Z",
                      "lastUpdateTime": "2020-12-16T03:18:05Z"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "ProjectNotFound": {
                    "value": {
                      "error": "ProjectNotFound",
                      "message": "The project ID given does not exist."
                    }
                  },
                  "RepositoryNotFound": {
                    "value": {
                      "error": "RepositoryNotFound",
                      "message": "The repository {repository} given does not exist."
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-registry-project-repository",
        "description": "Get the details of an image repository.",
        "parameters": [
          {
            "name": "On-Behalf-Of",
            "in": "header",
            "description": "If you are a reseller, you can use this header to specify the ID of a child customer and make API call on their behalf.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "patch": {
        "summary": "Update an image repository",
        "operationId": "patch-registry-project-repository",
        "responses": {
          "200": {
            "description": "This response indicates the repository is successfully updated.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "repositoryID": {
                      "title": "",
                      "type": "integer",
                      "description": "ID of an image repository"
                    },
                    "name": {
                      "title": "",
                      "type": "string",
                      "description": "Name of an image repository"
                    },
                    "projectID": {
                      "description": "ID of the registry project that an image repository is affiliated to",
                      "type": "integer"
                    },
                    "description": {
                      "title": "",
                      "type": "string",
                      "description": "Arbitrary text describing an image repository"
                    },
                    "pullCount": {
                      "title": "",
                      "type": "integer",
                      "description": "The number of image pulls from an image repository"
                    },
                    "tagsCount": {
                      "title": "",
                      "type": "integer",
                      "description": "The number of tags in an image repository"
                    },
                    "creationTime": {
                      "title": "",
                      "format": "date-time",
                      "type": "string",
                      "description": "Datetime when the resource is created"
                    },
                    "lastUpdateTime": {
                      "type": "string",
                      "title": "",
                      "format": "date-time",
                      "description": "Datetime when the resource is last updated"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "repositoryID": 29,
                      "name": "testproj1/demoapp",
                      "projectID": 3,
                      "description": "this is a demo",
                      "pullCount": 1,
                      "tagsCount": 1,
                      "creationTime": "2020-12-16T03:18:05Z",
                      "lastUpdateTime": "2020-12-16T03:18:05Z"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "This error is returned if the API call is not permitted. Refer to response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "NotAuthorized",
                      "message": "Only the admin API account is allowed to perform this operation."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "description": "A string automatically generated by the api server to identify each request.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "ProjectNotFound": {
                    "value": {
                      "error": "ProjectNotFound",
                      "message": "The project ID given does not exist."
                    }
                  },
                  "RepositoryNotFound": {
                    "value": {
                      "error": "RepositoryNotFound",
                      "message": "The repository {repository} given does not exist."
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Update the description of an image repository. Note that only your \"admin\" apiAccount is allowed to make this call.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "title": "",
                    "type": "string",
                    "description": "Arbitrary text describing an image repository"
                  }
                }
              },
              "examples": {
                "example-1": {
                  "value": {
                    "description": "this is a demo"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Registry Projects"
        ]
      },
      "delete": {
        "summary": "Delete an image repository",
        "operationId": "delete-registry-project-repository",
        "responses": {
          "204": {
            "description": "This response is returned if the project is successfully deleted.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "This error is returned if the API call is not permitted. Refer to response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "NotAuthorized",
                      "message": "Only the admin API account is allowed to perform this operation."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "description": "A string automatically generated by the api server to identify each request.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "ProjectNotFound": {
                    "value": {
                      "error": "ProjectNotFound",
                      "message": "The project ID given does not exist."
                    }
                  },
                  "RepositoryNotFound": {
                    "value": {
                      "error": "RepositoryNotFound",
                      "message": "The repository {repository} given does not exist."
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Registry Projects"
        ],
        "description": "Delete an existing image repository. Note that deleting an image repository will cause all tags under the repository to be deleted. Also note that only your “admin” apiAccount is allowed to make this call."
      }
    },
    "/ecp/v1/registry/projects/{projectID}/repositories/{repository}/tags": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "projectID",
          "in": "path",
          "required": true,
          "description": "ID of a registry project"
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "repository",
          "in": "path",
          "required": true,
          "description": "Name of a repository"
        }
      ],
      "get": {
        "summary": "Query list of tags under a repository",
        "tags": [
          "Registry Projects"
        ],
        "responses": {
          "200": {
            "description": "This response contains a list of tags.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "tags": {
                      "type": "array",
                      "items": {
                        "title": "",
                        "type": "object",
                        "description": "",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of a tag"
                          },
                          "digest": {
                            "type": "string",
                            "description": "Digest of a tag"
                          },
                          "size": {
                            "type": "integer",
                            "description": "Size of the image, measured in bytes"
                          },
                          "architecture": {
                            "type": "string",
                            "description": "Architecture of the image"
                          },
                          "os": {
                            "type": "string",
                            "description": "OS of the image"
                          },
                          "dockerVersion": {
                            "type": "string",
                            "description": "The version of docker which builds the image"
                          },
                          "author": {
                            "type": "string",
                            "description": "Author of the image"
                          },
                          "creationTime": {
                            "type": "string",
                            "description": "Datetime when the image is built"
                          },
                          "scanOverview": {
                            "type": "object",
                            "description": "Overview of previous scan result",
                            "properties": {
                              "status": {
                                "type": "string",
                                "description": "Status of the scan",
                                "enum": [
                                  "pending",
                                  "running",
                                  "finished",
                                  "error"
                                ]
                              },
                              "severity": {
                                "type": "string",
                                "description": "High-level severity rating",
                                "enum": [
                                  "Not scanned",
                                  "Negligible",
                                  "Unknown",
                                  "Low",
                                  "Medium",
                                  "High"
                                ]
                              },
                              "started": {
                                "type": "string",
                                "description": "Datetime when the scan is started"
                              },
                              "completed": {
                                "type": "string",
                                "description": "Datetime when the scan is completed"
                              },
                              "components": {
                                "type": "object",
                                "description": "The components overview of the image",
                                "properties": {
                                  "total": {
                                    "description": "Total number of the components in this image",
                                    "type": "integer"
                                  },
                                  "summary": {
                                    "type": "array",
                                    "description": "Number of components in different severities",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "severity": {
                                          "type": "string",
                                          "description": "Severity of a component",
                                          "enum": [
                                            "None",
                                            "Unknown",
                                            "Low",
                                            "Medium",
                                            "High"
                                          ]
                                        },
                                        "count": {
                                          "type": "integer",
                                          "description": "Number of components with certain severity"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "totalCount": {
                      "title": "",
                      "type": "integer",
                      "description": "Total number of resources"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "tags": [
                        {
                          "digest": "sha256:eaf7dac7253ddbd482e307e3a73c50e16af4681a31fc195907e209fe4486d0e4",
                          "name": "v1",
                          "size": 49184653,
                          "architecture": "amd64",
                          "os": "linux",
                          "dockerVersion": "1.12.6",
                          "author": "NGINX Docker Maintainers <docker-maint@nginx.com>",
                          "creationTime": "2021-01-20T12:19:02.469616845Z",
                          "scanOverview": {
                            "status": "finished",
                            "severity": "Low",
                            "components": {
                              "total": 89,
                              "summary": [
                                {
                                  "severity": "None",
                                  "count": 66
                                },
                                {
                                  "severity": "Unknown",
                                  "count": 12
                                },
                                {
                                  "severity": "Low",
                                  "count": 11
                                }
                              ]
                            },
                            "started": "2021-01-20T12:19:25Z",
                            "completed": "2021-02-09T00:02:13Z"
                          }
                        }
                      ],
                      "totalCount": 1
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Refer to response body for details.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "InvalidListLimit": {
                    "value": {
                      "error": "InvalidListLimit",
                      "message": "The value of limit must be a valid integer between 1 and 200, both inclusive."
                    }
                  },
                  "InvalidListOffset": {
                    "value": {
                      "error": "InvalidListOffset",
                      "message": "The value of offset must be a valid non-negative integer."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "ProjectNotFound": {
                    "value": {
                      "error": "ProjectNotFound",
                      "message": "The project ID given does not exist."
                    }
                  },
                  "RepositoryNotFound": {
                    "value": {
                      "error": "RepositoryNotFound",
                      "message": "The repository {repository} given does not exist."
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-registry-project-repository-tags",
        "description": "A tag is a convenient alias used to refer to a specific container image version.\n\nThis interface allows you to list tags under a specific repository.",
        "parameters": [
          {
            "name": "On-Behalf-Of",
            "in": "header",
            "description": "If you are a reseller, you can use this header to specify the ID of a child customer and make API call on their behalf.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates the first resource to return. The first has an offset of 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of resources to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 200,
              "minimum": 1
            }
          }
        ]
      }
    },
    "/ecp/v1/registry/projects/{projectID}/repositories/{repository}/tags/{tag}": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "projectID",
          "in": "path",
          "required": true,
          "description": "ID of a registry project"
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "repository",
          "in": "path",
          "required": true,
          "description": "Name of a repository"
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "tag",
          "in": "path",
          "required": true,
          "description": "Name of an image tag"
        }
      ],
      "get": {
        "summary": "Query an image tag",
        "tags": [
          "Registry Projects"
        ],
        "responses": {
          "200": {
            "description": "This response contains details of the image tag.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of a tag"
                    },
                    "digest": {
                      "type": "string",
                      "description": "Digest of a tag"
                    },
                    "size": {
                      "type": "integer",
                      "description": "Size of the image, measured in bytes"
                    },
                    "architecture": {
                      "type": "string",
                      "description": "Architecture of the image"
                    },
                    "os": {
                      "type": "string",
                      "description": "OS of the image"
                    },
                    "dockerVersion": {
                      "type": "string",
                      "description": "The version of docker which builds the image"
                    },
                    "author": {
                      "type": "string",
                      "description": "Author of the image"
                    },
                    "creationTime": {
                      "type": "string",
                      "description": "Datetime when the image is built"
                    },
                    "scanOverview": {
                      "type": "object",
                      "description": "Overview of previous scan result",
                      "properties": {
                        "status": {
                          "type": "string",
                          "description": "Status of the scan",
                          "enum": [
                            "pending",
                            "running",
                            "finished",
                            "error"
                          ]
                        },
                        "severity": {
                          "type": "string",
                          "description": "High-level severity rating",
                          "enum": [
                            "Not scanned",
                            "Negligible",
                            "Unknown",
                            "Low",
                            "Medium",
                            "High"
                          ]
                        },
                        "started": {
                          "type": "string",
                          "description": "Datetime when the scan is started"
                        },
                        "completed": {
                          "type": "string",
                          "description": "Datetime when the scan is completed"
                        },
                        "components": {
                          "type": "object",
                          "description": "The components overview of the image",
                          "properties": {
                            "total": {
                              "description": "Total number of the components in this image",
                              "type": "integer"
                            },
                            "summary": {
                              "type": "array",
                              "description": "Number of components in different severities",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "severity": {
                                    "type": "string",
                                    "description": "Severity of a component",
                                    "enum": [
                                      "None",
                                      "Unknown",
                                      "Low",
                                      "Medium",
                                      "High"
                                    ]
                                  },
                                  "count": {
                                    "type": "integer",
                                    "description": "Number of components with certain severity"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "digest": "sha256:eaf7dac7253ddbd482e307e3a73c50e16af4681a31fc195907e209fe4486d0e4",
                      "name": "v1",
                      "size": 49184653,
                      "architecture": "amd64",
                      "os": "linux",
                      "dockerVersion": "1.12.6",
                      "author": "NGINX Docker Maintainers <docker-maint@nginx.com>",
                      "creationTime": "2021-01-20T12:19:02.469616845Z",
                      "scanOverview": {
                        "status": "finished",
                        "severity": "Low",
                        "components": {
                          "total": 89,
                          "summary": [
                            {
                              "severity": "None",
                              "count": 66
                            },
                            {
                              "severity": "Unknown",
                              "count": 12
                            },
                            {
                              "severity": "Low",
                              "count": 11
                            }
                          ]
                        },
                        "started": "2021-01-20T12:19:25Z",
                        "completed": "2021-02-09T00:02:13Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "ProjectNotFound": {
                    "value": {
                      "error": "ProjectNotFound",
                      "message": "The project ID given does not exist."
                    }
                  },
                  "RepositoryNotFound": {
                    "value": {
                      "error": "RepositoryNotFound",
                      "message": "The repository {repository} given does not exist."
                    }
                  },
                  "TagNotFound": {
                    "value": {
                      "error": "TagNotFound",
                      "message": "The tag {tag} given does not exist."
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-registry-project-repository-tag",
        "description": "Get the details of an image tag.",
        "parameters": [
          {
            "name": "On-Behalf-Of",
            "in": "header",
            "description": "If you are a reseller, you can use this header to specify the ID of a child customer and make API call on their behalf.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "delete": {
        "summary": "Delete an image tag",
        "operationId": "delete-registry-project-repository-tag",
        "responses": {
          "204": {
            "description": "This response is returned if the tag is successfully deleted.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "This error is returned if the API call is not permitted. Refer to response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "NotAuthorized",
                      "message": "Only the admin API account is allowed to perform this operation."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "description": "A string automatically generated by the api server to identify each request.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "ProjectNotFound": {
                    "value": {
                      "error": "ProjectNotFound",
                      "message": "The project ID given does not exist."
                    }
                  },
                  "RepositoryNotFound": {
                    "value": {
                      "error": "RepositoryNotFound",
                      "message": "The repository {repository} given does not exist."
                    }
                  },
                  "TagNotFound": {
                    "value": {
                      "error": "TagNotFound",
                      "message": "The tag {tag} given does not exist."
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Registry Projects"
        ],
        "description": "Delete an existing image tag. Note that only your \"admin\" apiAccount is allowed to make this call."
      }
    },
    "/ecp/v1/registry/projects/{projectID}/repositories/{repository}/tags/{tag}/vulnerabilities": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "projectID",
          "in": "path",
          "required": true,
          "description": "ID of a registry project"
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "repository",
          "in": "path",
          "required": true,
          "description": "Name of a repository"
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "tag",
          "in": "path",
          "required": true,
          "description": "Name of an image tag"
        }
      ],
      "get": {
        "summary": "Query the vulnerabilities of an image",
        "tags": [
          "Registry Projects"
        ],
        "responses": {
          "200": {
            "description": "This response contains the vulnerability details of an image.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "vulnerabilities": {
                      "type": "array",
                      "description": "Array of vulnerabilities",
                      "items": {
                        "type": "object",
                        "properties": {
                          "ID": {
                            "type": "string",
                            "description": "ID of the vulnerability, usually it is the CVE ID."
                          },
                          "severity": {
                            "type": "string",
                            "description": "Level of severity.",
                            "enum": [
                              "None",
                              "Unknown",
                              "Low",
                              "Medium",
                              "High"
                            ]
                          },
                          "package": {
                            "type": "string",
                            "description": "The package that introduces the vulnerability"
                          },
                          "version": {
                            "type": "string",
                            "description": "The version of the package"
                          },
                          "description": {
                            "type": "string",
                            "description": "The description of the vulnerability"
                          },
                          "fixedVersion": {
                            "type": "string",
                            "description": "The version where the vulnerability is fixed"
                          },
                          "link": {
                            "type": "string",
                            "description": "Link to the reference web page about this CVE"
                          }
                        }
                      }
                    },
                    "totalCount": {
                      "title": "",
                      "type": "integer",
                      "description": "Total number of resources"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "vulnerabilities": [
                        {
                          "severity": "None",
                          "version": "1.30+dfsg-6",
                          "description": "Tar 1.15.1 does not properly warn the user when extracting setuid or setgid files, which may allow local users or remote attackers to gain privileges.",
                          "link": "https://security-tracker.debian.org/tracker/CVE-2005-2541",
                          "ID": "CVE-2005-2541",
                          "package": "tar"
                        },
                        {
                          "severity": "None",
                          "version": "1:4.5-1.1",
                          "description": "initscripts in rPath Linux 1 sets insecure permissions for the /var/log/btmp file, which allows local users to obtain sensitive information regarding authentication attempts.  NOTE: because sshd detects the insecure permissions and does not log certain events, this also prevents sshd from logging failed authentication attempts by remote attackers.",
                          "link": "https://security-tracker.debian.org/tracker/CVE-2007-5686",
                          "ID": "CVE-2007-5686",
                          "package": "shadow"
                        }
                      ],
                      "totalCount": 2
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Refer to response body for details.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "InvalidListOffset": {
                    "value": {
                      "error": "InvalidListOffset",
                      "message": "The value of offset must be a valid non-negative integer."
                    }
                  },
                  "InvalidListLimit": {
                    "value": {
                      "error": "InvalidListLimit",
                      "message": "The value of limit must be a valid integer between 1 and 200, both inclusive."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "ProjectNotFound": {
                    "value": {
                      "error": "ProjectNotFound",
                      "message": "The project ID given does not exist."
                    }
                  },
                  "RepositoryNotFound": {
                    "value": {
                      "error": "RepositoryNotFound",
                      "message": "The repository {repository} given does not exist."
                    }
                  },
                  "TagNotFound": {
                    "value": {
                      "error": "TagNotFound",
                      "message": "The tag {tag} given does not exist."
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-registry-project-repository-tag-vulnerabilities",
        "description": "Get the vulnerability details of an image based on the previous successful scan.",
        "parameters": [
          {
            "name": "On-Behalf-Of",
            "in": "header",
            "description": "If you are a reseller, you can use this header to specify the ID of a child customer and make API call on their behalf.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates the first resource to return. The first has an offset of 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of resources to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 200,
              "minimum": 1
            }
          }
        ]
      }
    },
    "/ecp/v1/registry/users": {
      "get": {
        "summary": "Query list of registry users",
        "tags": [
          "Registry Users"
        ],
        "responses": {
          "200": {
            "description": "The response contains a list of registry users.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "users": {
                      "type": "array",
                      "description": "Array of registry users",
                      "items": {
                        "type": "object",
                        "properties": {
                          "userID": {
                            "title": "",
                            "type": "integer",
                            "description": "ID of a registry user"
                          },
                          "username": {
                            "title": "",
                            "type": "string",
                            "description": "Username of a registry user"
                          },
                          "email": {
                            "title": "",
                            "type": "string",
                            "description": "Email address of the registry user"
                          },
                          "description": {
                            "title": "",
                            "type": "string",
                            "description": "Arbitrary text about the registry user. Must be not more than 20 characters."
                          },
                          "projectsAccess": {
                            "type": "array",
                            "description": "What projects are accessible to a registry user and what is the access type.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "project": {
                                  "type": "string",
                                  "description": "Name of a registry project"
                                },
                                "accessType": {
                                  "type": "string",
                                  "title": "",
                                  "description": "How a project is accessible to a registry user. Can be one of:\n“readonly”: has the permissions to pull images under a project;\n“readwrite”: has the permissions to push/pull images to/from a project.",
                                  "enum": [
                                    "readonly",
                                    "readwrite"
                                  ]
                                }
                              }
                            }
                          },
                          "createdBy": {
                            "title": "",
                            "type": "string",
                            "description": "Name of contact or apiAccount who creates the registry user"
                          },
                          "creationTime": {
                            "title": "",
                            "format": "date-time",
                            "type": "string",
                            "description": "Datetime when the resource is created"
                          },
                          "lastUpdateTime": {
                            "type": "string",
                            "title": "",
                            "format": "date-time",
                            "description": "Datetime when the resource is last updated"
                          }
                        }
                      }
                    },
                    "totalCount": {
                      "title": "",
                      "type": "integer",
                      "description": "Total number of resources"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "users": [
                        {
                          "username": "demouser-5883",
                          "email": "abcde@123.com",
                          "description": "This is a demo user",
                          "createdBy": "ecp-demo",
                          "creationTime": "2021-01-19T06:28:55Z",
                          "lastUpdateTime": "2021-01-19T07:48:22Z",
                          "projectsAccess": [
                            {
                              "accessType": "readwrite",
                              "project": "myproject1"
                            }
                          ],
                          "userID": 2977
                        }
                      ],
                      "totalCount": 1
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Refer to the response body for details.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "InvalidListLimit": {
                    "value": {
                      "error": "InvalidListLimit",
                      "message": "The value of limit must be a valid integer between 1 and 200, both inclusive."
                    }
                  },
                  "InvalidListOffset": {
                    "value": {
                      "error": "InvalidListOffset",
                      "message": "The value of offset must be a valid non-negative integer."
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-registry-users",
        "description": "Get a list of registry users. You can specify a search parameter, offset and limit to filter your results.",
        "parameters": [
          {
            "name": "On-Behalf-Of",
            "in": "header",
            "description": "If you are a reseller, you can use this header to specify the ID of a child customer and make API call on their behalf.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchString",
            "in": "query",
            "description": "Keyword to search for particular resources. The value is matched against the \"name\" field of each resource.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates the first resource to return. The first has an offset of 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of resources to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 200,
              "minimum": 1
            }
          }
        ]
      },
      "post": {
        "summary": "Create a registry user",
        "operationId": "post-registry-users",
        "responses": {
          "201": {
            "description": "This response indicates the registry user is successfully created.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              },
              "Location": {
                "schema": {
                  "type": "string"
                },
                "in": "header",
                "name": "Location",
                "description": "Location of the newly created resource.",
                "required": false
              }
            }
          },
          "400": {
            "description": "The request is invalid. Refer to the response body for details.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "InvalidUsernamePrefix": {
                    "value": {
                      "error": "InvalidUsernamePrefix",
                      "message": "The usernamePrefix given is invalid. A valid value must contain lower case alphanumeric characters, ‘-’ and ‘.’ only, must start and end with an alphanumeric character, and must be no more than 15 characters."
                    }
                  },
                  "InvalidPassword": {
                    "value": {
                      "error": "InvalidPassword",
                      "message": "The password given is invalid. A valid password must be 8 to 20 characters long with at least 1 lowercase letter, 1 uppercase letter and 1 number."
                    }
                  },
                  "InvalidEmailAddress": {
                    "value": {
                      "error": "InvalidEmailAddress",
                      "message": "The email address given is invalid."
                    }
                  },
                  "FieldValueTooLong": {
                    "value": {
                      "error": "FieldValueTooLong",
                      "message": "The {field} must be not more than xxx characters."
                    }
                  },
                  "InvalidAccessType": {
                    "value": {
                      "error": "InvalidAccessType",
                      "message": "The access type {access type} given is invalid. Must be one of “readonly” and “readwrite”."
                    }
                  },
                  "ProjectNotFound": {
                    "value": {
                      "error": "ProjectNotFound",
                      "message": "The project {project} given does not exist."
                    }
                  },
                  "RequiredFieldMissing": {
                    "value": {
                      "error": "RequiredFieldMissing",
                      "message": "The field {field} is required."
                    }
                  },
                  "RepeatedProjectName": {
                    "value": {
                      "error": "RepeatedProjectName",
                      "message": "The project name in the projectsAccess array must be unique."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "This error is returned if the API call is not permitted. Refer to response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "NotAuthorized",
                      "message": "Only the admin API account is allowed to perform this operation."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "description": "A string automatically generated by the api server to identify each request.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "409": {
            "description": "This error is returned if you try to create a registry user that already exists.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "UsernamePrefixExists": {
                    "value": {
                      "error": "UsernamePrefixExists",
                      "message": "The usernamePrefix {usernamePrefix} is already taken."
                    }
                  },
                  "EmailAddressExists": {
                    "value": {
                      "error": "EmailAddressExists",
                      "message": "The email address {email address} is already registered by an existing user."
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Registry Users"
        ],
        "description": "This interface enables you to create an ECP registry user. Note that only your \"admin\" apiAccount is allowed to make this call.\n\nWhen you create an ECP registry user, a corresponding imagePullSecret gets created automatically. ",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "usernamePrefix": {
                    "type": "string",
                    "description": "Username prefix to be used in the username of a new registry user. Must be unique across registry users under a customer. Must be not more than 15 characters and must not contain such special characters as “, ~, #, $, %. \n\nWhen receiving the request, the API server will append a fixed length random string and then create a registry user using the complete username. This is to avoid possible naming collisions across different customers.",
                    "maxLength": 15
                  },
                  "password": {
                    "type": "string",
                    "description": "Password of a registry user. Must be 8 to 20 characters long with at least 1 lowercase letter, 1 uppercase letter and 1 number.",
                    "minLength": 8,
                    "maxLength": 20
                  },
                  "email": {
                    "type": "string",
                    "description": "Email address of a registry user. Must be a valid email address. Must be unique."
                  },
                  "description": {
                    "type": "string",
                    "description": "Arbitrary text about the user. Must be not more than 20 characters.",
                    "maxLength": 20
                  },
                  "projectsAccess": {
                    "type": "array",
                    "description": "Defines what projects are accessible to a registry user and what is the access type.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "project": {
                          "type": "string",
                          "description": "Name of a registry project"
                        },
                        "accessType": {
                          "type": "string",
                          "title": "",
                          "description": "How a project is accessible to a registry user. Can be one of:\n“readonly”: has the permissions to pull images under a project;\n“readwrite”: has the permissions to push/pull images to/from a project.",
                          "enum": [
                            "readonly",
                            "readwrite"
                          ]
                        }
                      },
                      "required": [
                        "project",
                        "accessType"
                      ]
                    }
                  }
                },
                "required": [
                  "usernamePrefix",
                  "password",
                  "email"
                ]
              },
              "examples": {
                "example-1": {
                  "value": {
                    "usernamePrefix": "demo",
                    "password": "ABcd12345678",
                    "email": "abc@123.com",
                    "description": "This is a demo user",
                    "projectsAccess": [
                      {
                        "project": "myproject1",
                        "accessType": "readonly"
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ecp/v1/users/{userID}": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "userID",
          "in": "path",
          "required": true,
          "description": "ID of a registry user"
        }
      ],
      "get": {
        "summary": "Query a registry user",
        "tags": [
          "Registry Users"
        ],
        "responses": {
          "200": {
            "description": "The response contains details of the registry user.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "userID": {
                      "title": "",
                      "type": "integer",
                      "description": "ID of a registry user"
                    },
                    "username": {
                      "title": "",
                      "type": "string",
                      "description": "Username of a registry user"
                    },
                    "email": {
                      "title": "",
                      "type": "string",
                      "description": "Email address of the registry user"
                    },
                    "description": {
                      "title": "",
                      "type": "string",
                      "description": "Arbitrary text about the registry user. Must be not more than 20 characters."
                    },
                    "projectsAccess": {
                      "type": "array",
                      "description": "What projects are accessible to a registry user and what is the access type.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "projectID": {
                            "title": "",
                            "type": "integer",
                            "description": "ID of a registry project"
                          },
                          "project": {
                            "title": "",
                            "type": "string",
                            "description": "Name of a registry project. Must be unique globally. Allows lower case alphanumeric characters, ‘-’, ‘_’ and ‘.’ only, must start and end with an alphanumeric character, and must be not more than 128 characters."
                          },
                          "accessType": {
                            "type": "string",
                            "title": "",
                            "description": "How a project is accessible to a registry user. Can be one of:\n“readonly”: has the permissions to pull images under a project;\n“readwrite”: has the permissions to push/pull images to/from a project.",
                            "enum": [
                              "readonly",
                              "readwrite"
                            ]
                          }
                        }
                      }
                    },
                    "createdBy": {
                      "title": "",
                      "type": "string",
                      "description": "Name of contact or apiAccount who creates the registry user"
                    },
                    "creationTime": {
                      "title": "",
                      "format": "date-time",
                      "type": "string",
                      "description": "Datetime when the resource is created"
                    },
                    "lastUpdateTime": {
                      "type": "string",
                      "title": "",
                      "format": "date-time",
                      "description": "Datetime when the resource is last updated"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "username": "demouser-5883",
                      "email": "abcde@123.com",
                      "description": "This is a demo user",
                      "createdBy": "ecp-demo",
                      "creationTime": "2021-01-19T06:28:55Z",
                      "lastUpdateTime": "2021-01-19T07:48:22Z",
                      "projectsAccess": [
                        {
                          "accessType": "readwrite",
                          "project": "myproject1",
                          "projectID": 22
                        }
                      ],
                      "userID": 2977
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "UserNotFound": {
                    "value": {
                      "error": "UserNotFound",
                      "message": "The user ID given doesnot exist."
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-user-by-ID",
        "description": "Get the details of a registry user.",
        "parameters": [
          {
            "name": "On-Behalf-Of",
            "in": "header",
            "description": "If you are a reseller, you can use this header to specify the ID of a child customer and make API call on their behalf.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "put": {
        "summary": "Update a registry user",
        "operationId": "put-user-by-ID",
        "responses": {
          "200": {
            "description": "This response indicates the user is successfully updated.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "userID": {
                      "title": "",
                      "type": "integer",
                      "description": "ID of a registry user"
                    },
                    "username": {
                      "title": "",
                      "type": "string",
                      "description": "Username of a registry user"
                    },
                    "email": {
                      "title": "",
                      "type": "string",
                      "description": "Email address of the registry user"
                    },
                    "description": {
                      "title": "",
                      "type": "string",
                      "description": "Arbitrary text about the registry user. Must be not more than 20 characters."
                    },
                    "projectsAccess": {
                      "type": "array",
                      "description": "What projects are accessible to a registry user and what is the access type.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "project": {
                            "title": "",
                            "type": "string",
                            "description": "Name of a registry project. Must be unique globally. Allows lower case alphanumeric characters, ‘-’, ‘_’ and ‘.’ only, must start and end with an alphanumeric character, and must be not more than 128 characters."
                          },
                          "accessType": {
                            "type": "string",
                            "title": "",
                            "description": "How a project is accessible to a registry user. Can be one of:\n“readonly”: has the permissions to pull images under a project;\n“readwrite”: has the permissions to push/pull images to/from a project.",
                            "enum": [
                              "readonly",
                              "readwrite"
                            ]
                          }
                        }
                      }
                    },
                    "createdBy": {
                      "title": "",
                      "type": "string",
                      "description": "Name of contact or apiAccount who creates the registry user"
                    },
                    "creationTime": {
                      "title": "",
                      "format": "date-time",
                      "type": "string",
                      "description": "Datetime when the resource is created"
                    },
                    "lastUpdateTime": {
                      "type": "string",
                      "title": "",
                      "format": "date-time",
                      "description": "Datetime when the resource is last updated"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "username": "demouser-5883",
                      "email": "demo@123.com",
                      "description": "This is a demo user",
                      "createdBy": "ecp-demo",
                      "creationTime": "2021-01-19T06:28:55Z",
                      "lastUpdateTime": "2021-01-19T07:48:22Z",
                      "projectsAccess": [
                        {
                          "accessType": "readonly",
                          "project": "myproject1"
                        }
                      ],
                      "userID": 2977
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Refer to response body for details.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "InvalidEmailAddress": {
                    "value": {
                      "error": "InvalidEmailAddress",
                      "message": "The email address given is invalid."
                    }
                  },
                  "FieldValueTooLong": {
                    "value": {
                      "error": "FieldValueTooLong",
                      "message": "The {field} must be not more than xxx characters."
                    }
                  },
                  "ProjectNotFound": {
                    "value": {
                      "error": "ProjectNotFound",
                      "message": "The project {project} given does not exist."
                    }
                  },
                  "InvalidAccessType": {
                    "value": {
                      "error": "InvalidAccessType",
                      "message": "The access type {access type} given is invalid. Must be one of “readonly” and “readwrite”."
                    }
                  },
                  "RequiredFieldMissing": {
                    "value": {
                      "error": "RequiredFieldMissing",
                      "message": "The field {field} is required."
                    }
                  },
                  "UpdateUsernameNotAllowed": {
                    "value": {
                      "error": "UpdateUsernameNotAllowed",
                      "message": "The username cannot be updated."
                    }
                  },
                  "RepeatedProjectName": {
                    "value": {
                      "error": "RepeatedProjectName",
                      "message": "The project name in the projectsAccess array must be unique."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "This error is returned if the API call is not permitted. Refer to response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "NotAuthorized",
                      "message": "Only the admin API account is allowed to perform this operation."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "description": "A string automatically generated by the api server to identify each request.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "UserNotFound": {
                    "value": {
                      "error": "UserNotFound",
                      "message": "The user ID given does not exist."
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "This error is returned if you provide an email address that is already registered.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "EmailAddressExists": {
                    "value": {
                      "error": "EmailAddressExists",
                      "message": "The email address {email address} is already registered by an existing user."
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Registry Users"
        ],
        "description": "Update an existing registry user. Note that only your \"admin\" apiAccount is allowed to make this call.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "title": "",
                    "type": "string",
                    "description": "Email address of the registry user"
                  },
                  "description": {
                    "title": "",
                    "type": "string",
                    "description": "Arbitrary text about the registry user. Must be not more than 20 characters."
                  },
                  "projectsAccess": {
                    "type": "array",
                    "description": "Defines what projects are accessible to a registry user and what is the access type.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "project": {
                          "title": "",
                          "type": "string",
                          "description": "Name of a registry project. Must be unique globally. Allows lower case alphanumeric characters, ‘-’, ‘_’ and ‘.’ only, must start and end with an alphanumeric character, and must be not more than 128 characters."
                        },
                        "accessType": {
                          "type": "string",
                          "title": "",
                          "description": "How a project is accessible to a registry user. Can be one of:\n“readonly”: has the permissions to pull images under a project;\n“readwrite”: has the permissions to push/pull images to/from a project.",
                          "enum": [
                            "readonly",
                            "readwrite"
                          ]
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "example-1": {
                  "value": {
                    "email": "demo@123.com",
                    "description": "this is a demo user",
                    "projectsAccess": [
                      {
                        "project": "myproject1",
                        "accessType": "readonly"
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Change the password of a registry user",
        "operationId": "patch-user-by-ID",
        "responses": {
          "204": {
            "description": "This response indicates the password is changed.",
            "headers": {
              "Qtl-Reqeust-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Refer to response body for details.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "InvalidPassword": {
                    "value": {
                      "error": "InvalidPassword",
                      "message": "The password given is invalid. A valid password must be 8 to 20 characters long with at least 1 lowercase letter, 1 uppercase letter and 1 number."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "This error is returned if the API call is not permitted. Refer to response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "NotAuthorized",
                      "message": "Only the admin API account is allowed to perform this operation."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "description": "A string automatically generated by the api server to identify each request.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "UserNotFound",
                      "message": "The user ID given does not exist."
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Registry Users"
        ],
        "description": "Change the password of a registry user. Note that only your \"admin\" apiAccount is allowed to make this call.\n\nThis operation will also trigger update to the imagePullSecret that is created automatically along with the registry user.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "password": {
                    "type": "string",
                    "description": "Password of a registry user. Must be 8 to 20 characters long with at least 1 lowercase letter, 1 uppercase letter and 1 number.",
                    "minLength": 8,
                    "maxLength": 20
                  }
                },
                "required": [
                  "password"
                ]
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a registry user",
        "operationId": "delete-user-by-ID",
        "responses": {
          "204": {
            "description": "This response is returned if the user is successfully deleted.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Refer to response body for details.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "CredentialsBeingUsed",
                      "message": "The credentials of this registry user are being used by applications and cannot be deleted."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "This error is returned if the API call is not permitted. Refer to response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "NotAuthorized",
                      "message": "Only the admin API account is allowed to perform this operation."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "description": "A string automatically generated by the api server to identify each request.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "UserNotFound",
                      "message": "The user ID given does not exist."
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Registry Users"
        ],
        "description": "Delete an existing ECP registry user. Note that only your \"admin\" apiAccount is allowed to make this call.\n\nThis operation will also trigger deletion of the imagePullSecret that is created automatically along with the registry user. A registry user cannot be deleted when the corresponding imagePullSecret is being used by applications."
      }
    },
    "/ecp/v1/servicequotas": {
      "get": {
        "summary": "Query serviceQuotas list",
        "tags": [
          "ECP Product Management"
        ],
        "responses": {
          "200": {
            "description": "The response contains a list of serviceQuotas.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "serviceQuotas": {
                      "type": "array",
                      "description": "Array of serviceQuotas",
                      "items": {
                        "type": "object",
                        "properties": {
                          "serviceQuotaID": {
                            "title": "quota.serviceQuotaID",
                            "type": "string",
                            "description": "ID of a serviceQuota. Unless otherwise stated, the ID of the customer that a serviceQuota is created for is reused as the ID of the serviceQuota. "
                          },
                          "customerID": {
                            "title": "quota.customerID",
                            "type": "string",
                            "description": "ID of the customer that a serviceQuota is created for."
                          },
                          "namespace": {
                            "title": "quota.namespace",
                            "type": "string",
                            "description": "The Kubernetes namespace to be created for a customer in underlying ECP Kubernetes clusters (i.e. ECP locations). Allows only digits, lower-case letters and hyphens. Must be unique globally and no more than 63 characters."
                          },
                          "status": {
                            "type": "string",
                            "title": "quota.status",
                            "description": "Status of a serviceQuota, which represents the status of ECP service subscription by a customer. The “trial” status means the customer is using ECP service as a free trial. When the status is set to \"suspended\", any requests from the customer will be rejected by ECP API server. \n\nThis status is related to ECP service only. It doesn’t affect other products subscribed by the customer.",
                            "enum": [
                              "active",
                              "suspended",
                              "trial"
                            ],
                            "default": "suspended"
                          },
                          "trialDeadline": {
                            "type": "string",
                            "title": "quota.trialDeadline",
                            "description": "Date-time in RFC 3339 format indicating when the trial expires, e.g. 2021-07-01T15:00:00Z. Required only when the status is set to “trial”. Ignored otherwise. Must not be a date-time in the past. The trial must not last longer than 90 days after the trial starts.\n\nWhen trialDeadline expires, the status will be set to “suspended” and all existing ECP resources for the customer will be deleted.",
                            "format": "date-time"
                          },
                          "billUsingStripe": {
                            "type": "boolean",
                            "title": "quota.billUsingStripe",
                            "description": "A flag indicating whether this customer will be invoiced using Stripe.",
                            "default": false
                          },
                          "contractID": {
                            "title": "quota.contractID",
                            "type": "string",
                            "description": "ID representing the ECP service contract, used for billing. Required when “billUsingStripe” set to true."
                          },
                          "contractStartDate": {
                            "type": "string",
                            "title": "quota.contractStartDate",
                            "description": "The start date of an ECP service contract. Must be a UTC date in “yyyy-MM-dd” format. Required when “contractID” is provided.",
                            "format": "date"
                          },
                          "allowDeploymentInChina": {
                            "type": "boolean",
                            "title": "quota.allowDeploymentInChina",
                            "description": "Whether a customer is allowed to deploy their applications to ECP locations in mainland China. When this is set to false, the customer will not be allowed to pick mainland China locations or the \"CN\" region to deploy their applications.",
                            "default": false
                          },
                          "accountManagerEmail": {
                            "type": "string",
                            "title": "quota.accountManagerEmail",
                            "description": "Email address of the account manager who manages the customer. The email address specified can be used by the account manager to receive system notifications related to the customer, e.g. in the event of trial expiration, excessive usage and service suspension.",
                            "format": "email"
                          },
                          "description": {
                            "title": "quota.description",
                            "type": "string",
                            "description": "Arbitrary text about a serviceQuota"
                          },
                          "creationTime": {
                            "title": "",
                            "format": "date-time",
                            "type": "string",
                            "description": "Datetime when the resource is created"
                          },
                          "lastUpdateTime": {
                            "type": "string",
                            "title": "",
                            "format": "date-time",
                            "description": "Datetime when the resource is last updated"
                          },
                          "suspensionDate": {
                            "type": "string",
                            "title": "quota.suspensionDate",
                            "description": "Datetime indicating when the status is changed from “trial” or “active” to “suspended‘. This field is updated by API server when ECP service is suspended for the customer. It cannot be set via API calls.",
                            "format": "date-time"
                          },
                          "upgradeDate": {
                            "type": "string",
                            "title": "quota.upgradeDate",
                            "description": "Datetime indicating when the status is changed from “trial” to “active”. This field is updated by API server when the customer as a free trial upgrades to a paid customer. It cannot be set via API calls.",
                            "format": "date-time"
                          }
                        }
                      }
                    },
                    "totalCount": {
                      "title": "",
                      "type": "integer",
                      "description": "Total number of resources"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "serviceQuotas ": [
                        {
                          "serviceQuotaID ": "123456",
                          "customerID": "123456",
                          "namespace ": "demo ",
                          "status": "active",
                          "billUsingStripe": true,
                          "contractID": "abcdefg",
                          "contractStartDate": "2020-10-02",
                          "allowDeploymentInChina": false,
                          "accountManagerEmail": "abc@123.com",
                          "description": "this is a demo service quota",
                          "creationTime": "2020-10-02T15:00:00Z",
                          "lastUpdateTime": "2020-10-02T15:00:00Z"
                        }
                      ],
                      "totalCount": 1
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Refer to response body for details.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "InvalidStatus",
                      "message": "The status specified is invalid. Must be one of \"trial\", 'suspended' and 'active'"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "AccessDenied",
                      "message": "A regular customer is not allowed to make this call."
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-servicequotas",
        "description": "If you are a reseller, you can use this API to list serviceQuotas of your child customers. Optional query parameters let you filter the results. \n\nBoth \"servicequotas\" and \"serviceQuotas\" are acceptable on the path. This also applies to other APIs related to serviceQuotas.",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "searchString",
            "description": "Keyword to search for particular serviceQuotas. The value will be matched against the “namespace” field of a serviceQuota and the “name” of the customer that a serviceQuota is created for."
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "suspended"
              ]
            },
            "in": "query",
            "name": "status",
            "description": "Status of ECP service subscription by a customer"
          },
          {
            "schema": {
              "type": "boolean"
            },
            "in": "query",
            "name": "allowDeploymentInChina",
            "description": "Whether a customer is allowed to deploy their applications to ECP locations in mainland China"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "contractID",
            "description": "ID of the contract signed with the customer related to ECP service subscription"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "accountManagerEmail",
            "description": "Email address of a specific account manager. This filter can be used to filter customers managed by a given account manager."
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Indicates the first resource to return. The first has an offset of 0.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of resources to return",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 200,
              "minimum": 1
            }
          }
        ]
      },
      "post": {
        "summary": "Create serviceQuota for a customer",
        "operationId": "post-servicequotas",
        "responses": {
          "201": {
            "description": "This response indicates the serviceQuota is successfully created.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              },
              "Location": {
                "schema": {
                  "type": "string"
                },
                "in": "header",
                "name": "Location",
                "description": "Location of the newly created resource.",
                "required": false
              }
            }
          },
          "400": {
            "description": "The request is invalid. Refer to response body for details.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "InvalidCustomerID": {
                    "value": {
                      "error": "InvalidCustomerID",
                      "message": "The customer ID given does not exist or is not a child of the caller."
                    }
                  },
                  "RecreateServiceQuotaNotAllowed": {
                    "value": {
                      "error": "RecreateServiceQuotaNotAllowed",
                      "message": "A service quota for the customer existed before. Recreating a deleted service quota is not allowed."
                    }
                  },
                  "NoSubscription": {
                    "value": {
                      "error": "NoSubscription",
                      "message": "The customer specified is not subscribed to ECP service. Please add \"ECP\" to the products list of the customer first."
                    }
                  },
                  "InvalidNamespace": {
                    "value": {
                      "error": "InvalidNamespace",
                      "message": "The namespace specified is invalid. A valid namespace must be of no more than 63 characters, and must not contain characters other than digits, lower-case letters, and hyphens."
                    }
                  },
                  "InvalidStatus": {
                    "value": {
                      "error": "InvalidStatus",
                      "message": "The status specified is invalid. Must be one of \"trial\", 'suspended' and 'active'"
                    }
                  },
                  "InvalidAllowDeploymentInChina": {
                    "value": {
                      "error": "InvalidAllowDeploymentInChina",
                      "message": "The allowDeploymentInChina specified is invalid, must be true or false."
                    }
                  },
                  "InvalidResourceQuota": {
                    "value": {
                      "error": "InvalidResourceQuota",
                      "message": "The resource quota {quota} specified is invalid. Must be an integer within the range {range}."
                    }
                  },
                  "FieldValueTooLong": {
                    "value": {
                      "error": "FieldValueTooLong",
                      "message": "The {field} must be not more than xxx characters."
                    }
                  },
                  "RequiredFieldMissing": {
                    "value": {
                      "error": "RequiredFieldMissing",
                      "message": "The field {field} is required."
                    }
                  },
                  "InvalidTrialDeadline": {
                    "value": {
                      "error": "InvalidTrialDeadline",
                      "message": "Invalid parameter trialDeadline. {trialDeadline} is not a valid RFC3339 timestamp. The timestamp should be in \"yyyy-MM-dd'T'HH:mm:ss'Z'\" format."
                    }
                  },
                  "InvalidTrialDeadline1": {
                    "value": {
                      "error": "InvalidTrialDeadline",
                      "message": "The trialDeadline specified cannot be a time in the past."
                    }
                  },
                  "InvalidTrialDeadline2": {
                    "value": {
                      "error": "InvalidTrialDeadline",
                      "message": "The trial period cannot be longer than 90 days."
                    }
                  },
                  "TrialDeadlineNotSpecified": {
                    "value": {
                      "error": "TrialDeadlineNotSpecified",
                      "message": "The field trialDeadline is required when customer status is set to “trial”."
                    }
                  },
                  "InvalidBillUsingStripe": {
                    "value": {
                      "error": "InvalidBillUsingStripe",
                      "message": "The billUsingStripe specified is invalid, must be true or false."
                    }
                  },
                  "ContractIDNotSpecified": {
                    "value": {
                      "error": "ContractIDNotSpecified",
                      "message": "The field contractID is required when billUsingStripe is set to true."
                    }
                  },
                  "ContractStartDateNotSpecified": {
                    "value": {
                      "error": "ContractStartDateNotSpecified",
                      "message": "The field contractStartDate is required when contractID is specified."
                    }
                  },
                  "InvalidContractStartDate": {
                    "value": {
                      "error": "InvalidContractStartDate",
                      "message": "The date must be in “yyyy-MM-dd” format."
                    }
                  },
                  "InvalidAccountManagerEmail": {
                    "value": {
                      "error": "InvalidAccountManagerEmail",
                      "message": "The accountManagerEmail specified is not a valid email address."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "AccessDenied",
                      "message": "A regular customer is not allowed to make this call."
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "NamespaceExists": {
                    "value": {
                      "error": "NamespaceExists",
                      "message": "The namespace is already taken."
                    }
                  },
                  "ServiceQuotaExists": {
                    "value": {
                      "error": "ServiceQuotaExists",
                      "message": "The customer specified already has an existing service quota."
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "ECP Product Management"
        ],
        "description": "A reseller can use this API to create an ECP serviceQuota for a child customer.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "customerID": {
                    "type": "string",
                    "description": "ID of customer that this serviceQuota is created for. This customerID will be reused as the ID of the new serviceQuota. The customer must have \"ECP\" in its products list before a serviceQuota can be created for the customer, and each customer is allowed to have one serviceQuota only."
                  },
                  "namespace": {
                    "title": "quota.namespace",
                    "type": "string",
                    "description": "The Kubernetes namespace to be created for a customer in underlying ECP Kubernetes clusters (i.e. ECP locations). Allows only digits, lower-case letters and hyphens. Must be unique globally and no more than 63 characters."
                  },
                  "status": {
                    "type": "string",
                    "title": "quota.status",
                    "description": "Status of a serviceQuota, which represents the status of ECP service subscription by a customer. The “trial” status means the customer is using ECP service as a free trial. When the status is set to \"suspended\", any requests from the customer will be rejected by ECP API server. \n\nThis status is related to ECP service only. It doesn’t affect other products subscribed by the customer.",
                    "enum": [
                      "active",
                      "suspended",
                      "trial"
                    ],
                    "default": "suspended"
                  },
                  "trialDeadline": {
                    "type": "string",
                    "title": "quota.trialDeadline",
                    "description": "Date-time in RFC 3339 format indicating when the trial expires, e.g. 2021-07-01T15:00:00Z. Required only when the status is set to “trial”. Ignored otherwise. Must not be a date-time in the past. The trial must not last longer than 90 days after the trial starts.\n\nWhen trialDeadline expires, the status will be set to “suspended” and all existing ECP resources for the customer will be deleted.",
                    "format": "date-time"
                  },
                  "billUsingStripe": {
                    "type": "boolean",
                    "title": "quota.billUsingStripe",
                    "description": "A flag indicating whether this customer will be invoiced using Stripe.",
                    "default": false
                  },
                  "contractID": {
                    "title": "quota.contractID",
                    "type": "string",
                    "description": "ID representing the ECP service contract, used for billing. Required when “billUsingStripe” set to true."
                  },
                  "contractStartDate": {
                    "type": "string",
                    "title": "quota.contractStartDate",
                    "description": "The start date of an ECP service contract. Must be a UTC date in “yyyy-MM-dd” format. Required when “contractID” is provided.",
                    "format": "date"
                  },
                  "accountManagerEmail": {
                    "type": "string",
                    "title": "quota.accountManagerEmail",
                    "description": "Email address of the account manager who manages the customer. The email address specified can be used by the account manager to receive system notifications related to the customer, e.g. in the event of trial expiration, excessive usage and service suspension.",
                    "format": "email"
                  },
                  "allowDeploymentInChina": {
                    "type": "boolean",
                    "title": "quota.allowDeploymentInChina",
                    "description": "Whether a customer is allowed to deploy their applications to ECP locations in mainland China. When this is set to false, the customer will not be allowed to pick mainland China locations or the \"CN\" region to deploy their applications.",
                    "default": false
                  },
                  "description": {
                    "title": "quota.description",
                    "type": "string",
                    "description": "Arbitrary text about a serviceQuota"
                  },
                  "resourceQuotas": {
                    "title": "quota.resourceQuotas",
                    "type": "object",
                    "description": "Global resource quotas limiting the maximum amounts of ECP resources available to a customer across all ECP locations",
                    "properties": {
                      "cpu": {
                        "type": "integer",
                        "description": "Maximum total number of vCPU cores available to a customer across all ECP locations. Measured in \"core\".",
                        "minimum": 1,
                        "maximum": 5000
                      },
                      "memory": {
                        "type": "integer",
                        "description": "Maximum total amount of memory available to a customer across all ECP locations. Measured in \"GB\".",
                        "minimum": 1,
                        "maximum": 10000
                      },
                      "publicIPv4Addresses": {
                        "type": "integer",
                        "description": "Maximum total number of public IPv4 addresses available to a customer across all ECP locations. Must be within the range 0-2,000. 0 means no public IPv4 address is available.",
                        "minimum": 0,
                        "maximum": 2000
                      },
                      "applications": {
                        "type": "integer",
                        "description": "Maximum total number of applications that can be deployed to ECP",
                        "default": 50,
                        "minimum": 1,
                        "maximum": 1000
                      },
                      "pods": {
                        "type": "integer",
                        "description": "Maximum total number of Kubernetes pods that can be deployed to ECP Kubernetes clusters (i.e. ECP locations)",
                        "default": 500,
                        "minimum": 1,
                        "maximum": 10000
                      },
                      "localSSDStorage": {
                        "type": "integer",
                        "description": "Maximum storage capacity of type \"local solid state drive\" available to a customer across all ECP locations. Measured in \"GB\". Default to 0, means no storage capacity is available.",
                        "default": 0,
                        "minimum": 0,
                        "maximum": 20000
                      },
                      "persistSSDStorage": {
                        "type": "integer",
                        "description": "Maximum storage capacity of type \"persist solid state drive\" available to a customer across all ECP locations.  Unlike local SSD storage, data kept in persist SSD storage is replicated across multiple servers for redundancy. Measured in \"GB\". Default to 0, means no storage capacity is available.",
                        "default": 0,
                        "minimum": 0,
                        "maximum": 20000
                      },
                      "tagsInRegistry": {
                        "type": "integer",
                        "description": "Maximum total number of docker image tags that can be pushed to ECP image registry",
                        "default": 50,
                        "minimum": 1,
                        "maximum": 200
                      },
                      "storageInRegistry": {
                        "type": "integer",
                        "description": "Maximum storage capacity available to a customer to store container images in ECP image registry. Measured in GB.",
                        "default": 10,
                        "minimum": 1,
                        "maximum": 1000
                      }
                    },
                    "required": [
                      "cpu",
                      "memory",
                      "publicIPv4Addresses"
                    ]
                  }
                },
                "required": [
                  "customerID",
                  "namespace",
                  "resourceQuotas"
                ]
              },
              "examples": {
                "example-1": {
                  "value": {
                    "customerID": "12345",
                    "namespace": "demo",
                    "status": "suspended",
                    "contractID": "abcdef",
                    "contractStartDate": "2021-01-01",
                    "billUsingStripe": true,
                    "accountManagerEmail": "abc@123.com",
                    "allowDeploymentInChina": false,
                    "description": "this is a demo",
                    "resourceQuotas": {
                      "cpu": 10,
                      "memory": 20,
                      "publicIPv4Addresses": 10,
                      "applications": 5,
                      "pods": 500,
                      "localSSDStorage": 100,
                      "persistSSDStorage": 0,
                      "tagsInRegistry": 50,
                      "storageInRegistry": 10
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ecp/v1/servicequotas/{servicequotaID}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "servicequotaID",
          "in": "path",
          "required": true,
          "description": "ID of a serviceQuota"
        }
      ],
      "get": {
        "summary": "Query a serviceQuota by ID",
        "tags": [
          "ECP Product Management"
        ],
        "responses": {
          "200": {
            "description": "The response contains details of a serviceQuota.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "serviceQuotaID": {
                      "title": "quota.serviceQuotaID",
                      "type": "string",
                      "description": "ID of a serviceQuota. Unless otherwise stated, the ID of the customer that a serviceQuota is created for is reused as the ID of the serviceQuota. "
                    },
                    "customerID": {
                      "title": "quota.customerID",
                      "type": "string",
                      "description": "ID of the customer that a serviceQuota is created for."
                    },
                    "namespace": {
                      "title": "quota.namespace",
                      "type": "string",
                      "description": "The Kubernetes namespace to be created for a customer in underlying ECP Kubernetes clusters (i.e. ECP locations). Allows only digits, lower-case letters and hyphens. Must be unique globally and no more than 63 characters."
                    },
                    "status": {
                      "type": "string",
                      "title": "quota.status",
                      "description": "Status of a serviceQuota, which represents the status of ECP service subscription by a customer. The “trial” status means the customer is using ECP service as a free trial. When the status is set to \"suspended\", any requests from the customer will be rejected by ECP API server. \n\nThis status is related to ECP service only. It doesn’t affect other products subscribed by the customer.",
                      "enum": [
                        "active",
                        "suspended",
                        "trial"
                      ],
                      "default": "suspended"
                    },
                    "trialDeadline": {
                      "type": "string",
                      "title": "quota.trialDeadline",
                      "description": "Date-time in RFC 3339 format indicating when the trial expires, e.g. 2021-07-01T15:00:00Z. Required only when the status is set to “trial”. Ignored otherwise. Must not be a date-time in the past. The trial must not last longer than 90 days after the trial starts.\n\nWhen trialDeadline expires, the status will be set to “suspended” and all existing ECP resources for the customer will be deleted.",
                      "format": "date-time"
                    },
                    "billUsingStripe": {
                      "type": "boolean",
                      "title": "quota.billUsingStripe",
                      "description": "A flag indicating whether this customer will be invoiced using Stripe.",
                      "default": false
                    },
                    "contractID": {
                      "title": "quota.contractID",
                      "type": "string",
                      "description": "ID representing the ECP service contract, used for billing. Required when “billUsingStripe” set to true."
                    },
                    "contractStartDate": {
                      "type": "string",
                      "title": "quota.contractStartDate",
                      "description": "The start date of an ECP service contract. Must be a UTC date in “yyyy-MM-dd” format. Required when “contractID” is provided.",
                      "format": "date"
                    },
                    "allowDeploymentInChina": {
                      "type": "boolean",
                      "title": "quota.allowDeploymentInChina",
                      "description": "Whether a customer is allowed to deploy their applications to ECP locations in mainland China. When this is set to false, the customer will not be allowed to pick mainland China locations or the \"CN\" region to deploy their applications.",
                      "default": false
                    },
                    "accountManagerEmail": {
                      "type": "string",
                      "title": "quota.accountManagerEmail",
                      "description": "Email address of the account manager who manages the customer. The email address specified can be used by the account manager to receive system notifications related to the customer, e.g. in the event of trial expiration, excessive usage and service suspension.",
                      "format": "email"
                    },
                    "description": {
                      "title": "quota.description",
                      "type": "string",
                      "description": "Arbitrary text about a serviceQuota"
                    },
                    "resourceQuotas": {
                      "title": "quota.resourceQuotas",
                      "type": "object",
                      "description": "Global resource quotas limiting the maximum amounts of ECP resources available to a customer across all ECP locations",
                      "properties": {
                        "cpu": {
                          "type": "integer",
                          "description": "Maximum total number of vCPU cores available to a customer across all ECP locations. Measured in \"core\".",
                          "minimum": 1,
                          "maximum": 5000
                        },
                        "memory": {
                          "type": "integer",
                          "description": "Maximum total amount of memory available to a customer across all ECP locations. Measured in \"GB\".",
                          "minimum": 1,
                          "maximum": 10000
                        },
                        "publicIPv4Addresses": {
                          "type": "integer",
                          "description": "Maximum total number of public IPv4 addresses available to a customer across all ECP locations. Must be within the range 0-2,000. 0 means no public IPv4 address is available.",
                          "minimum": 0,
                          "maximum": 2000
                        },
                        "applications": {
                          "type": "integer",
                          "description": "Maximum total number of applications that can be deployed to ECP",
                          "default": 50,
                          "minimum": 1,
                          "maximum": 1000
                        },
                        "pods": {
                          "type": "integer",
                          "description": "Maximum total number of Kubernetes pods that can be deployed to ECP Kubernetes clusters (i.e ECP locations)",
                          "default": 500,
                          "minimum": 1,
                          "maximum": 10000
                        },
                        "localSSDStorage": {
                          "type": "integer",
                          "description": "Maximum storage capacity of type \"local solid state drive\" available to a customer across all ECP locations. Measured in \"GB\". Default to 0, means no storage capacity is available.",
                          "default": 0,
                          "minimum": 0,
                          "maximum": 20000
                        },
                        "persistSSDStorage": {
                          "type": "integer",
                          "description": "Maximum storage capacity of type \"persist solid state drive\" available to a customer across all ECP locations.  Unlike local SSD storage, data kept in persist SSD storage is replicated across multiple servers for redundancy. Measured in \"GB\". Default to 0, means no storage capacity is available.",
                          "default": 0,
                          "minimum": 0,
                          "maximum": 20000
                        },
                        "tagsInRegistry": {
                          "type": "integer",
                          "description": "Maximum total number of docker image tags that can be pushed to ECP image registry",
                          "default": 50,
                          "minimum": 1,
                          "maximum": 200
                        },
                        "storageInRegistry": {
                          "type": "integer",
                          "description": "Maximum storage capacity available to a customer to store container images in ECP image registry. Measured in GB.",
                          "default": 10,
                          "minimum": 1,
                          "maximum": 1000
                        }
                      }
                    },
                    "creationTime": {
                      "title": "",
                      "format": "date-time",
                      "type": "string",
                      "description": "Datetime when the resource is created"
                    },
                    "lastUpdateTime": {
                      "type": "string",
                      "title": "",
                      "format": "date-time",
                      "description": "Datetime when the resource is last updated"
                    },
                    "suspensionDate": {
                      "type": "string",
                      "title": "quota.suspensionDate",
                      "description": "Datetime indicating when the status is changed from “trial” or “active” to “suspended‘. This field is updated by API server when ECP service is suspended for the customer. It cannot be set via API calls.",
                      "format": "date-time"
                    },
                    "upgradeDate": {
                      "type": "string",
                      "title": "quota.upgradeDate",
                      "description": "Datetime indicating when the status is changed from “trial” to “active”. This field is updated by API server when the customer as a free trial upgrades to a paid customer. It cannot be set via API calls.",
                      "format": "date-time"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "serviceQuotaID": "10003693",
                      "customerID": "10003693",
                      "namespace": "demo",
                      "status": "active",
                      "contractID": "12345",
                      "contractStartDate": "2020-10-16",
                      "billUsingStripe": true,
                      "description": "this is a demo",
                      "resourceQuotas": {
                        "cpu": 30,
                        "memory": 100,
                        "publicIPv4Addresses": 50,
                        "applications": 20,
                        "pods": 200,
                        "localSSDStorage": 1000,
                        "persistSSDStorage": 1000,
                        "tagsInRegistry": 50,
                        "storageInRegistry": 10
                      },
                      "creationTime": "2020-10-16T07:04:43Z",
                      "lastUpdateTime": "2020-10-16T07:04:43Z",
                      "allowDeploymentInChina": false,
                      "accountManagerEmail": "abc@123.com"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "InvalidServiceQuotaID",
                      "message": "The serviceQuotaID given does not exist or is not for a child customer of the caller."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "operationId": "get-servicequota-by-ID",
        "description": "This API allows a reseller to get a child customer's serviceQuota by referencing its serviceQuota ID."
      },
      "patch": {
        "summary": "Update a serviceQuota by ID",
        "operationId": "patch-servicequota-by-ID",
        "responses": {
          "201": {
            "description": "The response indicates the serviceQuota is successfully updated.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "serviceQuotaID": {
                      "title": "quota.serviceQuotaID",
                      "type": "string",
                      "description": "ID of a serviceQuota. Unless otherwise stated, the ID of the customer that a serviceQuota is created for is reused as the ID of the serviceQuota. "
                    },
                    "customerID": {
                      "title": "quota.customerID",
                      "type": "string",
                      "description": "ID of the customer that a serviceQuota is created for."
                    },
                    "namespace": {
                      "title": "quota.namespace",
                      "type": "string",
                      "description": "The Kubernetes namespace to be created for a customer in underlying ECP Kubernetes clusters (i.e. ECP locations). Allows only digits, lower-case letters and hyphens. Must be unique globally and no more than 63 characters."
                    },
                    "status": {
                      "type": "string",
                      "title": "quota.status",
                      "description": "Status of a serviceQuota, which represents the status of ECP service subscription by a customer. The “trial” status means the customer is using ECP service as a free trial. When the status is set to \"suspended\", any requests from the customer will be rejected by ECP API server. \n\nThis status is related to ECP service only. It doesn’t affect other products subscribed by the customer.",
                      "enum": [
                        "active",
                        "suspended",
                        "trial"
                      ],
                      "default": "suspended"
                    },
                    "trialDeadline": {
                      "type": "string",
                      "title": "quota.trialDeadline",
                      "description": "Date-time in RFC 3339 format indicating when the trial expires, e.g. 2021-07-01T15:00:00Z. Required only when the status is set to “trial”. Ignored otherwise. Must not be a date-time in the past. The trial must not last longer than 90 days after the trial starts.\n\nWhen trialDeadline expires, the status will be set to “suspended” and all existing ECP resources for the customer will be deleted.",
                      "format": "date-time"
                    },
                    "billUsingStripe": {
                      "type": "boolean",
                      "title": "quota.billUsingStripe",
                      "description": "A flag indicating whether this customer will be invoiced using Stripe.",
                      "default": false
                    },
                    "contractID": {
                      "title": "quota.contractID",
                      "type": "string",
                      "description": "ID representing the ECP service contract, used for billing. Required when “billUsingStripe” set to true."
                    },
                    "contractStartDate": {
                      "type": "string",
                      "title": "quota.contractStartDate",
                      "description": "The start date of an ECP service contract. Must be a UTC date in “yyyy-MM-dd” format. Required when “contractID” is provided.",
                      "format": "date"
                    },
                    "allowDeploymentInChina": {
                      "type": "boolean",
                      "title": "quota.allowDeploymentInChina",
                      "description": "Whether a customer is allowed to deploy their applications to ECP locations in mainland China. When this is set to false, the customer will not be allowed to pick mainland China locations or the \"CN\" region to deploy their applications.",
                      "default": false
                    },
                    "accountManagerEmail": {
                      "type": "string",
                      "title": "quota.accountManagerEmail",
                      "description": "Email address of the account manager who manages the customer. The email address specified can be used by the account manager to receive system notifications related to the customer, e.g. in the event of trial expiration, excessive usage and service suspension.",
                      "format": "email"
                    },
                    "description": {
                      "title": "quota.description",
                      "type": "string",
                      "description": "Arbitrary text about a serviceQuota"
                    },
                    "resourceQuotas": {
                      "title": "quota.resourceQuotas",
                      "type": "object",
                      "description": "Global resource quotas limiting the maximum amounts of ECP resources available to a customer across all ECP locations",
                      "properties": {
                        "cpu": {
                          "type": "integer",
                          "description": "Maximum total number of vCPU cores available to a customer across all ECP locations. Measured in \"core\".",
                          "minimum": 1,
                          "maximum": 5000
                        },
                        "memory": {
                          "type": "integer",
                          "description": "Maximum total amount of memory available to a customer across all ECP locations. Measured in \"GB\".",
                          "minimum": 1,
                          "maximum": 10000
                        },
                        "publicIPv4Addresses": {
                          "type": "integer",
                          "description": "Maximum total number of public IPv4 addresses available to a customer across all ECP locations. Must be within the range 0-2,000. 0 means no public IPv4 address is available.",
                          "minimum": 0,
                          "maximum": 2000
                        },
                        "applications": {
                          "type": "integer",
                          "description": "Maximum total number of applications that can be deployed to ECP",
                          "default": 50,
                          "minimum": 1,
                          "maximum": 1000
                        },
                        "pods": {
                          "type": "integer",
                          "description": "Maximum total number of Kubernetes pods that can be deployed to ECP Kubernetes clusters (i.e ECP locations)",
                          "default": 500,
                          "minimum": 1,
                          "maximum": 10000
                        },
                        "localSSDStorage": {
                          "type": "integer",
                          "description": "Maximum storage capacity of type \"local solid state drive\" available to a customer across all ECP locations. Measured in \"GB\". Default to 0, means no storage capacity is available.",
                          "default": 0,
                          "minimum": 0,
                          "maximum": 20000
                        },
                        "persistSSDStorage": {
                          "type": "integer",
                          "description": "Maximum storage capacity of type \"persist solid state drive\" available to a customer across all ECP locations.  Unlike local SSD storage, data kept in persist SSD storage is replicated across multiple servers for redundancy. Measured in \"GB\". Default to 0, means no storage capacity is available.",
                          "default": 0,
                          "minimum": 0,
                          "maximum": 20000
                        },
                        "tagsInRegistry": {
                          "type": "integer",
                          "description": "Maximum total number of docker image tags that can be pushed to ECP image registry",
                          "default": 50,
                          "minimum": 1,
                          "maximum": 200
                        },
                        "storageInRegistry": {
                          "type": "integer",
                          "description": "Maximum storage capacity available to a customer to store container images in ECP image registry. Measured in GB.",
                          "default": 10,
                          "minimum": 1,
                          "maximum": 1000
                        }
                      }
                    },
                    "creationTime": {
                      "title": "",
                      "format": "date-time",
                      "type": "string",
                      "description": "Datetime when the resource is created"
                    },
                    "lastUpdateTime": {
                      "type": "string",
                      "title": "",
                      "format": "date-time",
                      "description": "Datetime when the resource is last updated"
                    },
                    "suspensionDate": {
                      "type": "string",
                      "title": "quota.suspensionDate",
                      "description": "Datetime indicating when the status is changed from “trial” or “active” to “suspended‘. This field is updated by API server when ECP service is suspended for the customer. It cannot be set via API calls.",
                      "format": "date-time"
                    },
                    "upgradeDate": {
                      "type": "string",
                      "title": "quota.upgradeDate",
                      "description": "Datetime indicating when the status is changed from “trial” to “active”. This field is updated by API server when the customer as a free trial upgrades to a paid customer. It cannot be set via API calls.",
                      "format": "date-time"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "serviceQuotaID": "10003693",
                      "customerID": "10003693",
                      "namespace": "demo",
                      "status": "active",
                      "contractID": "12345",
                      "contractStartDate": "2020-10-16",
                      "billUsingStripe": true,
                      "description": "this is a demo",
                      "resourceQuotas": {
                        "cpu": 30,
                        "memory": 100,
                        "publicIPv4Addresses": 50,
                        "applications": 20,
                        "pods": 200,
                        "localSSDStorage": 1000,
                        "persistSSDStorage": 1000,
                        "tagsInRegistry": 50,
                        "storageInRegistry": 10
                      },
                      "creationTime": "2020-10-16T07:04:43Z",
                      "lastUpdateTime": "2020-10-16T07:04:43Z",
                      "allowDeploymentInChina": false,
                      "accountManagerEmail": "abc@123.com"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Refer to response body for details.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "InvalidStatus": {
                    "value": {
                      "error": "InvalidStatus",
                      "message": "The status specified is invalid. Must be one of \"trial\", 'suspended' and 'active'"
                    }
                  },
                  "InvalidAllowDeploymentInChina": {
                    "value": {
                      "error": "InvalidAllowDeploymentInChina",
                      "message": "The allowDeploymentInChina specified is invalid, must be true or false."
                    }
                  },
                  "FieldValueTooLong": {
                    "value": {
                      "error": "FieldValueTooLong",
                      "message": "The {field} must be not more than xxx characters."
                    }
                  },
                  "RequiredFieldMissing": {
                    "value": {
                      "error": "RequiredFieldMissing",
                      "message": "The field {field} is required."
                    }
                  },
                  "InvalidResourceQuota": {
                    "value": {
                      "error": "InvalidResourceQuota",
                      "message": "The resource quota {quota} specified is invalid. Must be an integer within the range {range}."
                    }
                  },
                  "UpdateCustomerIDNotAllowed": {
                    "value": {
                      "error": "UpdateCustomerIDNotAllowed",
                      "message": "The customerID cannot be updated."
                    }
                  },
                  "UpdateNamespaceNotAllowed": {
                    "value": {
                      "error": "UpdateNamespaceNotAllowed",
                      "message": "The namespace cannot be updated."
                    }
                  },
                  "InvalidTrialDeadline": {
                    "value": {
                      "error": "InvalidTrialDeadline",
                      "message": "Invalid parameter trialDeadline. {trialDeadline} is not a valid RFC3339 timestamp. The timestamp should be in \"yyyy-MM-dd'T'HH:mm:ss'Z'\" format."
                    }
                  },
                  "InvalidTrialDeadline1": {
                    "value": {
                      "error": "InvalidTrialDeadline",
                      "message": "The trialDeadline specified cannot be a time in the past."
                    }
                  },
                  "InvalidTrialDeadline2": {
                    "value": {
                      "error": "InvalidTrialDeadline",
                      "message": "The trial period cannot be longer than 90 days."
                    }
                  },
                  "TrialDeadlineNotSpecified": {
                    "value": {
                      "error": "TrialDeadlineNotSpecified",
                      "message": "The field trialDeadline is required when customer status is set to “trial”."
                    }
                  },
                  "InvalidBillUsingStripe": {
                    "value": {
                      "error": "InvalidBillUsingStripe",
                      "message": "The billUsingStripe specified is invalid, must be true or false."
                    }
                  },
                  "ContractIDNotSpecified": {
                    "value": {
                      "error": "ContractIDNotSpecified",
                      "message": "The field contractID is required when billUsingStripe is set to true."
                    }
                  },
                  "ContractStartDateNotSpecified": {
                    "value": {
                      "error": "ContractStartDateNotSpecified",
                      "message": "The field contractStartDate is required when contractID is specified."
                    }
                  },
                  "InvalidContractStartDate": {
                    "value": {
                      "error": "InvalidContractStartDate",
                      "message": "The date must be in “yyyy-MM-dd” format."
                    }
                  },
                  "InvalidAccountManagerEmail": {
                    "value": {
                      "error": "InvalidAccountManagerEmail",
                      "message": "The accountManagerEmail specified is not a valid email address."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "AccessDenied",
                      "message": "A regular customer is not allowed to make this call."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "InvalidServiceQuotaID",
                      "message": "The serviceQuotaID given does not exist or is not for a child customer of the caller."
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "ECP Product Management"
        ],
        "description": "This API allows a reseller to update a child customer's serviceQuota by referencing its serviceQuota ID. The \"customerID\" and \"namespace\" fields cannot be updated.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "title": "quota.status",
                    "description": "Status of a serviceQuota, which represents the status of ECP service subscription by a customer. The “trial” status means the customer is using ECP service as a free trial. When the status is set to \"suspended\", any requests from the customer will be rejected by ECP API server. \n\nThis status is related to ECP service only. It doesn’t affect other products subscribed by the customer.",
                    "enum": [
                      "active",
                      "suspended",
                      "trial"
                    ],
                    "default": "suspended"
                  },
                  "trialDeadline": {
                    "type": "string",
                    "title": "quota.trialDeadline",
                    "description": "Date-time in RFC 3339 format indicating when the trial expires, e.g. 2021-07-01T15:00:00Z. Required only when the status is set to “trial”. Ignored otherwise. Must not be a date-time in the past. The trial must not last longer than 90 days after the trial starts.\n\nWhen trialDeadline expires, the status will be set to “suspended” and all existing ECP resources for the customer will be deleted.",
                    "format": "date-time"
                  },
                  "billUsingStripe": {
                    "type": "boolean",
                    "title": "quota.billUsingStripe",
                    "description": "A flag indicating whether this customer will be invoiced using Stripe.",
                    "default": false
                  },
                  "contractID": {
                    "title": "quota.contractID",
                    "type": "string",
                    "description": "ID representing the ECP service contract, used for billing. Required when “billUsingStripe” set to true."
                  },
                  "contractStartDate": {
                    "type": "string",
                    "title": "quota.contractStartDate",
                    "description": "The start date of an ECP service contract. Must be a UTC date in “yyyy-MM-dd” format. Required when “contractID” is provided.",
                    "format": "date"
                  },
                  "accountManagerEmail": {
                    "type": "string",
                    "title": "quota.accountManagerEmail",
                    "description": "Email address of the account manager who manages the customer. The email address specified can be used by the account manager to receive system notifications related to the customer, e.g. in the event of trial expiration, excessive usage and service suspension.",
                    "format": "email"
                  },
                  "allowDeploymentInChina": {
                    "type": "boolean",
                    "title": "quota.allowDeploymentInChina",
                    "description": "Whether a customer is allowed to deploy their applications to ECP locations in mainland China. When this is set to false, the customer will not be allowed to pick mainland China locations or the \"CN\" region to deploy their applications.",
                    "default": false
                  },
                  "description": {
                    "title": "quota.description",
                    "type": "string",
                    "description": "Arbitrary text about a serviceQuota"
                  },
                  "resourceQuotas": {
                    "title": "quota.resourceQuotas",
                    "type": "object",
                    "description": "Global resource quotas limiting the maximum amounts of ECP resources available to a customer across all ECP locations",
                    "properties": {
                      "cpu": {
                        "type": "integer",
                        "description": "Maximum total number of vCPU cores available to a customer across all ECP locations. Measured in \"core\".",
                        "minimum": 1,
                        "maximum": 5000
                      },
                      "memory": {
                        "type": "integer",
                        "description": "Maximum total amount of memory available to a customer across all ECP locations. Measured in \"GB\".",
                        "minimum": 1,
                        "maximum": 10000
                      },
                      "publicIPv4Addresses": {
                        "type": "integer",
                        "description": "Maximum total number of public IPv4 addresses available to a customer across all ECP locations. Must be within the range 0-2,000. 0 means no public IPv4 address is available.",
                        "minimum": 0,
                        "maximum": 2000
                      },
                      "applications": {
                        "type": "integer",
                        "description": "Maximum total number of applications that can be deployed to ECP",
                        "default": 50,
                        "minimum": 1,
                        "maximum": 1000
                      },
                      "pods": {
                        "type": "integer",
                        "description": "Maximum total number of Kubernetes pods that can be deployed to ECP Kubernetes clusters (i.e ECP locations)",
                        "default": 500,
                        "minimum": 1,
                        "maximum": 10000
                      },
                      "localSSDStorage": {
                        "type": "integer",
                        "description": "Maximum storage capacity of type \"local solid state drive\" available to a customer across all ECP locations. Measured in \"GB\". Default to 0, means no storage capacity is available.",
                        "default": 0,
                        "minimum": 0,
                        "maximum": 20000
                      },
                      "persistSSDStorage": {
                        "type": "integer",
                        "description": "Maximum storage capacity of type \"persist solid state drive\" available to a customer across all ECP locations.  Unlike local SSD storage, data kept in persist SSD storage is replicated across multiple servers for redundancy. Measured in \"GB\". Default to 0, means no storage capacity is available.",
                        "default": 0,
                        "minimum": 0,
                        "maximum": 20000
                      },
                      "tagsInRegistry": {
                        "type": "integer",
                        "description": "Maximum total number of docker image tags that can be pushed to ECP image registry",
                        "default": 50,
                        "minimum": 1,
                        "maximum": 200
                      },
                      "storageInRegistry": {
                        "type": "integer",
                        "description": "Maximum storage capacity available to a customer to store container images in ECP image registry. Measured in GB.",
                        "default": 10,
                        "minimum": 1,
                        "maximum": 1000
                      }
                    }
                  }
                }
              },
              "examples": {
                "example-1": {
                  "value": {
                    "status": "active"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a serviceQuota by ID",
        "operationId": "delete-servicequota-by-ID",
        "responses": {
          "204": {
            "description": "This response is returned if the serviceQuota is successfully deleted.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Refer to response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "HasResource": {
                    "value": {
                      "error": "HasResource",
                      "message": "This customer still has some {ECP resources}. These resources must be removed before the service quota can be deleted."
                    }
                  },
                  "InvalidServiceQuotaStatus": {
                    "value": {
                      "error": "InvalidServiceQuotaStatus",
                      "message": "A serviceQuota not in “suspended” status cannot be deleted."
                    }
                  },
                  "SuspensionDateTooClose": {
                    "value": {
                      "error": "SuspensionDateTooClose",
                      "message": "A serviceQuota that was suspended in the last 90 days cannot be deleted."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "AccessDenied",
                      "message": "A regular customer is not allowed to make this call."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "InvalidServiceQuotaID",
                      "message": "The serviceQuotaID given does not exist or is not for a child customer of the caller."
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "ECP Product Management"
        ],
        "description": "This API allows a reseller to delete a child customer's serviceQuota by referencing its serviceQuota ID. The deletion will only work if the customer does not have any existing ECP resources."
      }
    },
    "/ecp/v1/servicequotas/customer/{customerID}": {
      "parameters": [
        {
          "name": "customerID",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "ID of the customer that a serviceQuota is created for"
        }
      ],
      "get": {
        "summary": "Query the serviceQuota for a customer",
        "tags": [
          "ECP Product Management"
        ],
        "responses": {
          "200": {
            "description": "The response contains details of a serviceQuota.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "serviceQuotaID": {
                      "title": "quota.serviceQuotaID",
                      "type": "string",
                      "description": "ID of a serviceQuota. Unless otherwise stated, the ID of the customer that a serviceQuota is created for is reused as the ID of the serviceQuota. "
                    },
                    "customerID": {
                      "title": "quota.customerID",
                      "type": "string",
                      "description": "ID of the customer that a serviceQuota is created for."
                    },
                    "namespace": {
                      "title": "quota.namespace",
                      "type": "string",
                      "description": "The Kubernetes namespace to be created for a customer in underlying ECP Kubernetes clusters (i.e. ECP locations). Allows only digits, lower-case letters and hyphens. Must be unique globally and no more than 63 characters."
                    },
                    "status": {
                      "type": "string",
                      "title": "quota.status",
                      "description": "Status of a serviceQuota, which represents the status of ECP service subscription by a customer. The “trial” status means the customer is using ECP service as a free trial. When the status is set to \"suspended\", any requests from the customer will be rejected by ECP API server. \n\nThis status is related to ECP service only. It doesn’t affect other products subscribed by the customer.",
                      "enum": [
                        "active",
                        "suspended",
                        "trial"
                      ],
                      "default": "suspended"
                    },
                    "trialDeadline": {
                      "type": "string",
                      "title": "quota.trialDeadline",
                      "description": "Date-time in RFC 3339 format indicating when the trial expires, e.g. 2021-07-01T15:00:00Z. Required only when the status is set to “trial”. Ignored otherwise. Must not be a date-time in the past. The trial must not last longer than 90 days after the trial starts.\n\nWhen trialDeadline expires, the status will be set to “suspended” and all existing ECP resources for the customer will be deleted.",
                      "format": "date-time"
                    },
                    "billUsingStripe": {
                      "type": "boolean",
                      "title": "quota.billUsingStripe",
                      "description": "A flag indicating whether this customer will be invoiced using Stripe.",
                      "default": false
                    },
                    "contractID": {
                      "title": "quota.contractID",
                      "type": "string",
                      "description": "ID representing the ECP service contract, used for billing. Required when “billUsingStripe” set to true."
                    },
                    "contractStartDate": {
                      "type": "string",
                      "title": "quota.contractStartDate",
                      "description": "The start date of an ECP service contract. Must be a UTC date in “yyyy-MM-dd” format. Required when “contractID” is provided.",
                      "format": "date"
                    },
                    "allowDeploymentInChina": {
                      "type": "boolean",
                      "title": "quota.allowDeploymentInChina",
                      "description": "Whether a customer is allowed to deploy their applications to ECP locations in mainland China. When this is set to false, the customer will not be allowed to pick mainland China locations or the \"CN\" region to deploy their applications.",
                      "default": false
                    },
                    "accountManagerEmail": {
                      "type": "string",
                      "title": "quota.accountManagerEmail",
                      "description": "Email address of the account manager who manages the customer. The email address specified can be used by the account manager to receive system notifications related to the customer, e.g. in the event of trial expiration, excessive usage and service suspension.",
                      "format": "email"
                    },
                    "description": {
                      "title": "quota.description",
                      "type": "string",
                      "description": "Arbitrary text about a serviceQuota"
                    },
                    "resourceQuotas": {
                      "title": "quota.resourceQuotas",
                      "type": "object",
                      "description": "Global resource quotas limiting the maximum amounts of ECP resources available to a customer across all ECP locations",
                      "properties": {
                        "cpu": {
                          "type": "integer",
                          "description": "Maximum total number of vCPU cores available to a customer across all ECP locations. Measured in \"core\".",
                          "minimum": 1,
                          "maximum": 5000
                        },
                        "memory": {
                          "type": "integer",
                          "description": "Maximum total amount of memory available to a customer across all ECP locations. Measured in \"GB\".",
                          "minimum": 1,
                          "maximum": 10000
                        },
                        "publicIPv4Addresses": {
                          "type": "integer",
                          "description": "Maximum total number of public IPv4 addresses available to a customer across all ECP locations. Must be within the range 0-2,000. 0 means no public IPv4 address is available.",
                          "minimum": 0,
                          "maximum": 2000
                        },
                        "applications": {
                          "type": "integer",
                          "description": "Maximum total number of applications that can be deployed to ECP",
                          "default": 50,
                          "minimum": 1,
                          "maximum": 1000
                        },
                        "pods": {
                          "type": "integer",
                          "description": "Maximum total number of Kubernetes pods that can be deployed to ECP Kubernetes clusters (i.e ECP locations)",
                          "default": 500,
                          "minimum": 1,
                          "maximum": 10000
                        },
                        "localSSDStorage": {
                          "type": "integer",
                          "description": "Maximum storage capacity of type \"local solid state drive\" available to a customer across all ECP locations. Measured in \"GB\". Default to 0, means no storage capacity is available.",
                          "default": 0,
                          "minimum": 0,
                          "maximum": 20000
                        },
                        "persistSSDStorage": {
                          "type": "integer",
                          "description": "Maximum storage capacity of type \"persist solid state drive\" available to a customer across all ECP locations.  Unlike local SSD storage, data kept in persist SSD storage is replicated across multiple servers for redundancy. Measured in \"GB\". Default to 0, means no storage capacity is available.",
                          "default": 0,
                          "minimum": 0,
                          "maximum": 20000
                        },
                        "tagsInRegistry": {
                          "type": "integer",
                          "description": "Maximum total number of docker image tags that can be pushed to ECP image registry",
                          "default": 50,
                          "minimum": 1,
                          "maximum": 200
                        },
                        "storageInRegistry": {
                          "type": "integer",
                          "description": "Maximum storage capacity available to a customer to store container images in ECP image registry. Measured in GB.",
                          "default": 10,
                          "minimum": 1,
                          "maximum": 1000
                        }
                      }
                    },
                    "creationTime": {
                      "title": "",
                      "format": "date-time",
                      "type": "string",
                      "description": "Datetime when the resource is created"
                    },
                    "lastUpdateTime": {
                      "type": "string",
                      "title": "",
                      "format": "date-time",
                      "description": "Datetime when the resource is last updated"
                    },
                    "suspensionDate": {
                      "type": "string",
                      "title": "quota.suspensionDate",
                      "description": "Datetime indicating when the status is changed from “trial” or “active” to “suspended‘. This field is updated by API server when ECP service is suspended for the customer. It cannot be set via API calls.",
                      "format": "date-time"
                    },
                    "upgradeDate": {
                      "type": "string",
                      "title": "quota.upgradeDate",
                      "description": "Datetime indicating when the status is changed from “trial” to “active”. This field is updated by API server when the customer as a free trial upgrades to a paid customer. It cannot be set via API calls.",
                      "format": "date-time"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "serviceQuotaID": "10003693",
                      "customerID": "10003693",
                      "namespace": "demo",
                      "status": "active",
                      "contractID": "12345",
                      "contractStartDate": "2020-10-16",
                      "billUsingStripe": true,
                      "description": "this is a demo",
                      "resourceQuotas": {
                        "cpu": 30,
                        "memory": 100,
                        "publicIPv4Addresses": 50,
                        "applications": 20,
                        "pods": 200,
                        "localSSDStorage": 1000,
                        "persistSSDStorage": 1000,
                        "tagsInRegistry": 50,
                        "storageInRegistry": 10
                      },
                      "creationTime": "2020-10-16T07:04:43Z",
                      "lastUpdateTime": "2020-10-16T07:04:43Z",
                      "allowDeploymentInChina": false,
                      "accountManagerEmail": "abc@123.com"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "InvalidCustomerID",
                      "message": "The customerID given does not exist or the caller does not have permission to access it."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "operationId": "get-servicequota-by-customerID",
        "description": "Get the serviceQuota for a customer by passing ID of the customer. The \"customerID\" param can be \"me\" to indicate the caller itself."
      },
      "patch": {
        "summary": "Update the serviceQuota for a customer",
        "operationId": "patch-servicequota-by-customerID",
        "responses": {
          "201": {
            "description": "The response indicates the serviceQuota is successfully updated.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "serviceQuotaID": {
                      "title": "quota.serviceQuotaID",
                      "type": "string",
                      "description": "ID of a serviceQuota. Unless otherwise stated, the ID of the customer that a serviceQuota is created for is reused as the ID of the serviceQuota. "
                    },
                    "customerID": {
                      "title": "quota.customerID",
                      "type": "string",
                      "description": "ID of the customer that a serviceQuota is created for."
                    },
                    "namespace": {
                      "title": "quota.namespace",
                      "type": "string",
                      "description": "The Kubernetes namespace to be created for a customer in underlying ECP Kubernetes clusters (i.e. ECP locations). Allows only digits, lower-case letters and hyphens. Must be unique globally and no more than 63 characters."
                    },
                    "status": {
                      "type": "string",
                      "title": "quota.status",
                      "description": "Status of a serviceQuota, which represents the status of ECP service subscription by a customer. The “trial” status means the customer is using ECP service as a free trial. When the status is set to \"suspended\", any requests from the customer will be rejected by ECP API server. \n\nThis status is related to ECP service only. It doesn’t affect other products subscribed by the customer.",
                      "enum": [
                        "active",
                        "suspended",
                        "trial"
                      ],
                      "default": "suspended"
                    },
                    "trialDeadline": {
                      "type": "string",
                      "title": "quota.trialDeadline",
                      "description": "Date-time in RFC 3339 format indicating when the trial expires, e.g. 2021-07-01T15:00:00Z. Required only when the status is set to “trial”. Ignored otherwise. Must not be a date-time in the past. The trial must not last longer than 90 days after the trial starts.\n\nWhen trialDeadline expires, the status will be set to “suspended” and all existing ECP resources for the customer will be deleted.",
                      "format": "date-time"
                    },
                    "billUsingStripe": {
                      "type": "boolean",
                      "title": "quota.billUsingStripe",
                      "description": "A flag indicating whether this customer will be invoiced using Stripe.",
                      "default": false
                    },
                    "contractID": {
                      "title": "quota.contractID",
                      "type": "string",
                      "description": "ID representing the ECP service contract, used for billing. Required when “billUsingStripe” set to true."
                    },
                    "contractStartDate": {
                      "type": "string",
                      "title": "quota.contractStartDate",
                      "description": "The start date of an ECP service contract. Must be a UTC date in “yyyy-MM-dd” format. Required when “contractID” is provided.",
                      "format": "date"
                    },
                    "allowDeploymentInChina": {
                      "type": "boolean",
                      "title": "quota.allowDeploymentInChina",
                      "description": "Whether a customer is allowed to deploy their applications to ECP locations in mainland China. When this is set to false, the customer will not be allowed to pick mainland China locations or the \"CN\" region to deploy their applications.",
                      "default": false
                    },
                    "accountManagerEmail": {
                      "type": "string",
                      "title": "quota.accountManagerEmail",
                      "description": "Email address of the account manager who manages the customer. The email address specified can be used by the account manager to receive system notifications related to the customer, e.g. in the event of trial expiration, excessive usage and service suspension.",
                      "format": "email"
                    },
                    "description": {
                      "title": "quota.description",
                      "type": "string",
                      "description": "Arbitrary text about a serviceQuota"
                    },
                    "resourceQuotas": {
                      "title": "quota.resourceQuotas",
                      "type": "object",
                      "description": "Global resource quotas limiting the maximum amounts of ECP resources available to a customer across all ECP locations",
                      "properties": {
                        "cpu": {
                          "type": "integer",
                          "description": "Maximum total number of vCPU cores available to a customer across all ECP locations. Measured in \"core\".",
                          "minimum": 1,
                          "maximum": 5000
                        },
                        "memory": {
                          "type": "integer",
                          "description": "Maximum total amount of memory available to a customer across all ECP locations. Measured in \"GB\".",
                          "minimum": 1,
                          "maximum": 10000
                        },
                        "publicIPv4Addresses": {
                          "type": "integer",
                          "description": "Maximum total number of public IPv4 addresses available to a customer across all ECP locations. Must be within the range 0-2,000. 0 means no public IPv4 address is available.",
                          "minimum": 0,
                          "maximum": 2000
                        },
                        "applications": {
                          "type": "integer",
                          "description": "Maximum total number of applications that can be deployed to ECP",
                          "default": 50,
                          "minimum": 1,
                          "maximum": 1000
                        },
                        "pods": {
                          "type": "integer",
                          "description": "Maximum total number of Kubernetes pods that can be deployed to ECP Kubernetes clusters (i.e ECP locations)",
                          "default": 500,
                          "minimum": 1,
                          "maximum": 10000
                        },
                        "localSSDStorage": {
                          "type": "integer",
                          "description": "Maximum storage capacity of type \"local solid state drive\" available to a customer across all ECP locations. Measured in \"GB\". Default to 0, means no storage capacity is available.",
                          "default": 0,
                          "minimum": 0,
                          "maximum": 20000
                        },
                        "persistSSDStorage": {
                          "type": "integer",
                          "description": "Maximum storage capacity of type \"persist solid state drive\" available to a customer across all ECP locations.  Unlike local SSD storage, data kept in persist SSD storage is replicated across multiple servers for redundancy. Measured in \"GB\". Default to 0, means no storage capacity is available.",
                          "default": 0,
                          "minimum": 0,
                          "maximum": 20000
                        },
                        "tagsInRegistry": {
                          "type": "integer",
                          "description": "Maximum total number of docker image tags that can be pushed to ECP image registry",
                          "default": 50,
                          "minimum": 1,
                          "maximum": 200
                        },
                        "storageInRegistry": {
                          "type": "integer",
                          "description": "Maximum storage capacity available to a customer to store container images in ECP image registry. Measured in GB.",
                          "default": 10,
                          "minimum": 1,
                          "maximum": 1000
                        }
                      }
                    },
                    "creationTime": {
                      "title": "",
                      "format": "date-time",
                      "type": "string",
                      "description": "Datetime when the resource is created"
                    },
                    "lastUpdateTime": {
                      "type": "string",
                      "title": "",
                      "format": "date-time",
                      "description": "Datetime when the resource is last updated"
                    },
                    "suspensionDate": {
                      "type": "string",
                      "title": "quota.suspensionDate",
                      "description": "Datetime indicating when the status is changed from “trial” or “active” to “suspended‘. This field is updated by API server when ECP service is suspended for the customer. It cannot be set via API calls.",
                      "format": "date-time"
                    },
                    "upgradeDate": {
                      "type": "string",
                      "title": "quota.upgradeDate",
                      "description": "Datetime indicating when the status is changed from “trial” to “active”. This field is updated by API server when the customer as a free trial upgrades to a paid customer. It cannot be set via API calls.",
                      "format": "date-time"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "serviceQuotaID": "10003693",
                      "customerID": "10003693",
                      "namespace": "demo",
                      "status": "active",
                      "contractID": "12345",
                      "contractStartDate": "2020-10-16",
                      "billUsingStripe": true,
                      "description": "this is a demo",
                      "resourceQuotas": {
                        "cpu": 30,
                        "memory": 100,
                        "publicIPv4Addresses": 50,
                        "applications": 20,
                        "pods": 200,
                        "localSSDStorage": 1000,
                        "persistSSDStorage": 1000,
                        "tagsInRegistry": 50,
                        "storageInRegistry": 10
                      },
                      "creationTime": "2020-10-16T07:04:43Z",
                      "lastUpdateTime": "2020-10-16T07:04:43Z",
                      "allowDeploymentInChina": false,
                      "accountManagerEmail": "abc@123.com"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Refer to response body for details.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "InvalidStatus": {
                    "value": {
                      "error": "InvalidStatus",
                      "message": "The status specified is invalid. Must be one of \"trial\", 'suspended' and 'active'"
                    }
                  },
                  "InvalidAllowDeploymentInChina": {
                    "value": {
                      "error": "InvalidAllowDeploymentInChina",
                      "message": "The allowDeploymentInChina specified is invalid, must be true or false."
                    }
                  },
                  "FieldValueTooLong": {
                    "value": {
                      "error": "FieldValueTooLong",
                      "message": "The {field} must be not more than xxx characters."
                    }
                  },
                  "RequiredFieldMissing": {
                    "value": {
                      "error": "RequiredFieldMissing",
                      "message": "The field {field} is required."
                    }
                  },
                  "InvalidResourceQuota": {
                    "value": {
                      "error": "InvalidResourceQuota",
                      "message": "The resource quota {quota} specified is invalid. Must be an integer within the range {range}."
                    }
                  },
                  "UpdateCustomerIDNotAllowed": {
                    "value": {
                      "error": "UpdateCustomerIDNotAllowed",
                      "message": "The customerID cannot be updated."
                    }
                  },
                  "UpdateNamespaceNotAllowed": {
                    "value": {
                      "error": "UpdateNamespaceNotAllowed",
                      "message": "The namespace cannot be updated."
                    }
                  },
                  "InvalidTrialDeadline": {
                    "value": {
                      "error": "InvalidTrialDeadline",
                      "message": "Invalid parameter trialDeadline. {trialDeadline} is not a valid RFC3339 timestamp. The timestamp should be in \"yyyy-MM-dd'T'HH:mm:ss'Z'\" format."
                    }
                  },
                  "InvalidTrialDeadline1": {
                    "value": {
                      "error": "InvalidTrialDeadline",
                      "message": "The trialDeadline specified cannot be a time in the past."
                    }
                  },
                  "InvalidTrialDeadline2": {
                    "value": {
                      "error": "InvalidTrialDeadline",
                      "message": "The trial period cannot be longer than 90 days."
                    }
                  },
                  "TrialDeadlineNotSpecified": {
                    "value": {
                      "error": "TrialDeadlineNotSpecified",
                      "message": "The field trialDeadline is required when customer status is set to “trial”."
                    }
                  },
                  "InvalidBillUsingStripe": {
                    "value": {
                      "error": "InvalidBillUsingStripe",
                      "message": "The billUsingStripe specified is invalid, must be true or false."
                    }
                  },
                  "ContractIDNotSpecified": {
                    "value": {
                      "error": "ContractIDNotSpecified",
                      "message": "The field contractID is required when billUsingStripe is set to true."
                    }
                  },
                  "ContractStartDateNotSpecified": {
                    "value": {
                      "error": "ContractStartDateNotSpecified",
                      "message": "The field contractStartDate is required when contractID is specified."
                    }
                  },
                  "InvalidContractStartDate": {
                    "value": {
                      "error": "InvalidContractStartDate",
                      "message": "The date must be in “yyyy-MM-dd” format."
                    }
                  },
                  "InvalidAccountManagerEmail": {
                    "value": {
                      "error": "InvalidAccountManagerEmail",
                      "message": "The accountManagerEmail specified is not a valid email address."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "AccessDenied",
                      "message": "A regular customer is not allowed to make this call."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "InvalidCustomerID",
                      "message": "The customerID given does not exist or the caller does not have permission to access it."
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "ECP Product Management"
        ],
        "description": "This API allows a reseller to update an existing serviceQuota for a child customer by passing ID of the customer. The \"customerID\" and \"namespace\" fields cannot be updated.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "title": "quota.status",
                    "description": "Status of a serviceQuota, which represents the status of ECP service subscription by a customer. The “trial” status means the customer is using ECP service as a free trial. When the status is set to \"suspended\", any requests from the customer will be rejected by ECP API server. \n\nThis status is related to ECP service only. It doesn’t affect other products subscribed by the customer.",
                    "enum": [
                      "active",
                      "suspended",
                      "trial"
                    ],
                    "default": "suspended"
                  },
                  "trialDeadline": {
                    "type": "string",
                    "title": "quota.trialDeadline",
                    "description": "Date-time in RFC 3339 format indicating when the trial expires, e.g. 2021-07-01T15:00:00Z. Required only when the status is set to “trial”. Ignored otherwise. Must not be a date-time in the past. The trial must not last longer than 90 days after the trial starts.\n\nWhen trialDeadline expires, the status will be set to “suspended” and all existing ECP resources for the customer will be deleted.",
                    "format": "date-time"
                  },
                  "billUsingStripe": {
                    "type": "boolean",
                    "title": "quota.billUsingStripe",
                    "description": "A flag indicating whether this customer will be invoiced using Stripe.",
                    "default": false
                  },
                  "contractID": {
                    "title": "quota.contractID",
                    "type": "string",
                    "description": "ID representing the ECP service contract, used for billing. Required when “billUsingStripe” set to true."
                  },
                  "contractStartDate": {
                    "type": "string",
                    "title": "quota.contractStartDate",
                    "description": "The start date of an ECP service contract. Must be a UTC date in “yyyy-MM-dd” format. Required when “contractID” is provided.",
                    "format": "date"
                  },
                  "accountManagerEmail": {
                    "type": "string",
                    "title": "quota.accountManagerEmail",
                    "description": "Email address of the account manager who manages the customer. The email address specified can be used by the account manager to receive system notifications related to the customer, e.g. in the event of trial expiration, excessive usage and service suspension.",
                    "format": "email"
                  },
                  "allowDeploymentInChina": {
                    "type": "boolean",
                    "title": "quota.allowDeploymentInChina",
                    "description": "Whether a customer is allowed to deploy their applications to ECP locations in mainland China. When this is set to false, the customer will not be allowed to pick mainland China locations or the \"CN\" region to deploy their applications.",
                    "default": false
                  },
                  "description": {
                    "title": "quota.description",
                    "type": "string",
                    "description": "Arbitrary text about a serviceQuota"
                  },
                  "resourceQuotas": {
                    "title": "quota.resourceQuotas",
                    "type": "object",
                    "description": "Global resource quotas limiting the maximum amounts of ECP resources available to a customer across all ECP locations",
                    "properties": {
                      "cpu": {
                        "type": "integer",
                        "description": "Maximum total number of vCPU cores available to a customer across all ECP locations. Measured in \"core\".",
                        "minimum": 1,
                        "maximum": 5000
                      },
                      "memory": {
                        "type": "integer",
                        "description": "Maximum total amount of memory available to a customer across all ECP locations. Measured in \"GB\".",
                        "minimum": 1,
                        "maximum": 10000
                      },
                      "publicIPv4Addresses": {
                        "type": "integer",
                        "description": "Maximum total number of public IPv4 addresses available to a customer across all ECP locations. Must be within the range 0-2,000. 0 means no public IPv4 address is available.",
                        "minimum": 0,
                        "maximum": 2000
                      },
                      "applications": {
                        "type": "integer",
                        "description": "Maximum total number of applications that can be deployed to ECP",
                        "default": 50,
                        "minimum": 1,
                        "maximum": 1000
                      },
                      "pods": {
                        "type": "integer",
                        "description": "Maximum total number of Kubernetes pods that can be deployed to ECP Kubernetes clusters (i.e ECP locations)",
                        "default": 500,
                        "minimum": 1,
                        "maximum": 10000
                      },
                      "localSSDStorage": {
                        "type": "integer",
                        "description": "Maximum storage capacity of type \"local solid state drive\" available to a customer across all ECP locations. Measured in \"GB\". Default to 0, means no storage capacity is available.",
                        "default": 0,
                        "minimum": 0,
                        "maximum": 20000
                      },
                      "persistSSDStorage": {
                        "type": "integer",
                        "description": "Maximum storage capacity of type \"persist solid state drive\" available to a customer across all ECP locations.  Unlike local SSD storage, data kept in persist SSD storage is replicated across multiple servers for redundancy. Measured in \"GB\". Default to 0, means no storage capacity is available.",
                        "default": 0,
                        "minimum": 0,
                        "maximum": 20000
                      },
                      "tagsInRegistry": {
                        "type": "integer",
                        "description": "Maximum total number of docker image tags that can be pushed to ECP image registry",
                        "default": 50,
                        "minimum": 1,
                        "maximum": 200
                      },
                      "storageInRegistry": {
                        "type": "integer",
                        "description": "Maximum storage capacity available to a customer to store container images in ECP image registry. Measured in GB.",
                        "default": 10,
                        "minimum": 1,
                        "maximum": 1000
                      }
                    }
                  }
                }
              },
              "examples": {
                "example-1": {
                  "value": {
                    "status": "active"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete the serviceQuota for a customer",
        "operationId": "delete-servicequota-by-customerID",
        "responses": {
          "204": {
            "description": "This response is returned if the serviceQuota is successfully deleted.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The request is invalid. Refer to response body for details.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "HasResource": {
                    "value": {
                      "error": "HasResource",
                      "message": "This customer still has some {ECP resources}. These resources must be removed before the service quota can be deleted."
                    }
                  },
                  "InvalidServiceQuotaStatus": {
                    "value": {
                      "error": "InvalidServiceQuotaStatus",
                      "message": "A serviceQuota not in “suspended” status cannot be deleted."
                    }
                  },
                  "SuspensionDateTooClose": {
                    "value": {
                      "error": "SuspensionDateTooClose",
                      "message": "A serviceQuota that was suspended in the last 90 days cannot be deleted."
                    }
                  }
                }
              }
            },
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "AccessDenied",
                      "message": "A regular customer is not allowed to make this call."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "InvalidCustomerID",
                      "message": "The customerID given does not exist or the caller does not have permission to access it."
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "ECP Product Management"
        ],
        "description": "This API allows a reseller to remove a serviceQuota object for a child customer by passing ID of the customer. The deletion will only work if the customer does not have any existing ECP resources."
      }
    },
    "/ecp/v1/servicequotas/{servicequotaID}/resourcequotas": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "servicequotaID",
          "in": "path",
          "required": true,
          "description": "ID of a serviceQuota"
        }
      ],
      "get": {
        "summary": "Get the status of resourceQuotas by serviceQuota ID",
        "tags": [
          "ECP Product Management"
        ],
        "responses": {
          "200": {
            "description": "The response contains status of resourceQuotas.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "quota.resourceQuotasStatus",
                  "type": "object",
                  "properties": {
                    "available": {
                      "type": "object",
                      "description": "An object showing the balance amounts of each resource quota",
                      "properties": {
                        "cpu": {
                          "type": "integer",
                          "description": "Balance total number of vCPU cores available to a customer across all ECP locations. Measured in “millicores”."
                        },
                        "memory": {
                          "type": "integer",
                          "description": "Balance total amount of memory available to a customer across all ECP locations. Measured in “bytes”."
                        },
                        "publicIPv4Addresses": {
                          "type": "integer",
                          "description": "Balance total number of public IPv4 addresses available to a customer across all ECP locations"
                        },
                        "applications": {
                          "type": "integer",
                          "description": "Balance max. number of applications that can be deployed to ECP"
                        },
                        "pods": {
                          "type": "integer",
                          "description": "Balance max. number of Kubernetes pods that can be deployed to ECP Kubernetes clusters (i.e. ECP locations)"
                        },
                        "localSSDStorage": {
                          "type": "integer",
                          "description": "Balance storage capacity of type “local solid state drive” available to a customer across all ECP locations. Measured in “bytes”."
                        },
                        "persistSSDStorage": {
                          "type": "integer",
                          "description": "Balance storage capacity of type “persist solid state drive” available to a customer across all ECP locations. Measured in \"bytes\". Unlike local SSD storage, data kept in persist SSD storage is replicated across multiple servers for redundancy."
                        }
                      }
                    },
                    "used": {
                      "type": "object",
                      "description": "An object showing the amounts of consumed resource quotas",
                      "properties": {
                        "cpu": {
                          "type": "integer",
                          "description": "Total number of vCPU cores allocated a customer across all ECP locations. Measured in “millicores”."
                        },
                        "memory": {
                          "type": "integer",
                          "description": "Total amount of memory allocated to a customer across all ECP locations. Measured in “bytes”."
                        },
                        "publicIPv4Addresses": {
                          "type": "integer",
                          "description": "Total number of public IPv4 addresses allocated to a customer across all ECP locations"
                        },
                        "applications": {
                          "type": "integer",
                          "description": "Total number of applications that have been deployed to ECP"
                        },
                        "pods": {
                          "type": "integer",
                          "description": "Total number of Kubernetes pods that have been deployed to ECP Kubernetes clusters (i.e. ECP locations)"
                        },
                        "localSSDStorage": {
                          "type": "integer",
                          "description": "Total storage capacity of type “local solid state drive” allocated to a customer across all ECP locations. Measured in “bytes”."
                        },
                        "persistSSDStorage": {
                          "type": "integer",
                          "description": "Total storage capacity of type “persist solid state drive” allocated to a customer across all ECP locations. Measured in \"bytes\". Unlike local SSD storage, data kept in persist SSD storage is replicated across multiple servers for redundancy."
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "available": {
                        "cpu": 300,
                        "memory": 6000000000,
                        "publicIPv4Addresses": 28,
                        "applications": 9,
                        "pods": 98,
                        "localSSDStorage": 998000000000,
                        "persistSSDStorage": 1000000000000
                      },
                      "used": {
                        "cpu": 100,
                        "memory": 2000000000,
                        "publicIPv4Addresses": 2,
                        "applications": 1,
                        "pods": 2,
                        "localSSDStorage": 2000000000,
                        "persistSSDStorage": 0
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "InvalidServiceQuotaID",
                      "message": "The serviceQuotaID given does not exist or is not for a child customer of the caller."
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-resourcequotas",
        "description": "For each customer, the usage of various ECP resources is subject to those limits specified as resourceQuotas in the customer's corresponding serviceQuota.\n\nThis API allows a reseller to get a child customer's resourceQuotas status by referencing the customer's serviceQuota ID."
      }
    },
    "/ecp/v1/servicequotas/customer/{customerID}/resourcequotas": {
      "parameters": [
        {
          "name": "customerID",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "ID of the customer that a serviceQuota is created for"
        }
      ],
      "get": {
        "summary": "Get the status of resourceQuotas for a customer",
        "tags": [
          "ECP Product Management"
        ],
        "responses": {
          "200": {
            "description": "The response contains status of resourceQuotas.",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "quota.resourceQuotasStatus",
                  "type": "object",
                  "properties": {
                    "available": {
                      "type": "object",
                      "description": "An object showing the balance amounts of each resource quota",
                      "properties": {
                        "cpu": {
                          "type": "integer",
                          "description": "Balance total number of vCPU cores available to a customer across all ECP locations. Measured in “millicores”."
                        },
                        "memory": {
                          "type": "integer",
                          "description": "Balance total amount of memory available to a customer across all ECP locations. Measured in “bytes”."
                        },
                        "publicIPv4Addresses": {
                          "type": "integer",
                          "description": "Balance total number of public IPv4 addresses available to a customer across all ECP locations"
                        },
                        "applications": {
                          "type": "integer",
                          "description": "Balance max. number of applications that can be deployed to ECP"
                        },
                        "pods": {
                          "type": "integer",
                          "description": "Balance max. number of Kubernetes pods that can be deployed to ECP Kubernetes clusters (i.e. ECP locations)"
                        },
                        "localSSDStorage": {
                          "type": "integer",
                          "description": "Balance storage capacity of type “local solid state drive” available to a customer across all ECP locations. Measured in “bytes”."
                        },
                        "persistSSDStorage": {
                          "type": "integer",
                          "description": "Balance storage capacity of type “persist solid state drive” available to a customer across all ECP locations. Measured in \"bytes\". Unlike local SSD storage, data kept in persist SSD storage is replicated across multiple servers for redundancy."
                        }
                      }
                    },
                    "used": {
                      "type": "object",
                      "description": "An object showing the amounts of consumed resource quotas",
                      "properties": {
                        "cpu": {
                          "type": "integer",
                          "description": "Total number of vCPU cores allocated a customer across all ECP locations. Measured in “millicores”."
                        },
                        "memory": {
                          "type": "integer",
                          "description": "Total amount of memory allocated to a customer across all ECP locations. Measured in “bytes”."
                        },
                        "publicIPv4Addresses": {
                          "type": "integer",
                          "description": "Total number of public IPv4 addresses allocated to a customer across all ECP locations"
                        },
                        "applications": {
                          "type": "integer",
                          "description": "Total number of applications that have been deployed to ECP"
                        },
                        "pods": {
                          "type": "integer",
                          "description": "Total number of Kubernetes pods that have been deployed to ECP Kubernetes clusters (i.e. ECP locations)"
                        },
                        "localSSDStorage": {
                          "type": "integer",
                          "description": "Total storage capacity of type “local solid state drive” allocated to a customer across all ECP locations. Measured in “bytes”."
                        },
                        "persistSSDStorage": {
                          "type": "integer",
                          "description": "Total storage capacity of type “persist solid state drive” allocated to a customer across all ECP locations. Measured in \"bytes\". Unlike local SSD storage, data kept in persist SSD storage is replicated across multiple servers for redundancy."
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "available": {
                        "cpu": 300,
                        "memory": 6000000000,
                        "publicIPv4Addresses": 28,
                        "applications": 9,
                        "pods": 98,
                        "localSSDStorage": 998000000000,
                        "persistSSDStorage": 1000000000000
                      },
                      "used": {
                        "cpu": 100,
                        "memory": 2000000000,
                        "publicIPv4Addresses": 2,
                        "applications": 1,
                        "pods": 2,
                        "localSSDStorage": 2000000000,
                        "persistSSDStorage": 0
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "headers": {
              "Qtl-Request-Id": {
                "name": "Qtl-Request-Id",
                "in": "header",
                "description": "A string automatically generated by the api server to identify each request.",
                "required": false,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "title": "",
                  "type": "object",
                  "description": "A standard error object.",
                  "x-tags": [
                    "Common"
                  ],
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "error": "InvalidCustomerID",
                      "message": "The customerID given does not exist or the caller does not have permission to access it."
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-resourcequotas-by-customerID",
        "description": "For each customer, the usage of various ECP resources is subject to those limits specified as resourceQuotas in the customer's corresponding serviceQuota.\n\nThis API allows you to get a customer's resourceQuotas status by passing ID of the customer. The \"customerID\" param can be \"me\" to indicate the caller itself."
      }
    }
  },
  "components": {
    "schemas": {
      "application.id": {
        "title": "",
        "type": "string",
        "description": "ID of an ECP application"
      },
      "application.name": {
        "title": "",
        "type": "string",
        "description": "Name of an ECP application. Must contain only lower-case alphanumeric characters and ‘-', must start and end with a lower-case alphanumeric character, and must be no more than 48 characters."
      },
      "application.podCount": {
        "title": "",
        "type": "object",
        "description": "An object showing the desired and current number of pods (i.e. application instances) for an ECP application",
        "properties": {
          "desired": {
            "type": "integer",
            "description": "Count of pods desired across all ECP locations"
          },
          "current": {
            "type": "integer",
            "description": "Count of pods that are created and currently existing  across all ECP locations. Pods in different phase (i.e. pending, running or failed) are all counted."
          },
          "running": {
            "type": "integer",
            "description": "Count of pods that are currently existing and in running phase across all ECP locations"
          }
        }
      },
      "application.isLoadbalanced": {
        "title": "",
        "type": "boolean",
        "description": "A flag indicating if the instances of an ECP application are exposed via ECP layer 4 load balancers."
      },
      "application.cpuLimitsTotal": {
        "title": "",
        "type": "number",
        "description": "Sum of the amounts of “limits.cpu” allocated to instances of an ECP application. Measured in cores."
      },
      "application.memLimitsTotal": {
        "title": "",
        "type": "integer",
        "description": "Sum of the amounts of “limits.mem” allocated to instances of an ECP application. Measured in bytes."
      },
      "application.localSSDTotal": {
        "title": "",
        "description": "Sum of local-ssd storage capacities allocated to instances of an ECP application. Measured in bytes.",
        "type": "integer"
      },
      "application.persistSSDTotal": {
        "title": "",
        "type": "integer",
        "description": "Sum of persist-ssd storage capacities allocated to instances of an ECP application. Measured in bytes."
      },
      "application.ipCount": {
        "title": "",
        "type": "integer",
        "description": "Count of public IPv4 addresses allocated to an ECP application. Can be the addresses of ECP layer4 load balancers or pods, depending on how the application instances are exposed."
      },
      "application.configuration": {
        "title": "",
        "type": "string",
        "description": "Specifications of an ECP application of the latest version"
      },
      "application.status": {
        "type": "string",
        "description": "The deployment status of an ECP application",
        "enum": [
          "waiting",
          "deploying",
          "deployed",
          "failed"
        ]
      },
      "application.regions": {
        "title": "",
        "type": "array",
        "description": "Array of ECP regions where the application is deployed",
        "items": {
          "type": "object",
          "properties": {
            "region": {
              "type": "string",
              "description": "Code of an ECP region, e.g. “NA-WEST”"
            },
            "PoPs": {
              "type": "array",
              "description": "Array of locations within an ECP region where an application is deployed",
              "items": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "Code of an ECP location, e.g. \"sjc1\""
                  },
                  "description": {
                    "type": "string",
                    "description": "Full name of an ECP location, e.g. \"San Jose, US\""
                  }
                }
              }
            }
          }
        }
      },
      "application.vips": {
        "title": "",
        "type": "array",
        "description": "Array of VIPs grouped per ECP locations",
        "items": {
          "type": "object",
          "properties": {
            "VIP": {
              "type": "string",
              "description": "Public IPv4 address(es) exposing application instances at a specific ECP location. Multiple addresses are separated by comma."
            },
            "VIP-v6": {
              "type": "string",
              "description": "Public IPv6 address(es) exposing application instances at a specific ECP location. Multiple addresses are separated by comma."
            },
            "isLoadBalanced": {
              "type": "boolean",
              "description": "A flag indicating if the VIP and/or VIP-v6 are for an ECP LoadBalancer4"
            },
            "PoP": {
              "type": "string",
              "description": "Code of an ECP location where the VIP and/or VIP-v6 are exposing application instances"
            },
            "podCount": {
              "type": "integer",
              "description": "Number of application instances behind the VIP and/or VIP-v6 at an ECP location"
            }
          }
        }
      },
      "application.history": {
        "title": "",
        "type": "array",
        "description": "Array of history operations against an ECP application",
        "items": {
          "type": "object",
          "properties": {
            "action": {
              "type": "string",
              "description": "Type of operation performed",
              "enum": [
                "create",
                "patch",
                "replace",
                "delete"
              ]
            },
            "timestamp": {
              "type": "string",
              "description": "Date-time indicating when the operation is performed",
              "format": "date-time"
            },
            "configuration": {
              "type": "string",
              "description": "The application specifications submitted along with the operation request"
            },
            "version": {
              "type": "integer",
              "description": "A number indicating the version of an ECP application. This is auto generated by ECP API server."
            },
            "isLatest": {
              "type": "boolean",
              "description": "A flag indicating if the above version is currently the newest"
            },
            "calledBy": {
              "description": "API account or user who calls for the operation",
              "type": "string"
            },
            "deployStart": {
              "type": "string",
              "description": "Date-time indicating when the deployment as triggered by this operation starts",
              "format": "date-time"
            },
            "deployEnd": {
              "type": "string",
              "description": "Date-time indicating when the deployment as triggered by this operation ends",
              "format": "date-time"
            },
            "status": {
              "type": "string",
              "description": "Status of the deployment as triggered by this operation",
              "enum": [
                "waiting",
                "deploying",
                "deployed",
                "failed",
                "aborted"
              ]
            },
            "message": {
              "type": "string",
              "description": "Message related to the status of deployment"
            }
          }
        }
      },
      "instance.restarts": {
        "type": "integer",
        "description": "Number of times containers in a pod have restarted"
      },
      "instance.ready": {
        "type": "string",
        "description": "Readiness of containers in a pod, e.g. “2/2” means 2 containers in a pod are both ready."
      },
      "instance.pop": {
        "type": "string",
        "description": "Short form of an ECP location where a pod is located"
      },
      "instance.phase": {
        "type": "string",
        "description": "Kubernetes defined term indicating where a pod is in its lifecycle. For more information, refer to <a href=\"https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#PodStatus\">official documentation<a/>",
        "enum": [
          "Pending",
          "Running",
          "Failed"
        ]
      },
      "instance.namespace": {
        "type": "string",
        "description": "Namespace that owns a pod"
      },
      "instance.name": {
        "type": "string",
        "description": "Name of a pod"
      },
      "instance.ID": {
        "type": "string",
        "description": "ID of a pod"
      },
      "instance.age": {
        "type": "string",
        "description": "Elapse of time since creation of a pod"
      },
      "instance.creationTime": {
        "type": "string",
        "description": "Date-time when a pod was created",
        "format": "date-time"
      },
      "instance.publicIPv4": {
        "title": "",
        "type": "string",
        "description": "Public IPv4 address assigned to a pod"
      },
      "instance.publicIPv6": {
        "title": "",
        "type": "string",
        "description": "Public IPv6 address assigned to a pod"
      },
      "instance.podIP": {
        "title": "",
        "type": "string",
        "description": "Private IPv4 address assigned to a pod"
      },
      "instance.conditions": {
        "title": "",
        "type": "array",
        "description": "Array of conditions describing the current service state of a pod. For more information, refer to <a href=\"https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#PodStatus\">official documentation</a>.",
        "items": {
          "type": "object",
          "properties": {
            "lastProbeTime": {
              "type": "string",
              "description": "Timestamp when the Pod condition was last probed",
              "format": "date-time"
            },
            "lastTransitionTime": {
              "type": "string",
              "description": "Timestamp when the Pod last transitioned from one status to another",
              "format": "date-time"
            },
            "message": {
              "type": "string",
              "description": "Message indicating details about the transition"
            },
            "reason": {
              "type": "string",
              "description": "A unique, one-word, CamelCase reason for the condition’s last transition"
            },
            "status": {
              "type": "string",
              "description": "Status of the condition",
              "enum": [
                "True",
                "False",
                "Unknown"
              ]
            },
            "type": {
              "type": "string",
              "description": "Type of the condition",
              "enum": [
                "PodScheduled",
                "Ready",
                "Initialized",
                "Unschedulable",
                "ContainersReady"
              ]
            }
          }
        }
      },
      "instance.containers": {
        "title": "",
        "type": "array",
        "description": "Array of containers in a pod",
        "items": {
          "type": "object",
          "properties": {
            "containerID": {
              "type": "string",
              "description": "Container's ID in the format 'docker://<container_id>'"
            },
            "name": {
              "type": "string",
              "description": "Container name"
            },
            "image": {
              "type": "string",
              "description": "The image the container is running"
            },
            "imageID": {
              "type": "string",
              "description": "ImageID of the container's image"
            },
            "lastState": {
              "type": "object",
              "description": "Details about the container's last termination condition"
            },
            "ready": {
              "description": "A flag indicating whether the container has passed its readiness probe",
              "type": "boolean"
            },
            "restartCount": {
              "description": "The number of times the container has been restarted",
              "type": "integer"
            },
            "state": {
              "type": "object",
              "description": "Details about the container's current condition"
            }
          }
        }
      },
      "instance.events": {
        "title": "",
        "type": "array",
        "description": "Array of Kubernetes events related to a pod. Note that an event will be removed in 3 hours after last occurence. For more information, refer to the <a href=\"https://kubernetes.io/docs/reference/kubernetes-api/cluster-resources/event-v1/\">official documenation</a>.",
        "items": {
          "type": "object",
          "properties": {
            "firstTimestamp": {
              "type": "string",
              "description": "The time at which the event was first recorded",
              "format": "date-time"
            },
            "lastTimestamp": {
              "type": "string",
              "description": "The time at which the most recent occurrence of this event was recorded",
              "format": "date-time"
            },
            "count": {
              "type": "integer",
              "description": "The number of times this event has occurred"
            },
            "involvedObject": {
              "type": "object",
              "description": "The object that this event is about"
            },
            "reason": {
              "type": "string",
              "description": "A short string that gives the reason for the transition into the object's current status"
            },
            "message": {
              "type": "string",
              "description": "A human-readable description of the status of this operation"
            }
          }
        }
      },
      "application.spec.RegionPreference": {
        "title": "RegionPreference",
        "type": "object",
        "x-examples": {
          "example-1": {
            "apiVersion": "v1",
            "kind": "RegionPreference",
            "metadata": {
              "name": "myapp",
              "namespace": "demo"
            },
            "spec": {
              "regions": [
                {
                  "name": "NA-WEST",
                  "replicas": 6
                },
                {
                  "name": "EU",
                  "replicas": 4
                }
              ]
            }
          }
        },
        "description": "Region",
        "properties": {
          "apiVersion": {
            "type": "string",
            "enum": [
              "v1"
            ]
          },
          "Kind": {
            "type": "string",
            "description": "Use \"RegionPreference\", an ECP custom resource, to specify ECP regions and have your application instances automatically distributed across locations within each ECP region. ",
            "enum": [
              "RegionPreference"
            ]
          },
          "metadata": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of a \"RegionPreference\" resource. Must be the same as the query param \"appName\"."
              }
            }
          },
          "spec": {
            "type": "object",
            "required": [
              "regions"
            ],
            "properties": {
              "regions": {
                "type": "array",
                "description": "Array of target ECP regions to distribute your application instances",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Code of an ECP region, e.g. \"NA-WEST\" which stands for west of North America."
                    },
                    "replicas": {
                      "type": "integer",
                      "description": "The total number of pods (i.e. application instances) desired across locations within an ECP region",
                      "minimum": 1
                    }
                  },
                  "required": [
                    "name",
                    "replicas"
                  ]
                }
              }
            }
          }
        },
        "required": [
          "apiVersion",
          "Kind",
          "metadata",
          "spec"
        ]
      },
      "application.spec.location": {
        "title": "Location",
        "type": "object",
        "description": "Location",
        "x-examples": {
          "example-1": {
            "apiVersion": "v1",
            "kind": "Location",
            "metadata": {
              "name": "myapp",
              "namespace": "demo"
            },
            "spec": {
              "locations": [
                {
                  "name": "sjc",
                  "replicas": 2
                },
                {
                  "name": "ams",
                  "replicas": 1
                }
              ]
            }
          }
        },
        "properties": {
          "apiVersion": {
            "type": "string",
            "enum": [
              "v1"
            ]
          },
          "Kind": {
            "type": "string",
            "enum": [
              "Location"
            ],
            "description": "Use \"Location\", an ECP custom resource, to pick ECP locations and precisely place your application instances."
          },
          "metadata": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of a \"Location\" resource. Must be the same as the query param \"appName\"."
              }
            }
          },
          "spec": {
            "type": "object",
            "required": [
              "locations"
            ],
            "properties": {
              "locations": {
                "type": "array",
                "description": "Array of target ECP locations",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Code of an ECP location, e.g. \"sjc1\" which stands for the ECP location at San Jose, US."
                    },
                    "replicas": {
                      "type": "integer",
                      "description": "Number of pods (i.e. application instances) desired at an ECP location",
                      "minimum": 1
                    }
                  },
                  "required": [
                    "name",
                    "replicas"
                  ]
                }
              }
            }
          }
        },
        "required": [
          "apiVersion",
          "Kind",
          "metadata",
          "spec"
        ]
      },
      "application.spec.loadbalancer4": {
        "title": "ECP LoadBalancer4",
        "type": "object",
        "description": "LoadBalancer4",
        "properties": {
          "apiVersion": {
            "type": "string",
            "enum": [
              "v1"
            ]
          },
          "Kind": {
            "type": "string",
            "enum": [
              "LoadBalancer4"
            ],
            "description": "Use \"LoadBalancer4\", an ECP custom resource, to expose your application instances"
          },
          "metadata": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of a \"LoadBalancer4\" object. Must be the same as the query param \"appName\"."
              }
            }
          },
          "spec": {
            "type": "object",
            "required": [
              "listeners"
            ],
            "properties": {
              "listeners": {
                "type": "array",
                "description": "Array of rules for the LoadBalancer4 to forward incoming traffic to backend application instances",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of a listener. Must be unique across a \"LoadBalancer4\" obejct. Allows lower-case letters, digits and hyphens only. Must not start or end with a hyphen, and must be less than 63 characters."
                    },
                    "backendSelector": {
                      "type": "object",
                      "description": "Key value pair that is used to match target pods (i.e. application instances) as backend of the LoadBalancer4."
                    },
                    "listenerPort": {
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 65535,
                      "description": "Number of port that the LoadBalancer4 listens on"
                    },
                    "backendPort": {
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 65535,
                      "description": "Number of the backend pods' port that receives traffic forwarded by the LoadBalancer4. Must be the same as \"listenerPort\"."
                    },
                    "protocol": {
                      "type": "string",
                      "enum": [
                        "TCP",
                        "UDP"
                      ],
                      "description": "Protocol of incoming traffic that the LoadBalancer4 will handle"
                    },
                    "scheduler": {
                      "type": "string",
                      "enum": [
                        "rr",
                        "lc",
                        "sh"
                      ],
                      "description": "Load balancing algorithm used to make load balancing decision. Can be \"rr\" (Round Robin), \"lc\" (Least Conncetions) or \"sh\" (Source Hash).",
                      "default": "rr"
                    },
                    "healthCheck": {
                      "type": "boolean",
                      "default": false,
                      "description": "Whether to turn on periodic probes to check the healthiness of backend pods. Pod that fails health check will be removed by the LoadBalancer4 and hence will not receive traffic."
                    },
                    "healthCheckType": {
                      "type": "string",
                      "enum": [
                        "TCP",
                        "HTTP"
                      ],
                      "description": "When \"protocol\" field is set to \"TCP\", the health check type can be \"TCP\" or \"HTTP\". When the \"protocol\" is set to \"UDP\", health check is not available."
                    },
                    "healthCheckDomain": {
                      "type": "string",
                      "description": "Hostname to connect to. Acceptable only when the health check type is \"HTTP\". Default to the IP of a backend pod."
                    },
                    "healthCheckURI": {
                      "type": "string",
                      "description": "Path to access. Acceptable only when the health check type is \"HTTP\"."
                    },
                    "healthCheckConnectPort": {
                      "type": "integer",
                      "description": "Number of the port to access on the backend pods. Set to same as the \"backendPort\" by default.",
                      "minimum": 1,
                      "maximum": 65535
                    },
                    "healthCheckInterval": {
                      "type": "integer",
                      "default": 1,
                      "description": "How often (in seconds) to perform the health check",
                      "minimum": 1,
                      "maximum": 5
                    }
                  },
                  "required": [
                    "name",
                    "backendSelector",
                    "listenerPort",
                    "backendPort"
                  ]
                }
              }
            }
          }
        },
        "required": [
          "apiVersion",
          "Kind",
          "metadata",
          "spec"
        ]
      },
      "application.spec.statefulset": {
        "title": "StatefulSet",
        "type": "object",
        "description": "StatefulSet",
        "x-examples": {
          "example-1": {}
        },
        "properties": {
          "apiVersion": {
            "type": "string",
            "enum": [
              "apps/v1"
            ]
          },
          "Kind": {
            "type": "string",
            "description": "Use Kubernetes \"StatefulSet\" as workload controller if your application requires persistent storage. Refer to <a href=\"https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/\">Kubernetes official documentation </a> for more about the controller.",
            "enum": [
              "StatefulSet"
            ]
          },
          "metadata": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of a \"StatefulSet\" resource. Must be the same as the query param \"appName\"."
              }
            }
          },
          "spec": {
            "type": "object",
            "description": "This document only focuses on some typical configs of  a StatefulSet object. For more about how to specify a StatefulSet, please refer to the <a href=\"https://v1-17.docs.kubernetes.io/docs/reference/generated/kubernetes-api/v1.17/#statefulset-v1-apps\"> official kubernetes API reference</a>.",
            "required": [
              "selector",
              "template"
            ],
            "properties": {
              "selector": {
                "type": "object",
                "description": "A label query over pods. Must match the pod template's labels.",
                "required": [
                  "matchLabels"
                ],
                "properties": {
                  "matchLabels": {
                    "type": "object",
                    "description": "A map of key value pairs"
                  }
                }
              },
              "template": {
                "type": "object",
                "description": "Template of the pods that will be created by the StatefulSet",
                "required": [
                  "metadata",
                  "spec"
                ],
                "properties": {
                  "metadata": {
                    "type": "object",
                    "required": [
                      "labels"
                    ],
                    "properties": {
                      "labels": {
                        "type": "object",
                        "description": "Map of string keys and values that can be used to organize and categorize pods. Must match selector of the StatefulSet"
                      },
                      "annotations": {
                        "type": "object",
                        "description": "An unstructured key value map stored with a pod",
                        "properties": {
                          "quantil.com/enableExternalIP": {
                            "type": "boolean",
                            "default": false,
                            "description": "Pass this annotation and set to true if you would like to enable public IPv4 network interface for the pod. Alternatively, you can specify an ECP \"LoadBalancer4\" object for your ECP application to expose the pod."
                          },
                          "quantil.com/enableIpv6ExternalIP": {
                            "type": "boolean",
                            "default": false,
                            "description": "Pass this annotation and set to true if you would like to enable public IPv6 network interface for the pod. Alternatively, you can specify an ECP \"LoadBalancer4\" object for your ECP application to expose the pod."
                          }
                        }
                      }
                    }
                  },
                  "spec": {
                    "type": "object",
                    "description": "Specification of desired behavior of the pod",
                    "required": [
                      "containers"
                    ],
                    "properties": {
                      "containers": {
                        "type": "array",
                        "description": "List of containers coupled in the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "image": {
                              "type": "string",
                              "description": "Docker image name"
                            },
                            "name": {
                              "type": "string",
                              "description": "Name of the container specified as a DNS_LABEL"
                            },
                            "resources": {
                              "type": "object",
                              "description": "Compute Resources required by this container. Cannot be updated.",
                              "required": [
                                "limits"
                              ],
                              "properties": {
                                "limits": {
                                  "type": "object",
                                  "description": "The maximum amount of compute resources required",
                                  "required": [
                                    "cpu",
                                    "memory"
                                  ],
                                  "properties": {
                                    "cpu": {
                                      "type": "string",
                                      "description": "The amount of CPU required. Minimum 0.05 core. The sum of limits.cpu required by all containers in the pod must not exceed 24 cores."
                                    },
                                    "memory": {
                                      "type": "string",
                                      "description": "The amount of memory required. Minimum 50 MB. The sum of limits.memory required by all containers in the pod must not exceed 128 GB."
                                    }
                                  }
                                }
                              }
                            },
                            "volumeMounts": {
                              "type": "array",
                              "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "This must match the Name of a Volume"
                                  },
                                  "mountPath": {
                                    "type": "string",
                                    "description": "Path within the container at which the volume should be mounted. Must not contain ':'."
                                  }
                                }
                              }
                            }
                          },
                          "required": [
                            "image",
                            "name",
                            "resources"
                          ]
                        }
                      }
                    }
                  }
                }
              },
              "volumeClaimTemplates": {
                "type": "array",
                "description": "A list of persistent volume claims that pods are allowed to reference. Every claim in this list must have at least one matching (by name) volumeMount in one container in the pod template.",
                "items": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Name of a volume claim"
                        },
                        "annotations": {
                          "type": "object",
                          "properties": {
                            "volume.beta.kubernetes.io/storage-class": {
                              "type": "string",
                              "enum": [
                                "local-ssd"
                              ],
                              "description": "Specifiy the storageClass of a volume claim. Currently only \"local-ssd\" is available. \"local-ssd\" means local persistent SSD storage. Data is stored locally and persists across container restarts, but will be lost when pod is rescheduled to another node. "
                            }
                          }
                        }
                      }
                    },
                    "spec": {
                      "type": "object",
                      "properties": {
                        "accessModes": {
                          "type": "array",
                          "description": "The desired access modes the volume claim should have. Should be \"ReadWriteOnce\".",
                          "items": {
                            "type": "string",
                            "enum": [
                              "ReadWriteOnce"
                            ]
                          }
                        },
                        "resources": {
                          "type": "object",
                          "description": "The resources the volume claim should have",
                          "properties": {
                            "requests": {
                              "type": "object",
                              "description": "The minimum amount of resources required",
                              "properties": {
                                "storage": {
                                  "type": "string",
                                  "description": "The storage capacity required. Must be not less than 500MB and not higher than 100GB."
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "required": [
          "apiVersion",
          "Kind",
          "metadata",
          "spec"
        ]
      },
      "application.spec": {
        "title": "",
        "description": "",
        "type": "array",
        "items": {
          "anyOf": [
            {
              "title": "Kubernetes Workload",
              "oneOf": [
                {
                  "title": "Deployment",
                  "type": "object",
                  "x-examples": {
                    "example-1": {}
                  },
                  "description": "Deployment",
                  "properties": {
                    "apiVersion": {
                      "type": "string",
                      "enum": [
                        "apps/v1"
                      ]
                    },
                    "Kind": {
                      "type": "string",
                      "description": "Use Kubernetes \"Deployment\" as workload controller if your application does not require persistent storage. Refer to <a href=\"https://kubernetes.io/docs/concepts/workloads/controllers/deployment/\">Kubernetes official documentation </a> for more about the controller.",
                      "enum": [
                        "Deployment"
                      ]
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Name of a \"Deployment\" resource. Must be the same as the query param \"appName\"."
                        }
                      }
                    },
                    "spec": {
                      "type": "object",
                      "description": "This document only focuses on some typical configs of  a Deployment object. For more about how to specify a Deployment, please refer to the <a href=\"https://v1-17.docs.kubernetes.io/docs/reference/generated/kubernetes-api/v1.17/#deployment-v1-apps\">official Kubernetes API reference</a>.",
                      "required": [
                        "selector",
                        "template"
                      ],
                      "properties": {
                        "selector": {
                          "type": "object",
                          "description": "A label query over pods. Must match the pod template's labels.",
                          "required": [
                            "matchLabels"
                          ],
                          "properties": {
                            "matchLabels": {
                              "type": "object",
                              "description": "A map of key value pairs"
                            }
                          }
                        },
                        "template": {
                          "type": "object",
                          "description": "Template of the pods that will be created by the Deployment",
                          "required": [
                            "metadata",
                            "spec"
                          ],
                          "properties": {
                            "metadata": {
                              "type": "object",
                              "required": [
                                "labels"
                              ],
                              "properties": {
                                "labels": {
                                  "type": "object",
                                  "description": "Map of string keys and values that can be used to organize and categorize pods. Must match selector of the Deployment"
                                },
                                "annotations": {
                                  "type": "object",
                                  "description": "An unstructured key value map stored with a pod",
                                  "properties": {
                                    "quantil.com/enableExternalIP": {
                                      "type": "boolean",
                                      "default": false,
                                      "description": "Pass this annotation and set to true if you would like to enable public IPv4 network interface for the pod. Alternatively, you can specify an ECP \"LoadBalancer4\" object for your ECP application to expose the pod. "
                                    },
                                    "quantil.com/enableIpv6ExternalIP": {
                                      "type": "boolean",
                                      "default": false,
                                      "description": "Set this annotation to true if you would like to have a public IPv6 address for the pod. Alternatively, you can create an ECP custom \"LoadBalancer4\" object for your ECP application to expose the pod. "
                                    }
                                  }
                                }
                              }
                            },
                            "spec": {
                              "type": "object",
                              "description": "Specification of desired behavior of the pod",
                              "required": [
                                "containers"
                              ],
                              "properties": {
                                "containers": {
                                  "type": "array",
                                  "description": "List of containers coupled in the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "image": {
                                        "type": "string",
                                        "description": "Docker image name"
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "Name of the container specified as a DNS_LABEL"
                                      },
                                      "resources": {
                                        "type": "object",
                                        "description": "Compute Resources required by this container. Cannot be updated.",
                                        "required": [
                                          "limits"
                                        ],
                                        "properties": {
                                          "limits": {
                                            "type": "object",
                                            "description": "The maximum amount of compute resources required",
                                            "required": [
                                              "cpu",
                                              "memory"
                                            ],
                                            "properties": {
                                              "cpu": {
                                                "type": "string",
                                                "description": "The amount of CPU required. Minimum 0.05 core. The sum of limits.cpu required by all containers in the pod must not exceed 24 cores."
                                              },
                                              "memory": {
                                                "type": "string",
                                                "description": "The amount of memory required. Minimum 50 MB. The sum of limits.memory required by all containers in the pod must not exceed 128 GB."
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "required": [
                                      "image",
                                      "name",
                                      "resources"
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "apiVersion",
                    "Kind",
                    "metadata",
                    "spec"
                  ]
                },
                {
                  "title": "ReplicaSet",
                  "type": "object",
                  "x-examples": {
                    "example-1": {}
                  },
                  "description": "ReplicaSet",
                  "properties": {
                    "apiVersion": {
                      "type": "string",
                      "enum": [
                        "apps/v1"
                      ]
                    },
                    "Kind": {
                      "type": "string",
                      "description": "Use Kubernetes \"ReplicaSet\" as workload controller if your application does not require persistent storage. Refer to <a href=\"https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/\">Kubernetes official documentation </a> for more about the controller.",
                      "enum": [
                        "ReplicaSet"
                      ]
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Name of a \"ReplicaSet\" resource. Must be the same as the query param \"appName\"."
                        }
                      }
                    },
                    "spec": {
                      "type": "object",
                      "description": "This document only focuses on some typical configs of  a ReplicaSet object. For more about how to specify a ReplicaSet, please refer to the <a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.17/#replicaset-v1-apps\">official Kubernetes API reference</a>",
                      "required": [
                        "selector",
                        "template"
                      ],
                      "properties": {
                        "selector": {
                          "type": "object",
                          "description": "A label query over pods. Must match the pod template's labels.",
                          "required": [
                            "matchLabels"
                          ],
                          "properties": {
                            "matchLabels": {
                              "type": "object",
                              "description": "A map of key value pairs"
                            }
                          }
                        },
                        "template": {
                          "type": "object",
                          "description": "Template of the pods that will be created by the ReplicaSet",
                          "required": [
                            "metadata",
                            "spec"
                          ],
                          "properties": {
                            "metadata": {
                              "type": "object",
                              "required": [
                                "labels"
                              ],
                              "properties": {
                                "labels": {
                                  "type": "object",
                                  "description": "Map of string keys and values that can be used to organize and categorize pods. Must match selector of the ReplicaSet"
                                },
                                "annotations": {
                                  "type": "object",
                                  "description": "An unstructured key value map stored with a pod",
                                  "properties": {
                                    "quantil.com/enableExternalIP": {
                                      "type": "boolean",
                                      "default": false,
                                      "description": "Pass this annotation and set to true if you would like to enable public IPv4 network interface for the pod. Alternatively, you can specify an ECP \"LoadBalancer4\" object for your ECP application to expose the pod. "
                                    },
                                    "quantil.com/enableIpv6ExternalIP": {
                                      "type": "boolean",
                                      "default": false,
                                      "description": "Pass this annotation and set to true if you would like to enable public IPv6 network interface for the pod. Alternatively, you can specify an ECP custom \"LoadBalancer4\" object for your ECP application to expose the pod. "
                                    }
                                  }
                                }
                              }
                            },
                            "spec": {
                              "type": "object",
                              "description": "Specifications of desired behavior of the pod",
                              "required": [
                                "containers"
                              ],
                              "properties": {
                                "containers": {
                                  "type": "array",
                                  "description": "List of containers coupled in the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "image": {
                                        "type": "string",
                                        "description": "Docker image name"
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "Name of the container specified as a DNS_LABEL"
                                      },
                                      "resources": {
                                        "type": "object",
                                        "description": "Compute Resources required by this container. Cannot be updated.",
                                        "required": [
                                          "limits"
                                        ],
                                        "properties": {
                                          "limits": {
                                            "type": "object",
                                            "description": "The maximum amount of compute resources required",
                                            "required": [
                                              "cpu",
                                              "memory"
                                            ],
                                            "properties": {
                                              "cpu": {
                                                "type": "string",
                                                "description": "The amount of CPU required. Minimum 0.05 core. The sum of limits.cpu required by all containers in the pod must not exceed 24 cores."
                                              },
                                              "memory": {
                                                "type": "string",
                                                "description": "The amount of memory required. Minimum 50 MB. The sum of limits.memory required by all containers in the pod must not exceed 128 GB."
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "required": [
                                      "image",
                                      "name",
                                      "resources"
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "apiVersion",
                    "Kind",
                    "metadata",
                    "spec"
                  ]
                },
                {
                  "title": "StatefulSet",
                  "type": "object",
                  "description": "StatefulSet",
                  "x-examples": {
                    "example-1": {}
                  },
                  "properties": {
                    "apiVersion": {
                      "type": "string",
                      "enum": [
                        "apps/v1"
                      ]
                    },
                    "Kind": {
                      "type": "string",
                      "description": "Use Kubernetes \"StatefulSet\" as workload controller if your application requires persistent storage. Refer to <a href=\"https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/\">Kubernetes official documentation </a> for more about the controller.",
                      "enum": [
                        "StatefulSet"
                      ]
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Name of a \"StatefulSet\" resource. Must be the same as the query param \"appName\"."
                        }
                      }
                    },
                    "spec": {
                      "type": "object",
                      "description": "This document only focuses on some typical configs of  a StatefulSet object. For more about how to specify a StatefulSet, please refer to the <a href=\"https://v1-17.docs.kubernetes.io/docs/reference/generated/kubernetes-api/v1.17/#statefulset-v1-apps\"> official kubernetes API reference</a>.",
                      "required": [
                        "selector",
                        "template"
                      ],
                      "properties": {
                        "selector": {
                          "type": "object",
                          "description": "A label query over pods. Must match the pod template's labels.",
                          "required": [
                            "matchLabels"
                          ],
                          "properties": {
                            "matchLabels": {
                              "type": "object",
                              "description": "A map of key value pairs"
                            }
                          }
                        },
                        "template": {
                          "type": "object",
                          "description": "Template of the pods that will be created by the StatefulSet",
                          "required": [
                            "metadata",
                            "spec"
                          ],
                          "properties": {
                            "metadata": {
                              "type": "object",
                              "required": [
                                "labels"
                              ],
                              "properties": {
                                "labels": {
                                  "type": "object",
                                  "description": "Map of string keys and values that can be used to organize and categorize pods. Must match selector of the StatefulSet"
                                },
                                "annotations": {
                                  "type": "object",
                                  "description": "An unstructured key value map stored with a pod",
                                  "properties": {
                                    "quantil.com/enableExternalIP": {
                                      "type": "boolean",
                                      "default": false,
                                      "description": "Pass this annotation and set to true if you would like to enable public IPv4 network interface for the pod. Alternatively, you can specify an ECP \"LoadBalancer4\" object for your ECP application to expose the pod."
                                    },
                                    "quantil.com/enableIpv6ExternalIP": {
                                      "type": "boolean",
                                      "default": false,
                                      "description": "Pass this annotation and set to true if you would like to enable public IPv6 network interface for the pod. Alternatively, you can specify an ECP \"LoadBalancer4\" object for your ECP application to expose the pod."
                                    }
                                  }
                                }
                              }
                            },
                            "spec": {
                              "type": "object",
                              "description": "Specification of desired behavior of the pod",
                              "required": [
                                "containers"
                              ],
                              "properties": {
                                "containers": {
                                  "type": "array",
                                  "description": "List of containers coupled in the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "image": {
                                        "type": "string",
                                        "description": "Docker image name"
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "Name of the container specified as a DNS_LABEL"
                                      },
                                      "resources": {
                                        "type": "object",
                                        "description": "Compute Resources required by this container. Cannot be updated.",
                                        "required": [
                                          "limits"
                                        ],
                                        "properties": {
                                          "limits": {
                                            "type": "object",
                                            "description": "The maximum amount of compute resources required",
                                            "required": [
                                              "cpu",
                                              "memory"
                                            ],
                                            "properties": {
                                              "cpu": {
                                                "type": "string",
                                                "description": "The amount of CPU required. Minimum 0.05 core. The sum of limits.cpu required by all containers in the pod must not exceed 24 cores."
                                              },
                                              "memory": {
                                                "type": "string",
                                                "description": "The amount of memory required. Minimum 50 MB. The sum of limits.memory required by all containers in the pod must not exceed 128 GB."
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "volumeMounts": {
                                        "type": "array",
                                        "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "name": {
                                              "type": "string",
                                              "description": "This must match the Name of a Volume"
                                            },
                                            "mountPath": {
                                              "type": "string",
                                              "description": "Path within the container at which the volume should be mounted. Must not contain ':'."
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "required": [
                                      "image",
                                      "name",
                                      "resources"
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        },
                        "volumeClaimTemplates": {
                          "type": "array",
                          "description": "A list of persistent volume claims that pods are allowed to reference. Every claim in this list must have at least one matching (by name) volumeMount in one container in the pod template.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "metadata": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "Name of a volume claim"
                                  },
                                  "annotations": {
                                    "type": "object",
                                    "properties": {
                                      "volume.beta.kubernetes.io/storage-class": {
                                        "type": "string",
                                        "enum": [
                                          "local-ssd"
                                        ],
                                        "description": "Specifiy the storageClass of a volume claim. Currently only \"local-ssd\" is available. \"local-ssd\" means local persistent SSD storage. Data is stored locally and persists across container restarts, but will be lost when pod is rescheduled to another node. "
                                      }
                                    }
                                  }
                                }
                              },
                              "spec": {
                                "type": "object",
                                "properties": {
                                  "accessModes": {
                                    "type": "array",
                                    "description": "The desired access modes the volume claim should have. Should be \"ReadWriteOnce\".",
                                    "items": {
                                      "type": "string",
                                      "enum": [
                                        "ReadWriteOnce"
                                      ]
                                    }
                                  },
                                  "resources": {
                                    "type": "object",
                                    "description": "The resources the volume claim should have",
                                    "properties": {
                                      "requests": {
                                        "type": "object",
                                        "description": "The minimum amount of resources required",
                                        "properties": {
                                          "storage": {
                                            "type": "string",
                                            "description": "The storage capacity required. Must be not less than 500MB and not higher than 100GB."
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "apiVersion",
                    "Kind",
                    "metadata",
                    "spec"
                  ]
                }
              ]
            },
            {
              "title": "ECP LoadBalancer4",
              "type": "object",
              "description": "LoadBalancer4",
              "properties": {
                "apiVersion": {
                  "type": "string",
                  "enum": [
                    "v1"
                  ]
                },
                "Kind": {
                  "type": "string",
                  "enum": [
                    "LoadBalancer4"
                  ],
                  "description": "Use \"LoadBalancer4\", an ECP custom resource, to expose your application instances"
                },
                "metadata": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of a \"LoadBalancer4\" object. Must be the same as the query param \"appName\"."
                    }
                  }
                },
                "spec": {
                  "type": "object",
                  "required": [
                    "listeners"
                  ],
                  "properties": {
                    "listeners": {
                      "type": "array",
                      "description": "Array of rules for the LoadBalancer4 to forward incoming traffic to backend application instances",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of a listener. Must be unique across a \"LoadBalancer4\" obejct. Allows lower-case letters, digits and hyphens only. Must not start or end with a hyphen, and must be less than 63 characters."
                          },
                          "backendSelector": {
                            "type": "object",
                            "description": "Key value pair that is used to match target pods (i.e. application instances) as backend of the LoadBalancer4."
                          },
                          "listenerPort": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 65535,
                            "description": "Number of port that the LoadBalancer4 listens on"
                          },
                          "backendPort": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 65535,
                            "description": "Number of the backend pods' port that receives traffic forwarded by the LoadBalancer4. Must be the same as \"listenerPort\"."
                          },
                          "protocol": {
                            "type": "string",
                            "enum": [
                              "TCP",
                              "UDP"
                            ],
                            "description": "Protocol of incoming traffic that the LoadBalancer4 will handle"
                          },
                          "scheduler": {
                            "type": "string",
                            "enum": [
                              "rr",
                              "lc",
                              "sh"
                            ],
                            "description": "Load balancing algorithm used to make load balancing decision. Can be \"rr\" (Round Robin), \"lc\" (Least Conncetions) or \"sh\" (Source Hash).",
                            "default": "rr"
                          },
                          "healthCheck": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether to turn on periodic probes to check the healthiness of backend pods. Pod that fails health check will be removed by the LoadBalancer4 and hence will not receive traffic."
                          },
                          "healthCheckType": {
                            "type": "string",
                            "enum": [
                              "TCP",
                              "HTTP"
                            ],
                            "description": "When \"protocol\" field is set to \"TCP\", the health check type can be \"TCP\" or \"HTTP\". When the \"protocol\" is set to \"UDP\", health check is not available."
                          },
                          "healthCheckDomain": {
                            "type": "string",
                            "description": "Hostname to connect to. Acceptable only when the health check type is \"HTTP\". Default to the IP of a backend pod."
                          },
                          "healthCheckURI": {
                            "type": "string",
                            "description": "Path to access. Acceptable only when the health check type is \"HTTP\"."
                          },
                          "healthCheckConnectPort": {
                            "type": "integer",
                            "description": "Number of the port to access on the backend pods. Set to same as the \"backendPort\" by default.",
                            "minimum": 1,
                            "maximum": 65535
                          },
                          "healthCheckInterval": {
                            "type": "integer",
                            "default": 1,
                            "description": "How often (in seconds) to perform the health check",
                            "minimum": 1,
                            "maximum": 5
                          }
                        },
                        "required": [
                          "name",
                          "backendSelector",
                          "listenerPort",
                          "backendPort"
                        ]
                      }
                    }
                  }
                }
              },
              "required": [
                "apiVersion",
                "Kind",
                "metadata",
                "spec"
              ]
            },
            {
              "title": "ECP Target",
              "oneOf": [
                {
                  "title": "RegionPreference",
                  "type": "object",
                  "x-examples": {
                    "example-1": {
                      "apiVersion": "v1",
                      "kind": "RegionPreference",
                      "metadata": {
                        "name": "myapp",
                        "namespace": "demo"
                      },
                      "spec": {
                        "regions": [
                          {
                            "name": "NA-WEST",
                            "replicas": 6
                          },
                          {
                            "name": "EU",
                            "replicas": 4
                          }
                        ]
                      }
                    }
                  },
                  "description": "Region",
                  "properties": {
                    "apiVersion": {
                      "type": "string",
                      "enum": [
                        "v1"
                      ]
                    },
                    "Kind": {
                      "type": "string",
                      "description": "Use \"RegionPreference\", an ECP custom resource, to specify ECP regions and have your application instances automatically distributed across locations within each ECP region. ",
                      "enum": [
                        "RegionPreference"
                      ]
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Name of a \"RegionPreference\" resource. Must be the same as the query param \"appName\"."
                        }
                      }
                    },
                    "spec": {
                      "type": "object",
                      "required": [
                        "regions"
                      ],
                      "properties": {
                        "regions": {
                          "type": "array",
                          "description": "Array of target ECP regions to distribute your application instances",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "Code of an ECP region, e.g. \"NA-WEST\" which stands for west of North America."
                              },
                              "replicas": {
                                "type": "integer",
                                "description": "The total number of pods (i.e. application instances) desired across locations within an ECP region",
                                "minimum": 1
                              }
                            },
                            "required": [
                              "name",
                              "replicas"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "apiVersion",
                    "Kind",
                    "metadata",
                    "spec"
                  ]
                },
                {
                  "title": "Location",
                  "type": "object",
                  "description": "Location",
                  "x-examples": {
                    "example-1": {
                      "apiVersion": "v1",
                      "kind": "Location",
                      "metadata": {
                        "name": "myapp",
                        "namespace": "demo"
                      },
                      "spec": {
                        "locations": [
                          {
                            "name": "sjc",
                            "replicas": 2
                          },
                          {
                            "name": "ams",
                            "replicas": 1
                          }
                        ]
                      }
                    }
                  },
                  "properties": {
                    "apiVersion": {
                      "type": "string",
                      "enum": [
                        "v1"
                      ]
                    },
                    "Kind": {
                      "type": "string",
                      "enum": [
                        "Location"
                      ],
                      "description": "Use \"Location\", an ECP custom resource, to pick ECP locations and precisely place your application instances."
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Name of a \"Location\" resource. Must be the same as the query param \"appName\"."
                        }
                      }
                    },
                    "spec": {
                      "type": "object",
                      "required": [
                        "locations"
                      ],
                      "properties": {
                        "locations": {
                          "type": "array",
                          "description": "Array of target ECP locations",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "Code of an ECP location, e.g. \"sjc1\" which stands for the ECP location at San Jose, US."
                              },
                              "replicas": {
                                "type": "integer",
                                "description": "Number of pods (i.e. application instances) desired at an ECP location",
                                "minimum": 1
                              }
                            },
                            "required": [
                              "name",
                              "replicas"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "apiVersion",
                    "Kind",
                    "metadata",
                    "spec"
                  ]
                }
              ]
            }
          ]
        }
      },
      "application.spec.replicaset": {
        "title": "ReplicaSet",
        "type": "object",
        "x-examples": {
          "example-1": {}
        },
        "description": "ReplicaSet",
        "properties": {
          "apiVersion": {
            "type": "string",
            "enum": [
              "apps/v1"
            ]
          },
          "Kind": {
            "type": "string",
            "description": "Use Kubernetes \"ReplicaSet\" as workload controller if your application does not require persistent storage. Refer to <a href=\"https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/\">Kubernetes official documentation </a> for more about the controller.",
            "enum": [
              "ReplicaSet"
            ]
          },
          "metadata": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of a \"ReplicaSet\" resource. Must be the same as the query param \"appName\"."
              }
            }
          },
          "spec": {
            "type": "object",
            "description": "This document only focuses on some typical configs of  a ReplicaSet object. For more about how to specify a ReplicaSet, please refer to the <a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.17/#replicaset-v1-apps\">official Kubernetes API reference</a>",
            "required": [
              "selector",
              "template"
            ],
            "properties": {
              "selector": {
                "type": "object",
                "description": "A label query over pods. Must match the pod template's labels.",
                "required": [
                  "matchLabels"
                ],
                "properties": {
                  "matchLabels": {
                    "type": "object",
                    "description": "A map of key value pairs"
                  }
                }
              },
              "template": {
                "type": "object",
                "description": "Template of the pods that will be created by the ReplicaSet",
                "required": [
                  "metadata",
                  "spec"
                ],
                "properties": {
                  "metadata": {
                    "type": "object",
                    "required": [
                      "labels"
                    ],
                    "properties": {
                      "labels": {
                        "type": "object",
                        "description": "Map of string keys and values that can be used to organize and categorize pods. Must match selector of the ReplicaSet"
                      },
                      "annotations": {
                        "type": "object",
                        "description": "An unstructured key value map stored with a pod",
                        "properties": {
                          "quantil.com/enableExternalIP": {
                            "type": "boolean",
                            "default": false,
                            "description": "Pass this annotation and set to true if you would like to enable public IPv4 network interface for the pod. Alternatively, you can specify an ECP \"LoadBalancer4\" object for your ECP application to expose the pod. "
                          },
                          "quantil.com/enableIpv6ExternalIP": {
                            "type": "boolean",
                            "default": false,
                            "description": "Pass this annotation and set to true if you would like to enable public IPv6 network interface for the pod. Alternatively, you can specify an ECP custom \"LoadBalancer4\" object for your ECP application to expose the pod. "
                          }
                        }
                      }
                    }
                  },
                  "spec": {
                    "type": "object",
                    "description": "Specifications of desired behavior of the pod",
                    "required": [
                      "containers"
                    ],
                    "properties": {
                      "containers": {
                        "type": "array",
                        "description": "List of containers coupled in the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "image": {
                              "type": "string",
                              "description": "Docker image name"
                            },
                            "name": {
                              "type": "string",
                              "description": "Name of the container specified as a DNS_LABEL"
                            },
                            "resources": {
                              "type": "object",
                              "description": "Compute Resources required by this container. Cannot be updated.",
                              "required": [
                                "limits"
                              ],
                              "properties": {
                                "limits": {
                                  "type": "object",
                                  "description": "The maximum amount of compute resources required",
                                  "required": [
                                    "cpu",
                                    "memory"
                                  ],
                                  "properties": {
                                    "cpu": {
                                      "type": "string",
                                      "description": "The amount of CPU required. Minimum 0.05 core. The sum of limits.cpu required by all containers in the pod must not exceed 24 cores."
                                    },
                                    "memory": {
                                      "type": "string",
                                      "description": "The amount of memory required. Minimum 50 MB. The sum of limits.memory required by all containers in the pod must not exceed 128 GB."
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "required": [
                            "image",
                            "name",
                            "resources"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "required": [
          "apiVersion",
          "Kind",
          "metadata",
          "spec"
        ]
      },
      "application.spec.deployment": {
        "title": "Deployment",
        "type": "object",
        "x-examples": {
          "example-1": {}
        },
        "description": "Deployment",
        "properties": {
          "apiVersion": {
            "type": "string",
            "enum": [
              "apps/v1"
            ]
          },
          "Kind": {
            "type": "string",
            "description": "Use Kubernetes \"Deployment\" as workload controller if your application does not require persistent storage. Refer to <a href=\"https://kubernetes.io/docs/concepts/workloads/controllers/deployment/\">Kubernetes official documentation </a> for more about the controller.",
            "enum": [
              "Deployment"
            ]
          },
          "metadata": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of a \"Deployment\" resource. Must be the same as the query param \"appName\"."
              }
            }
          },
          "spec": {
            "type": "object",
            "description": "This document only focuses on some typical configs of  a Deployment object. For more about how to specify a Deployment, please refer to the <a href=\"https://v1-17.docs.kubernetes.io/docs/reference/generated/kubernetes-api/v1.17/#deployment-v1-apps\">official Kubernetes API reference</a>.",
            "required": [
              "selector",
              "template"
            ],
            "properties": {
              "selector": {
                "type": "object",
                "description": "A label query over pods. Must match the pod template's labels.",
                "required": [
                  "matchLabels"
                ],
                "properties": {
                  "matchLabels": {
                    "type": "object",
                    "description": "A map of key value pairs"
                  }
                }
              },
              "template": {
                "type": "object",
                "description": "Template of the pods that will be created by the Deployment",
                "required": [
                  "metadata",
                  "spec"
                ],
                "properties": {
                  "metadata": {
                    "type": "object",
                    "required": [
                      "labels"
                    ],
                    "properties": {
                      "labels": {
                        "type": "object",
                        "description": "Map of string keys and values that can be used to organize and categorize pods. Must match selector of the Deployment"
                      },
                      "annotations": {
                        "type": "object",
                        "description": "An unstructured key value map stored with a pod",
                        "properties": {
                          "quantil.com/enableExternalIP": {
                            "type": "boolean",
                            "default": false,
                            "description": "Pass this annotation and set to true if you would like to enable public IPv4 network interface for the pod. Alternatively, you can specify an ECP \"LoadBalancer4\" object for your ECP application to expose the pod. "
                          },
                          "quantil.com/enableIpv6ExternalIP": {
                            "type": "boolean",
                            "default": false,
                            "description": "Set this annotation to true if you would like to have a public IPv6 address for the pod. Alternatively, you can create an ECP custom \"LoadBalancer4\" object for your ECP application to expose the pod. "
                          }
                        }
                      }
                    }
                  },
                  "spec": {
                    "type": "object",
                    "description": "Specification of desired behavior of the pod",
                    "required": [
                      "containers"
                    ],
                    "properties": {
                      "containers": {
                        "type": "array",
                        "description": "List of containers coupled in the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "image": {
                              "type": "string",
                              "description": "Docker image name"
                            },
                            "name": {
                              "type": "string",
                              "description": "Name of the container specified as a DNS_LABEL"
                            },
                            "resources": {
                              "type": "object",
                              "description": "Compute Resources required by this container. Cannot be updated.",
                              "required": [
                                "limits"
                              ],
                              "properties": {
                                "limits": {
                                  "type": "object",
                                  "description": "The maximum amount of compute resources required",
                                  "required": [
                                    "cpu",
                                    "memory"
                                  ],
                                  "properties": {
                                    "cpu": {
                                      "type": "string",
                                      "description": "The amount of CPU required. Minimum 0.05 core. The sum of limits.cpu required by all containers in the pod must not exceed 24 cores."
                                    },
                                    "memory": {
                                      "type": "string",
                                      "description": "The amount of memory required. Minimum 50 MB. The sum of limits.memory required by all containers in the pod must not exceed 128 GB."
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "required": [
                            "image",
                            "name",
                            "resources"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "required": [
          "apiVersion",
          "Kind",
          "metadata",
          "spec"
        ]
      },
      "application.spec.target": {
        "title": "ECP Target",
        "oneOf": [
          {
            "title": "RegionPreference",
            "type": "object",
            "x-examples": {
              "example-1": {
                "apiVersion": "v1",
                "kind": "RegionPreference",
                "metadata": {
                  "name": "myapp",
                  "namespace": "demo"
                },
                "spec": {
                  "regions": [
                    {
                      "name": "NA-WEST",
                      "replicas": 6
                    },
                    {
                      "name": "EU",
                      "replicas": 4
                    }
                  ]
                }
              }
            },
            "description": "Region",
            "properties": {
              "apiVersion": {
                "type": "string",
                "enum": [
                  "v1"
                ]
              },
              "Kind": {
                "type": "string",
                "description": "Use \"RegionPreference\", an ECP custom resource, to specify ECP regions and have your application instances automatically distributed across locations within each ECP region. ",
                "enum": [
                  "RegionPreference"
                ]
              },
              "metadata": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of a \"RegionPreference\" resource. Must be the same as the query param \"appName\"."
                  }
                }
              },
              "spec": {
                "type": "object",
                "required": [
                  "regions"
                ],
                "properties": {
                  "regions": {
                    "type": "array",
                    "description": "Array of target ECP regions to distribute your application instances",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Code of an ECP region, e.g. \"NA-WEST\" which stands for west of North America."
                        },
                        "replicas": {
                          "type": "integer",
                          "description": "The total number of pods (i.e. application instances) desired across locations within an ECP region",
                          "minimum": 1
                        }
                      },
                      "required": [
                        "name",
                        "replicas"
                      ]
                    }
                  }
                }
              }
            },
            "required": [
              "apiVersion",
              "Kind",
              "metadata",
              "spec"
            ]
          },
          {
            "title": "Location",
            "type": "object",
            "description": "Location",
            "x-examples": {
              "example-1": {
                "apiVersion": "v1",
                "kind": "Location",
                "metadata": {
                  "name": "myapp",
                  "namespace": "demo"
                },
                "spec": {
                  "locations": [
                    {
                      "name": "sjc",
                      "replicas": 2
                    },
                    {
                      "name": "ams",
                      "replicas": 1
                    }
                  ]
                }
              }
            },
            "properties": {
              "apiVersion": {
                "type": "string",
                "enum": [
                  "v1"
                ]
              },
              "Kind": {
                "type": "string",
                "enum": [
                  "Location"
                ],
                "description": "Use \"Location\", an ECP custom resource, to pick ECP locations and precisely place your application instances."
              },
              "metadata": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of a \"Location\" resource. Must be the same as the query param \"appName\"."
                  }
                }
              },
              "spec": {
                "type": "object",
                "required": [
                  "locations"
                ],
                "properties": {
                  "locations": {
                    "type": "array",
                    "description": "Array of target ECP locations",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Code of an ECP location, e.g. \"sjc1\" which stands for the ECP location at San Jose, US."
                        },
                        "replicas": {
                          "type": "integer",
                          "description": "Number of pods (i.e. application instances) desired at an ECP location",
                          "minimum": 1
                        }
                      },
                      "required": [
                        "name",
                        "replicas"
                      ]
                    }
                  }
                }
              }
            },
            "required": [
              "apiVersion",
              "Kind",
              "metadata",
              "spec"
            ]
          }
        ]
      },
      "application.spec.workload": {
        "title": "Kubernetes Workload",
        "oneOf": [
          {
            "title": "Deployment",
            "type": "object",
            "x-examples": {
              "example-1": {}
            },
            "description": "Deployment",
            "properties": {
              "apiVersion": {
                "type": "string",
                "enum": [
                  "apps/v1"
                ]
              },
              "Kind": {
                "type": "string",
                "description": "Use Kubernetes \"Deployment\" as workload controller if your application does not require persistent storage. Refer to <a href=\"https://kubernetes.io/docs/concepts/workloads/controllers/deployment/\">Kubernetes official documentation </a> for more about the controller.",
                "enum": [
                  "Deployment"
                ]
              },
              "metadata": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of a \"Deployment\" resource. Must be the same as the query param \"appName\"."
                  }
                }
              },
              "spec": {
                "type": "object",
                "description": "This document only focuses on some typical configs of  a Deployment object. For more about how to specify a Deployment, please refer to the <a href=\"https://v1-17.docs.kubernetes.io/docs/reference/generated/kubernetes-api/v1.17/#deployment-v1-apps\">official Kubernetes API reference</a>.",
                "required": [
                  "selector",
                  "template"
                ],
                "properties": {
                  "selector": {
                    "type": "object",
                    "description": "A label query over pods. Must match the pod template's labels.",
                    "required": [
                      "matchLabels"
                    ],
                    "properties": {
                      "matchLabels": {
                        "type": "object",
                        "description": "A map of key value pairs"
                      }
                    }
                  },
                  "template": {
                    "type": "object",
                    "description": "Template of the pods that will be created by the Deployment",
                    "required": [
                      "metadata",
                      "spec"
                    ],
                    "properties": {
                      "metadata": {
                        "type": "object",
                        "required": [
                          "labels"
                        ],
                        "properties": {
                          "labels": {
                            "type": "object",
                            "description": "Map of string keys and values that can be used to organize and categorize pods. Must match selector of the Deployment"
                          },
                          "annotations": {
                            "type": "object",
                            "description": "An unstructured key value map stored with a pod",
                            "properties": {
                              "quantil.com/enableExternalIP": {
                                "type": "boolean",
                                "default": false,
                                "description": "Pass this annotation and set to true if you would like to enable public IPv4 network interface for the pod. Alternatively, you can specify an ECP \"LoadBalancer4\" object for your ECP application to expose the pod. "
                              },
                              "quantil.com/enableIpv6ExternalIP": {
                                "type": "boolean",
                                "default": false,
                                "description": "Set this annotation to true if you would like to have a public IPv6 address for the pod. Alternatively, you can create an ECP custom \"LoadBalancer4\" object for your ECP application to expose the pod. "
                              }
                            }
                          }
                        }
                      },
                      "spec": {
                        "type": "object",
                        "description": "Specification of desired behavior of the pod",
                        "required": [
                          "containers"
                        ],
                        "properties": {
                          "containers": {
                            "type": "array",
                            "description": "List of containers coupled in the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "image": {
                                  "type": "string",
                                  "description": "Docker image name"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Name of the container specified as a DNS_LABEL"
                                },
                                "resources": {
                                  "type": "object",
                                  "description": "Compute Resources required by this container. Cannot be updated.",
                                  "required": [
                                    "limits"
                                  ],
                                  "properties": {
                                    "limits": {
                                      "type": "object",
                                      "description": "The maximum amount of compute resources required",
                                      "required": [
                                        "cpu",
                                        "memory"
                                      ],
                                      "properties": {
                                        "cpu": {
                                          "type": "string",
                                          "description": "The amount of CPU required. Minimum 0.05 core. The sum of limits.cpu required by all containers in the pod must not exceed 24 cores."
                                        },
                                        "memory": {
                                          "type": "string",
                                          "description": "The amount of memory required. Minimum 50 MB. The sum of limits.memory required by all containers in the pod must not exceed 128 GB."
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "required": [
                                "image",
                                "name",
                                "resources"
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "required": [
              "apiVersion",
              "Kind",
              "metadata",
              "spec"
            ]
          },
          {
            "title": "ReplicaSet",
            "type": "object",
            "x-examples": {
              "example-1": {}
            },
            "description": "ReplicaSet",
            "properties": {
              "apiVersion": {
                "type": "string",
                "enum": [
                  "apps/v1"
                ]
              },
              "Kind": {
                "type": "string",
                "description": "Use Kubernetes \"ReplicaSet\" as workload controller if your application does not require persistent storage. Refer to <a href=\"https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/\">Kubernetes official documentation </a> for more about the controller.",
                "enum": [
                  "ReplicaSet"
                ]
              },
              "metadata": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of a \"ReplicaSet\" resource. Must be the same as the query param \"appName\"."
                  }
                }
              },
              "spec": {
                "type": "object",
                "description": "This document only focuses on some typical configs of  a ReplicaSet object. For more about how to specify a ReplicaSet, please refer to the <a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.17/#replicaset-v1-apps\">official Kubernetes API reference</a>",
                "required": [
                  "selector",
                  "template"
                ],
                "properties": {
                  "selector": {
                    "type": "object",
                    "description": "A label query over pods. Must match the pod template's labels.",
                    "required": [
                      "matchLabels"
                    ],
                    "properties": {
                      "matchLabels": {
                        "type": "object",
                        "description": "A map of key value pairs"
                      }
                    }
                  },
                  "template": {
                    "type": "object",
                    "description": "Template of the pods that will be created by the ReplicaSet",
                    "required": [
                      "metadata",
                      "spec"
                    ],
                    "properties": {
                      "metadata": {
                        "type": "object",
                        "required": [
                          "labels"
                        ],
                        "properties": {
                          "labels": {
                            "type": "object",
                            "description": "Map of string keys and values that can be used to organize and categorize pods. Must match selector of the ReplicaSet"
                          },
                          "annotations": {
                            "type": "object",
                            "description": "An unstructured key value map stored with a pod",
                            "properties": {
                              "quantil.com/enableExternalIP": {
                                "type": "boolean",
                                "default": false,
                                "description": "Pass this annotation and set to true if you would like to enable public IPv4 network interface for the pod. Alternatively, you can specify an ECP \"LoadBalancer4\" object for your ECP application to expose the pod. "
                              },
                              "quantil.com/enableIpv6ExternalIP": {
                                "type": "boolean",
                                "default": false,
                                "description": "Pass this annotation and set to true if you would like to enable public IPv6 network interface for the pod. Alternatively, you can specify an ECP custom \"LoadBalancer4\" object for your ECP application to expose the pod. "
                              }
                            }
                          }
                        }
                      },
                      "spec": {
                        "type": "object",
                        "description": "Specifications of desired behavior of the pod",
                        "required": [
                          "containers"
                        ],
                        "properties": {
                          "containers": {
                            "type": "array",
                            "description": "List of containers coupled in the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "image": {
                                  "type": "string",
                                  "description": "Docker image name"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Name of the container specified as a DNS_LABEL"
                                },
                                "resources": {
                                  "type": "object",
                                  "description": "Compute Resources required by this container. Cannot be updated.",
                                  "required": [
                                    "limits"
                                  ],
                                  "properties": {
                                    "limits": {
                                      "type": "object",
                                      "description": "The maximum amount of compute resources required",
                                      "required": [
                                        "cpu",
                                        "memory"
                                      ],
                                      "properties": {
                                        "cpu": {
                                          "type": "string",
                                          "description": "The amount of CPU required. Minimum 0.05 core. The sum of limits.cpu required by all containers in the pod must not exceed 24 cores."
                                        },
                                        "memory": {
                                          "type": "string",
                                          "description": "The amount of memory required. Minimum 50 MB. The sum of limits.memory required by all containers in the pod must not exceed 128 GB."
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "required": [
                                "image",
                                "name",
                                "resources"
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "required": [
              "apiVersion",
              "Kind",
              "metadata",
              "spec"
            ]
          },
          {
            "title": "StatefulSet",
            "type": "object",
            "description": "StatefulSet",
            "x-examples": {
              "example-1": {}
            },
            "properties": {
              "apiVersion": {
                "type": "string",
                "enum": [
                  "apps/v1"
                ]
              },
              "Kind": {
                "type": "string",
                "description": "Use Kubernetes \"StatefulSet\" as workload controller if your application requires persistent storage. Refer to <a href=\"https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/\">Kubernetes official documentation </a> for more about the controller.",
                "enum": [
                  "StatefulSet"
                ]
              },
              "metadata": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of a \"StatefulSet\" resource. Must be the same as the query param \"appName\"."
                  }
                }
              },
              "spec": {
                "type": "object",
                "description": "This document only focuses on some typical configs of  a StatefulSet object. For more about how to specify a StatefulSet, please refer to the <a href=\"https://v1-17.docs.kubernetes.io/docs/reference/generated/kubernetes-api/v1.17/#statefulset-v1-apps\"> official kubernetes API reference</a>.",
                "required": [
                  "selector",
                  "template"
                ],
                "properties": {
                  "selector": {
                    "type": "object",
                    "description": "A label query over pods. Must match the pod template's labels.",
                    "required": [
                      "matchLabels"
                    ],
                    "properties": {
                      "matchLabels": {
                        "type": "object",
                        "description": "A map of key value pairs"
                      }
                    }
                  },
                  "template": {
                    "type": "object",
                    "description": "Template of the pods that will be created by the StatefulSet",
                    "required": [
                      "metadata",
                      "spec"
                    ],
                    "properties": {
                      "metadata": {
                        "type": "object",
                        "required": [
                          "labels"
                        ],
                        "properties": {
                          "labels": {
                            "type": "object",
                            "description": "Map of string keys and values that can be used to organize and categorize pods. Must match selector of the StatefulSet"
                          },
                          "annotations": {
                            "type": "object",
                            "description": "An unstructured key value map stored with a pod",
                            "properties": {
                              "quantil.com/enableExternalIP": {
                                "type": "boolean",
                                "default": false,
                                "description": "Pass this annotation and set to true if you would like to enable public IPv4 network interface for the pod. Alternatively, you can specify an ECP \"LoadBalancer4\" object for your ECP application to expose the pod."
                              },
                              "quantil.com/enableIpv6ExternalIP": {
                                "type": "boolean",
                                "default": false,
                                "description": "Pass this annotation and set to true if you would like to enable public IPv6 network interface for the pod. Alternatively, you can specify an ECP \"LoadBalancer4\" object for your ECP application to expose the pod."
                              }
                            }
                          }
                        }
                      },
                      "spec": {
                        "type": "object",
                        "description": "Specification of desired behavior of the pod",
                        "required": [
                          "containers"
                        ],
                        "properties": {
                          "containers": {
                            "type": "array",
                            "description": "List of containers coupled in the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.",
                            "items": {
                              "type": "object",
                              "properties": {
                                "image": {
                                  "type": "string",
                                  "description": "Docker image name"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Name of the container specified as a DNS_LABEL"
                                },
                                "resources": {
                                  "type": "object",
                                  "description": "Compute Resources required by this container. Cannot be updated.",
                                  "required": [
                                    "limits"
                                  ],
                                  "properties": {
                                    "limits": {
                                      "type": "object",
                                      "description": "The maximum amount of compute resources required",
                                      "required": [
                                        "cpu",
                                        "memory"
                                      ],
                                      "properties": {
                                        "cpu": {
                                          "type": "string",
                                          "description": "The amount of CPU required. Minimum 0.05 core. The sum of limits.cpu required by all containers in the pod must not exceed 24 cores."
                                        },
                                        "memory": {
                                          "type": "string",
                                          "description": "The amount of memory required. Minimum 50 MB. The sum of limits.memory required by all containers in the pod must not exceed 128 GB."
                                        }
                                      }
                                    }
                                  }
                                },
                                "volumeMounts": {
                                  "type": "array",
                                  "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "type": "string",
                                        "description": "This must match the Name of a Volume"
                                      },
                                      "mountPath": {
                                        "type": "string",
                                        "description": "Path within the container at which the volume should be mounted. Must not contain ':'."
                                      }
                                    }
                                  }
                                }
                              },
                              "required": [
                                "image",
                                "name",
                                "resources"
                              ]
                            }
                          }
                        }
                      }
                    }
                  },
                  "volumeClaimTemplates": {
                    "type": "array",
                    "description": "A list of persistent volume claims that pods are allowed to reference. Every claim in this list must have at least one matching (by name) volumeMount in one container in the pod template.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "metadata": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "Name of a volume claim"
                            },
                            "annotations": {
                              "type": "object",
                              "properties": {
                                "volume.beta.kubernetes.io/storage-class": {
                                  "type": "string",
                                  "enum": [
                                    "local-ssd"
                                  ],
                                  "description": "Specifiy the storageClass of a volume claim. Currently only \"local-ssd\" is available. \"local-ssd\" means local persistent SSD storage. Data is stored locally and persists across container restarts, but will be lost when pod is rescheduled to another node. "
                                }
                              }
                            }
                          }
                        },
                        "spec": {
                          "type": "object",
                          "properties": {
                            "accessModes": {
                              "type": "array",
                              "description": "The desired access modes the volume claim should have. Should be \"ReadWriteOnce\".",
                              "items": {
                                "type": "string",
                                "enum": [
                                  "ReadWriteOnce"
                                ]
                              }
                            },
                            "resources": {
                              "type": "object",
                              "description": "The resources the volume claim should have",
                              "properties": {
                                "requests": {
                                  "type": "object",
                                  "description": "The minimum amount of resources required",
                                  "properties": {
                                    "storage": {
                                      "type": "string",
                                      "description": "The storage capacity required. Must be not less than 500MB and not higher than 100GB."
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "required": [
              "apiVersion",
              "Kind",
              "metadata",
              "spec"
            ]
          }
        ]
      },
      "report.data": {
        "title": "",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "Array of time serialized metric values",
            "items": {
              "type": "object",
              "properties": {
                "timestamp": {
                  "type": "string",
                  "description": "An RFC 3339 format date representing the beginning of a time interval. It is always in UTC time."
                },
                "value": {
                  "type": "number",
                  "description": "A value at that timestamp"
                }
              }
            }
          }
        }
      },
      "report.pod.diskusage": {
        "title": "Disk utilization report",
        "type": "object",
        "description": "",
        "properties": {
          "data": {
            "type": "array",
            "description": "Array of time serialized metric values. This schema is used when the metric param is of the value 'diskUsage'.",
            "items": {
              "type": "object",
              "properties": {
                "timestamp": {
                  "type": "string",
                  "description": "An RFC 3339 format date representing the beginning of a time interval. It is always in UTC time."
                },
                "volumes": {
                  "type": "array",
                  "description": "Array of volumes for an application instance, including container rootFS and data volumes (if any).",
                  "items": {
                    "type": "object",
                    "properties": {
                      "volume": {
                        "type": "string",
                        "description": "Name of a volume. \"Root_{containername}\" means the RootFS of {containername}. \"PVC_{PVCname}\" means a data volume which is backed by a PVC (persistentVolumeClaim)."
                      },
                      "value": {
                        "type": "number",
                        "description": "Disk utilization rate, e.g. \"0.2\" means 20% of disk capacity is used."
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "report.pod.metrics": {
        "title": "CPU/memory/traffic report",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "Array of time serialized metric values. This schema is used when the metric param is of a value other than 'diskUsage'.",
            "items": {
              "type": "object",
              "properties": {
                "timestamp": {
                  "type": "string",
                  "description": "An RFC 3339 format date representing the beginning of a time interval. It is always in UTC time."
                },
                "value": {
                  "type": "number",
                  "description": "A value at that timestamp"
                }
              }
            }
          }
        }
      },
      "report.servicezone.data": {
        "title": "",
        "type": "object",
        "properties": {
          "series": {
            "type": "array",
            "description": "Summary of resource usage grouped per service zones",
            "items": {
              "type": "object",
              "properties": {
                "serviceZone": {
                  "type": "string",
                  "enum": [
                    "business",
                    "standard",
                    "premium"
                  ],
                  "description": "ECP service zone"
                },
                "data": {
                  "type": "array",
                  "description": "Array of time serialized metric values",
                  "items": {
                    "type": "object",
                    "properties": {
                      "timestamp": {
                        "type": "string",
                        "description": "An RFC 3339 format date representing the beginning of a time interval. It is always in UTC time."
                      },
                      "value": {
                        "type": "number",
                        "description": "A value at that timestamp"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "report.servergroup.data": {
        "title": "",
        "type": "object",
        "properties": {
          "series": {
            "type": "array",
            "description": "Summary of resource usage grouped per ECP server groups",
            "items": {
              "type": "object",
              "properties": {
                "serverGroup": {
                  "type": "string",
                  "enum": [
                    "standard",
                    "premium",
                    "premium+",
                    "ultra"
                  ],
                  "description": "ECP server group"
                },
                "data": {
                  "type": "array",
                  "description": "Array of time serialized metric values",
                  "items": {
                    "type": "object",
                    "properties": {
                      "timestamp": {
                        "type": "string",
                        "description": "An RFC 3339 format date representing the beginning of a time interval. It is always in UTC time."
                      },
                      "value": {
                        "type": "number",
                        "description": "A value at that timestamp"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "application.message": {
        "title": "",
        "type": "string",
        "description": "Message related to the deployment status of an ECP application"
      },
      "project.id": {
        "title": "",
        "type": "integer",
        "description": "ID of a registry project"
      },
      "project.name": {
        "title": "",
        "type": "string",
        "description": "Name of a registry project. Must be unique globally. Allows lower case alphanumeric characters, ‘-’, ‘_’ and ‘.’ only, must start and end with an alphanumeric character, and must be not more than 128 characters."
      },
      "project.createdBy": {
        "title": "",
        "type": "string",
        "description": "Name of apiAccount or contact who created the registry project"
      },
      "project.accessLevel": {
        "title": "",
        "type": "string",
        "description": "How a registry project is accessible to registry users"
      },
      "project.preventVulnerable": {
        "title": "",
        "type": "boolean",
        "description": "Whether to prevent vulnerable images from running. Default to false."
      },
      "project.severity": {
        "type": "string",
        "title": "",
        "description": "If \"preventVulnerable\" is enabled and the vulnerability of an image is equal to or higher than severity defined here, the image can't be pulled.",
        "default": "low",
        "enum": [
          "negligible",
          "low",
          "medium",
          "high"
        ]
      },
      "project.autoScan": {
        "title": "",
        "type": "boolean",
        "description": "Whether to scan images automatically when images are pushed to registry. Default to false."
      },
      "common.error": {
        "title": "",
        "type": "object",
        "description": "A standard error object",
        "properties": {
          "error": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "project.repoCount": {
        "title": "",
        "type": "integer",
        "description": "Number of repositories under a registry project"
      },
      "repo.id": {
        "title": "",
        "type": "integer",
        "description": "ID of an image repository"
      },
      "repo.name": {
        "title": "",
        "type": "string",
        "description": "Name of an image repository"
      },
      "repo.description": {
        "title": "",
        "type": "string",
        "description": "Arbitrary text describing an image repository"
      },
      "repo.pullCount": {
        "title": "",
        "type": "integer",
        "description": "The number of image pulls from an image repository"
      },
      "repo.tagsCount": {
        "title": "",
        "type": "integer",
        "description": "The number of tags in an image repository"
      },
      "tag": {
        "title": "",
        "type": "object",
        "description": "",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of a tag"
          },
          "digest": {
            "type": "string",
            "description": "Digest of a tag"
          },
          "size": {
            "type": "integer",
            "description": "Size of the image, measured in bytes"
          },
          "architecture": {
            "type": "string",
            "description": "Architecture of the image"
          },
          "os": {
            "type": "string",
            "description": "OS of the image"
          },
          "dockerVersion": {
            "type": "string",
            "description": "The version of docker which builds the image"
          },
          "author": {
            "type": "string",
            "description": "Author of the image"
          },
          "creationTime": {
            "type": "string",
            "description": "Datetime when the image is built"
          },
          "scanOverview": {
            "type": "object",
            "description": "Overview of previous scan result",
            "properties": {
              "status": {
                "type": "string",
                "description": "Status of the scan",
                "enum": [
                  "pending",
                  "running",
                  "finished",
                  "error"
                ]
              },
              "severity": {
                "type": "string",
                "description": "High-level severity rating",
                "enum": [
                  "Not scanned",
                  "Negligible",
                  "Unknown",
                  "Low",
                  "Medium",
                  "High"
                ]
              },
              "started": {
                "type": "string",
                "description": "Datetime when the scan is started"
              },
              "completed": {
                "type": "string",
                "description": "Datetime when the scan is completed"
              },
              "components": {
                "type": "object",
                "description": "The components overview of the image",
                "properties": {
                  "total": {
                    "description": "Total number of the components in this image",
                    "type": "integer"
                  },
                  "summary": {
                    "type": "array",
                    "description": "Number of components in different severities",
                    "items": {
                      "type": "object",
                      "properties": {
                        "severity": {
                          "type": "string",
                          "description": "Severity of a component",
                          "enum": [
                            "None",
                            "Unknown",
                            "Low",
                            "Medium",
                            "High"
                          ]
                        },
                        "count": {
                          "type": "integer",
                          "description": "Number of components with certain severity"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "user.userID": {
        "title": "",
        "type": "integer",
        "description": "ID of a registry user"
      },
      "user.username": {
        "title": "",
        "type": "string",
        "description": "Username of a registry user"
      },
      "user.email": {
        "title": "",
        "type": "string",
        "description": "Email address of the registry user"
      },
      "user.description": {
        "title": "",
        "type": "string",
        "description": "Arbitrary text about the registry user. Must be not more than 20 characters."
      },
      "user.project.accessType": {
        "type": "string",
        "title": "",
        "description": "How a project is accessible to a registry user. Can be one of:\n“readonly”: has the permissions to pull images under a project;\n“readwrite”: has the permissions to push/pull images to/from a project.",
        "enum": [
          "readonly",
          "readwrite"
        ]
      },
      "user.createdBy": {
        "title": "",
        "type": "string",
        "description": "Name of contact or apiAccount who creates the registry user"
      },
      "quota.serviceQuotaID": {
        "title": "quota.serviceQuotaID",
        "type": "string",
        "description": "ID of a serviceQuota. Unless otherwise stated, the ID of the customer that a serviceQuota is created for is reused as the ID of the serviceQuota. "
      },
      "quota.customerID": {
        "title": "quota.customerID",
        "type": "string",
        "description": "ID of the customer that a serviceQuota is created for."
      },
      "quota.namespace": {
        "title": "quota.namespace",
        "type": "string",
        "description": "The Kubernetes namespace to be created for a customer in underlying ECP Kubernetes clusters (i.e. ECP locations). Allows only digits, lower-case letters and hyphens. Must be unique globally and no more than 63 characters."
      },
      "quota.status": {
        "type": "string",
        "title": "quota.status",
        "description": "Status of a serviceQuota, which represents the status of ECP service subscription by a customer. The “trial” status means the customer is using ECP service as a free trial. When the status is set to \"suspended\", any requests from the customer will be rejected by ECP API server. \n\nThis status is related to ECP service only. It doesn’t affect other products subscribed by the customer.",
        "enum": [
          "active",
          "suspended",
          "trial"
        ],
        "default": "suspended"
      },
      "quota.contractID": {
        "title": "quota.contractID",
        "type": "string",
        "description": "ID representing the ECP service contract, used for billing. Required when “billUsingStripe” set to true."
      },
      "quota.allowDeploymentInChina": {
        "type": "boolean",
        "title": "quota.allowDeploymentInChina",
        "description": "Whether a customer is allowed to deploy their applications to ECP locations in mainland China. When this is set to false, the customer will not be allowed to pick mainland China locations or the \"CN\" region to deploy their applications.",
        "default": false
      },
      "quota.description": {
        "title": "quota.description",
        "type": "string",
        "description": "Arbitrary text about a serviceQuota"
      },
      "quota.resourceQuotas": {
        "title": "quota.resourceQuotas",
        "type": "object",
        "description": "Global resource quotas limiting the maximum amounts of ECP resources available to a customer across all ECP locations",
        "properties": {
          "cpu": {
            "type": "integer",
            "description": "Maximum total number of vCPU cores available to a customer across all ECP locations. Measured in \"core\".",
            "minimum": 1,
            "maximum": 5000
          },
          "memory": {
            "type": "integer",
            "description": "Maximum total amount of memory available to a customer across all ECP locations. Measured in \"GB\".",
            "minimum": 1,
            "maximum": 10000
          },
          "publicIPv4Addresses": {
            "type": "integer",
            "description": "Maximum total number of public IPv4 addresses available to a customer across all ECP locations. Must be within the range 0-2,000. 0 means no public IPv4 address is available.",
            "minimum": 0,
            "maximum": 2000
          },
          "applications": {
            "type": "integer",
            "description": "Maximum total number of applications that can be deployed to ECP",
            "default": 50,
            "minimum": 1,
            "maximum": 1000
          },
          "pods": {
            "type": "integer",
            "description": "Maximum total number of Kubernetes pods that can be deployed to ECP Kubernetes clusters (i.e. ECP locations)",
            "default": 500,
            "minimum": 1,
            "maximum": 10000
          },
          "localSSDStorage": {
            "type": "integer",
            "description": "Maximum storage capacity of type \"local solid state drive\" available to a customer across all ECP locations. Measured in \"GB\". Default to 0, means no storage capacity is available.",
            "default": 0,
            "minimum": 0,
            "maximum": 20000
          },
          "persistSSDStorage": {
            "type": "integer",
            "description": "Maximum storage capacity of type \"persist solid state drive\" available to a customer across all ECP locations.  Unlike local SSD storage, data kept in persist SSD storage is replicated across multiple servers for redundancy. Measured in \"GB\". Default to 0, means no storage capacity is available.",
            "default": 0,
            "minimum": 0,
            "maximum": 20000
          },
          "tagsInRegistry": {
            "type": "integer",
            "description": "Maximum total number of docker image tags that can be pushed to ECP image registry",
            "default": 50,
            "minimum": 1,
            "maximum": 200
          },
          "storageInRegistry": {
            "type": "integer",
            "description": "Maximum storage capacity available to a customer to store container images in ECP image registry. Measured in GB.",
            "default": 10,
            "minimum": 1,
            "maximum": 1000
          }
        },
        "required": [
          "cpu",
          "memory",
          "publicIPv4Addresses"
        ]
      },
      "quota.resourceQuotas(1)": {
        "title": "quota.resourceQuotas",
        "type": "object",
        "description": "Global resource quotas limiting the maximum amounts of ECP resources available to a customer across all ECP locations",
        "properties": {
          "cpu": {
            "type": "integer",
            "description": "Maximum total number of vCPU cores available to a customer across all ECP locations. Measured in \"core\".",
            "minimum": 1,
            "maximum": 5000
          },
          "memory": {
            "type": "integer",
            "description": "Maximum total amount of memory available to a customer across all ECP locations. Measured in \"GB\".",
            "minimum": 1,
            "maximum": 10000
          },
          "publicIPv4Addresses": {
            "type": "integer",
            "description": "Maximum total number of public IPv4 addresses available to a customer across all ECP locations. Must be within the range 0-2,000. 0 means no public IPv4 address is available.",
            "minimum": 0,
            "maximum": 2000
          },
          "applications": {
            "type": "integer",
            "description": "Maximum total number of applications that can be deployed to ECP",
            "default": 50,
            "minimum": 1,
            "maximum": 1000
          },
          "pods": {
            "type": "integer",
            "description": "Maximum total number of Kubernetes pods that can be deployed to ECP Kubernetes clusters (i.e ECP locations)",
            "default": 500,
            "minimum": 1,
            "maximum": 10000
          },
          "localSSDStorage": {
            "type": "integer",
            "description": "Maximum storage capacity of type \"local solid state drive\" available to a customer across all ECP locations. Measured in \"GB\". Default to 0, means no storage capacity is available.",
            "default": 0,
            "minimum": 0,
            "maximum": 20000
          },
          "persistSSDStorage": {
            "type": "integer",
            "description": "Maximum storage capacity of type \"persist solid state drive\" available to a customer across all ECP locations.  Unlike local SSD storage, data kept in persist SSD storage is replicated across multiple servers for redundancy. Measured in \"GB\". Default to 0, means no storage capacity is available.",
            "default": 0,
            "minimum": 0,
            "maximum": 20000
          },
          "tagsInRegistry": {
            "type": "integer",
            "description": "Maximum total number of docker image tags that can be pushed to ECP image registry",
            "default": 50,
            "minimum": 1,
            "maximum": 200
          },
          "storageInRegistry": {
            "type": "integer",
            "description": "Maximum storage capacity available to a customer to store container images in ECP image registry. Measured in GB.",
            "default": 10,
            "minimum": 1,
            "maximum": 1000
          }
        }
      },
      "quota.resourceQuotasStatus": {
        "title": "quota.resourceQuotasStatus",
        "type": "object",
        "properties": {
          "available": {
            "type": "object",
            "description": "An object showing the balance amounts of each resource quota",
            "properties": {
              "cpu": {
                "type": "integer",
                "description": "Balance total number of vCPU cores available to a customer across all ECP locations. Measured in “millicores”."
              },
              "memory": {
                "type": "integer",
                "description": "Balance total amount of memory available to a customer across all ECP locations. Measured in “bytes”."
              },
              "publicIPv4Addresses": {
                "type": "integer",
                "description": "Balance total number of public IPv4 addresses available to a customer across all ECP locations"
              },
              "applications": {
                "type": "integer",
                "description": "Balance max. number of applications that can be deployed to ECP"
              },
              "pods": {
                "type": "integer",
                "description": "Balance max. number of Kubernetes pods that can be deployed to ECP Kubernetes clusters (i.e. ECP locations)"
              },
              "localSSDStorage": {
                "type": "integer",
                "description": "Balance storage capacity of type “local solid state drive” available to a customer across all ECP locations. Measured in “bytes”."
              },
              "persistSSDStorage": {
                "type": "integer",
                "description": "Balance storage capacity of type “persist solid state drive” available to a customer across all ECP locations. Measured in \"bytes\". Unlike local SSD storage, data kept in persist SSD storage is replicated across multiple servers for redundancy."
              }
            }
          },
          "used": {
            "type": "object",
            "description": "An object showing the amounts of consumed resource quotas",
            "properties": {
              "cpu": {
                "type": "integer",
                "description": "Total number of vCPU cores allocated a customer across all ECP locations. Measured in “millicores”."
              },
              "memory": {
                "type": "integer",
                "description": "Total amount of memory allocated to a customer across all ECP locations. Measured in “bytes”."
              },
              "publicIPv4Addresses": {
                "type": "integer",
                "description": "Total number of public IPv4 addresses allocated to a customer across all ECP locations"
              },
              "applications": {
                "type": "integer",
                "description": "Total number of applications that have been deployed to ECP"
              },
              "pods": {
                "type": "integer",
                "description": "Total number of Kubernetes pods that have been deployed to ECP Kubernetes clusters (i.e. ECP locations)"
              },
              "localSSDStorage": {
                "type": "integer",
                "description": "Total storage capacity of type “local solid state drive” allocated to a customer across all ECP locations. Measured in “bytes”."
              },
              "persistSSDStorage": {
                "type": "integer",
                "description": "Total storage capacity of type “persist solid state drive” allocated to a customer across all ECP locations. Measured in \"bytes\". Unlike local SSD storage, data kept in persist SSD storage is replicated across multiple servers for redundancy."
              }
            }
          }
        }
      },
      "quota.contractStartDate": {
        "type": "string",
        "title": "quota.contractStartDate",
        "description": "The start date of an ECP service contract. Must be a UTC date in “yyyy-MM-dd” format. Required when “contractID” is provided.",
        "format": "date"
      },
      "quota.accountManagerEmail": {
        "type": "string",
        "title": "quota.accountManagerEmail",
        "description": "Email address of the account manager who manages the customer. The email address specified can be used by the account manager to receive system notifications related to the customer, e.g. in the event of trial expiration, excessive usage and service suspension.",
        "format": "email"
      },
      "quota.trialDeadline": {
        "type": "string",
        "title": "quota.trialDeadline",
        "description": "Date-time in RFC 3339 format indicating when the trial expires, e.g. 2021-07-01T15:00:00Z. Required only when the status is set to “trial”. Ignored otherwise. Must not be a date-time in the past. The trial must not last longer than 90 days after the trial starts.\n\nWhen trialDeadline expires, the status will be set to “suspended” and all existing ECP resources for the customer will be deleted.",
        "format": "date-time"
      },
      "quota.billUsingStripe": {
        "type": "boolean",
        "title": "quota.billUsingStripe",
        "description": "A flag indicating whether this customer will be invoiced using Stripe.",
        "default": false
      },
      "quota.suspensionDate": {
        "type": "string",
        "title": "quota.suspensionDate",
        "description": "Datetime indicating when the status is changed from “trial” or “active” to “suspended‘. This field is updated by API server when ECP service is suspended for the customer. It cannot be set via API calls.",
        "format": "date-time"
      },
      "quota.upgradeDate": {
        "type": "string",
        "title": "quota.upgradeDate",
        "description": "Datetime indicating when the status is changed from “trial” to “active”. This field is updated by API server when the customer as a free trial upgrades to a paid customer. It cannot be set via API calls.",
        "format": "date-time"
      }
    },
    "parameters": {
      "offset": {
        "name": "offset",
        "in": "query",
        "description": "Indicates the first resource to return. The first has an offset of 0.",
        "required": false,
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 0
        }
      },
      "limit": {
        "name": "limit",
        "in": "query",
        "description": "Maximum number of resources to return",
        "required": false,
        "schema": {
          "type": "integer",
          "default": 100,
          "maximum": 200,
          "minimum": 1
        }
      },
      "searchString": {
        "name": "searchString",
        "in": "query",
        "description": "Keyword to search for particular resources. The value is matched against the \"name\" field of each resource.",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "Location": {
        "schema": {
          "type": "string"
        },
        "in": "header",
        "name": "Location",
        "description": "Location of the newly created resource.",
        "required": false
      },
      "endTime": {
        "schema": {
          "type": "string"
        },
        "in": "query",
        "name": "endTime",
        "description": "RFC 3339 date indicating the end of a time period. Example: <code>endTime=2020-11-14T00:00:00Z</code> The time must be specified using the UTC timezone. Your endTime may be rounded up to the nearest minute, hour, or day depending on the \"interval\" parameter. For example, if you pass <code>endTime=2020-09-05T03:14:01Z&interval=hourly</code>, the response includes data ending at 2020-09-05T04:00:00Z.",
        "required": true
      },
      "startTime": {
        "in": "query",
        "name": "startTime",
        "description": "RFC 3339 date indicating the beginning of a time period. Example: <code>startTime=2020-10-30T00:00:00Z</code>. The time must be specified using the UTC timezone. Your startTime may be rounded down to the nearest minute, hour, or day depending on the \"interval\" parameter. For example, if you pass <code>startTime=2020-09-05T03:14:01Z&interval=hourly</code>, the response includes data beginning at 2020-09-05T03:00:00Z.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "interval": {
        "schema": {
          "type": "string",
          "enum": [
            "oneminute",
            "fiveminutes",
            "hourly",
            "daily",
            "monthly"
          ]
        },
        "name": "interval",
        "required": true,
        "description": "The granularity of returned data. In the backend, raw data is reported every minute. The data is then aggregated to give reports of different granularities. The aggregation method is “sum” for those traffic metrics, and \"average\" for all other metrics. Note that \"oneminute\" interval is available only when the timespan is not longer than 7 days and that \"fiveminutes\" interval is available only when the timespan is not longer than 31 days.",
        "in": "query"
      },
      "Report-Range": {
        "schema": {
          "type": "string",
          "default": "self-only",
          "enum": [
            "self-only",
            "children-only",
            "self+children"
          ]
        },
        "name": "Report-Range",
        "description": "An optional header that resellers can use to specify whether to include report data from children customers.",
        "in": "header"
      },
      "pop": {
        "schema": {
          "type": "string"
        },
        "name": "pop",
        "description": "Code of an ECP location",
        "in": "path",
        "required": true
      },
      "servicezone": {
        "schema": {
          "type": "string",
          "enum": [
            "business",
            "standard",
            "premium"
          ]
        },
        "name": "servicezone",
        "description": "Code of an ECP service zone",
        "in": "path",
        "required": true
      },
      "servergroup": {
        "schema": {
          "type": "string",
          "enum": [
            "standard",
            "premium",
            "premium+",
            "ultra"
          ]
        },
        "name": "servergroup",
        "description": "Code of an ECP server group",
        "in": "path",
        "required": true
      },
      "metric": {
        "name": "metric",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "enum": [
            "inboundTraffic",
            "inboundBandwidth",
            "outboundTraffic",
            "outboundBandwidth",
            "totalTraffic",
            "totalBandwidth",
            "podCount",
            "vcpu",
            "mem",
            "local-ssd",
            "persist-ssd",
            "ipCount"
          ]
        },
        "description": "Usage metric on compute, storage and network resources.\n\nMetric | Description | Measured in\n--- | --- | --- \ninboundTraffic | Amount of data transmitted to ECP during a time period | byte\ninboundBandwidth | Rate of data transfer to ECP during a time period | bps\noutboundTraffic | Amount of data transmitted from ECP during a time period | byte\noutboundBandwidth | Rate of data transfer from ECP during a time period | bps\ntotalTraffic | Amount of data transmitted to and from ECP during a time period | byte\ntotalBandwidth | Rate of data transfer to and from ECP during a time period | bps\nvcpu | Amount of CPU cores allocated for your application instances during a time period | core\nmem | Amount of memory allocated for your application instances during a time peirod | byte\nlocal-ssd | Amount of local SSD storage capacity allocated for your application instances during a time period | byte\npersist-ssd | Amount of remote SSD storage capacity allocated for your application instances during a time period | byte\npodCount | Number of your application instances (i.e. Kubernetes pods) existing during a time period | ea\nipCount | Number of public IPv4 addresses allocated for your applications during a time period. This includes addresses allocated for both application instances and ECP LoadBalancer4s, if any. | ea\n"
      },
      "podMetric": {
        "name": "metric",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "enum": [
            "inboundTraffic",
            "inboundBandwidth",
            "outboundTraffic",
            "outboundBandwidth",
            "cpuUsage",
            "memUsage",
            "diskUsage"
          ]
        },
        "description": "Usage metric on compute, storage and network resources.\n\nMetric | Description | Measured in\n--- | --- | ---\ninboundTraffic | Amount of data transmitted to an application instance during a time period | byte\ninboundBandwidth | Rate of data transfer to an application instance during a time period | bps\noutboundTraffic | Amount of data transmitted from an application instance during a time period | byte\noutboundBandwidth | Rate of data transfer from an application instance during a time period | bps\ncpuUsage | Amount of CPU cores utilized by processes running in an application instance during a time period | core\nmemUsage | Amount of memory utilized by processes running in an application instance during a time period | byte\ndiskUsage | Disk utilization rate. Here \"disk\" could mean the container rootFS and any data volume attached to an application instance. | --\n"
      },
      "applicationID": {
        "name": "applicationID",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "ID of an ECP application"
      },
      "status": {
        "name": "status",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "waiting",
            "deploying",
            "deployed",
            "failed"
          ]
        },
        "description": "The deployment status of an ECP application"
      },
      "limit(allows limit=0)": {
        "name": "limit",
        "in": "query",
        "description": "Maximum number of resources to return. To retrieve a complete list of resources, please pass this parameter with value “0”.",
        "required": false,
        "schema": {
          "type": "integer",
          "default": 100,
          "maximum": 200,
          "minimum": 0
        }
      },
      "Qtl-Request-Id": {
        "name": "Qtl-Request-Id",
        "in": "header",
        "description": "A string automatically generated by the api server to identify each request.",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "On-Behalf-Of": {
        "name": "On-Behalf-Of",
        "in": "header",
        "description": "If you are a reseller, you can use this header to specify the ID of a child customer and make API call on their behalf.",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "limit(registry)": {
        "name": "limit",
        "in": "query",
        "required": false,
        "schema": {
          "type": "integer",
          "default": 100,
          "minimum": 0,
          "maximum": 100
        },
        "description": "Indicates the maximum nuber of resources to return."
      },
      "offset(registry)": {
        "name": "offset",
        "in": "query",
        "required": false,
        "schema": {
          "type": "integer",
          "minimum": 0
        },
        "description": "Indicates the first resource to return. The first has an offset of 0. The value must be a valid non-negative integral multiple of the limit parameter."
      },
      "customerID": {
        "name": "customerID",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "ID of the customer that a serviceQuota is created for"
      }
    },
    "securitySchemes": {
      "basicAuth": {
        "type": "http",
        "scheme": "Basic",
        "description": "All requests to API server must be authenticated using an API login name and key assigned to your organization. For security, the API key is not passed directly but is secured as described below. \n\nThe authentication type is HTTP Basic, and the authorization string is specified in the HTTP request header called Authorization.\n```\n#!/bin/bash\n#URL of the ECP API server\nAPI_SERVER=https://ngapi.cdnetworks.com\n\n#You will be given the following information by the sales team\nUSER=\"{API user name}\"\nAPI_KEY=\"{API key (make sure to escape the $ sign if any)}\"\n\n#Date in RFC 1123 format\nDATE=`date \"+%a, %d %b %Y %H:%M:%S %Z\"`\n\n#Generate the password. Raw output from openssl by adding the \"-binary\" flag\npassw=$(echo -n \"$DATE\" | openssl dgst -sha1 -hmac \"$API_KEY\" -binary | base64)\necho \" \"\n\n#Construct the curl command to query list of applications\napiCall =\"curl -i --url '${API_SERVER}/ecp/v1/applications'\n                  -X GET\n                  -u $USER:$passw\n                  -H 'Date: $DATE'\n                  -H 'Accept: application/json'\"\neval $apiCall\necho \" \"\n```\n If you are a reseller, you can also specify a child customer's ID in an On-Behalf-Of HTTP header to make API calls on behalf of your child customer."
      }
    },
    "responses": {
      "project.NotAuthorized": {
        "description": "This error is returned if the API call is not permitted. Refer to response body for details.",
        "content": {
          "application/json": {
            "schema": {
              "title": "",
              "type": "object",
              "description": "A standard error object",
              "properties": {
                "error": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            },
            "examples": {
              "example-1": {
                "value": {
                  "error": "NotAuthorized",
                  "message": "Only the admin API account is allowed to perform this operation."
                }
              }
            }
          }
        },
        "headers": {
          "Qtl-Request-Id": {
            "description": "A string automatically generated by the api server to identify each request.",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "project.ProjectNotFound": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "title": "",
              "type": "object",
              "description": "A standard error object",
              "properties": {
                "error": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              }
            },
            "examples": {
              "example-1": {
                "value": {
                  "error": "ProjectNotFound",
                  "message": "The project ID given does not exist."
                }
              }
            }
          }
        },
        "headers": {
          "Qtl-Request-Id": {
            "schema": {
              "type": "string"
            },
            "description": "A string automatically generated by the api server to identify each request."
          }
        }
      }
    },
    "examples": {
      "InvalidListOffset": {
        "value": {
          "error": "InvalidListOffset",
          "message": "The value of offset must be a valid non-negative integer."
        }
      },
      "InvalidListLimit": {
        "value": {
          "error": "InvalidListLimit",
          "message": "The value of limit must be a valid integer between 1 and 200, both inclusive."
        }
      },
      "app.InvalidAppName": {
        "value": {
          "error": "InvalidAppName",
          "message": "Invalid app name. A valid app name must consist of lower-case alphanumeric characters or ‘-', must start and end with a lower-case alphanumeric character, and must be no more than 48 characters."
        }
      },
      "app.NotAuthorized": {
        "value": {
          "error": "NotAuthorized",
          "message": "You can't modify resources in namespace {namespace}."
        }
      },
      "app.NamespaceInconsistent": {
        "value": {
          "error": "NamespaceInconsistent",
          "message": "Namespace is inconsistent. The \"metadata.namespace\" fields of the objects to be deployed should all use the same \"namespace\"."
        }
      },
      "app.AppNameInconsistent": {
        "value": {
          "error": "AppNameInconsistent",
          "message": "The appName parameter value is inconsistent with your YAML file. The metadata name fields of the objects to be deployed must use the same app name."
        }
      },
      "app.QuotaExceeded": {
        "value": {
          "error": "QuotaExceeded",
          "message": "The application could not be deployed because it requires {resource requests}. You have a quota of {resources available}."
        }
      },
      "app.ConflictNetworkConfiguration": {
        "value": {
          "error": "ConflictNetworkConfiguration",
          "message": "Requesting public IPv4 addresses for pods is not allowed when a LoadBalancer4 object is already specified. Please remove the LoadBalancer4 object if your pods need to have publicly accessible IPv4 addresses."
        }
      },
      "app.InvalidResourceRequirement": {
        "value": {
          "error": "InvalidResourceRequirement",
          "message": "The resource requirement is invalid. Can be: The limits.cpu of a container should not be lower than 0.05 core. The sum of limits.cpu of a pod should not be higher than 24 cores. The requests.cpu should be equal to limits.cpu. The limits.mem of a container should not be lower than 50MB. The sum of limits.mem of a pod should not be higher than 128GB. The requests.mem should be equal to limits.mem. The requests.storage of a PVC should be not lower than 500MB and not higher than 100GB."
        }
      },
      "app.PoPDoesNotExist": {
        "value": {
          "error": "PoPDoesNotExist",
          "message": "The PoP {code of location} specified is invalid or does not exist."
        }
      },
      "app.PoPNotAvailable": {
        "value": {
          "error": "PoPNotAvailable",
          "message": "The PoP {code of location} specified is {offline || suspended} and currently not available."
        }
      },
      "app.PoPNotAvailable1": {
        "value": {
          "error": "PoPNotAvailable",
          "message": "The PoP {code of location} specified does not support feature IPv6. Please choose a different location."
        }
      },
      "app.PoPFullyLoaded": {
        "value": {
          "error": "PoPFullyLoaded",
          "message": "The PoP {code of location} specified is fully loaded and cannot provision resources requested. Please choose a different location."
        }
      },
      "app.DeploymentToMainlandChinaNotAllowed": {
        "value": {
          "error": "DeploymentToMainlandChinaNotAllowed",
          "message": "You are not allowed to deploy applications to PoPs in mainland China. Please contact our sales engineers for support."
        }
      },
      "app.RegionDoesNotExist": {
        "value": {
          "error": "RegionDoesNotExist",
          "message": "The region {region} is invalid or does not exist."
        }
      },
      "app.RegionNotAvailable": {
        "value": {
          "error": "RegionNotAvailable",
          "message": "There are currently no available PoPs under the region {region}."
        }
      },
      "app.RegionNotAvailable1": {
        "value": {
          "error": "RegionNotAvailable",
          "message": "There are currently no PoPs that support feature {IPv6} under the region {region}."
        }
      },
      "app.VolumeNotDefined": {
        "value": {
          "error": "VolumneNotDefined",
          "message": "The volume {volume name} in “volumeMounts” is not defined."
        }
      },
      "app.VolumeNotMounted": {
        "value": {
          "error": "VolumeNotMounted",
          "message": "The volume {volume name} defined is not mounted to any mount points."
        }
      },
      "app.ConflictVolumeMountPath": {
        "value": {
          "error": "ConflictVolumeMountPath",
          "message": "The mountPath in volumeMounts must be unique and without overlapping."
        }
      },
      "app.InvalidLoadBalancer4Listener": {
        "value": {
          "error": "InvalidLoadBalancer4Listener",
          "message": "The LoadBalancer4 listener {listener name} is invalid. The “backendSelector” does not match {ReplicaSet/StatefulSet/Deployment}.spec.template.metadata.labels."
        }
      },
      "app.InvalidRequestBody": {
        "value": {
          "error": "InvalidRequestBody",
          "message": "Failed to parse {YAML | JSON} in the request body. Please check the content format."
        }
      },
      "app.InvalidResourceKind": {
        "value": {
          "error": "InvalidResourceKind",
          "message": "Can be:\nRequiredKindMissing\nUnrecognizableKind\nUnsupportedKubernetesResource\nUnsupportedPVC\nConflictKind\nRepeatedKind\nKindNotSpecified"
        }
      },
      "app.InvalidSpecification": {
        "value": {
          "error": "InvalidSpecification",
          "message": "The {Kind 1} specified in invalid: * {fieldPath}: {Code}: [{value}]: [{message}] The {Kind n} specified in invalid: * {fieldPath}: {Code}: [{value}]: [{message}]"
        }
      },
      "app.ApplicationNotFound": {
        "value": {
          "error": "ApplicationNotFound",
          "message": "The application ID given does not exist."
        }
      },
      "app.ApplicationBeingDeleted": {
        "value": {
          "error": "ApplicationBeingDeleted",
          "message": "The application is being deleted and cannot be updated or deleted again."
        }
      },
      "app.NamespaceUpdateNotAllowed": {
        "value": {
          "error": "NamespaceUpdateNotAllowed",
          "message": "Using a different namespace to update an application is not allowed."
        }
      },
      "app.PVCUpdateNotAllowed": {
        "value": {
          "error": "PVCUpdateNotAllowed",
          "message": "Updating PVCs in use is not allowed."
        }
      },
      "app.ApplicationHasCname1": {
        "value": {
          "error": "ApplicationHasCname",
          "message": "A CNAME for the application exists. Please delete the CNAME first before removing layer 4 load balancers from this application."
        }
      },
      "app.ResourceObjectNotExist": {
        "value": {
          "error": "ResourceObjectNotExist",
          "message": "The application does not contain a {kind} object. Please use PUT method if you would like to add a new object."
        }
      },
      "app.ApplicationHasCname": {
        "value": {
          "error": "ApplicationHasCname",
          "message": "A CNAME for the application exists. Please delete the CNAME first."
        }
      },
      "InvalidListLimit1": {
        "value": {
          "error": "InvalidListLimit",
          "message": "The value of limit must be a valid integer between 0 and 200, both inclusive. Set limit to 0 to retrieve a complete list."
        }
      },
      "app.pod.InvalidPhase": {
        "value": {
          "error": "InvalidPhase",
          "message": "The phase given is invalid. The value should be one of \"Pending\", \"Running\", and \"Failed\"."
        }
      },
      "app.PoPNotExist": {
        "value": {
          "error": "PoPNotExist",
          "message": "The PoP given is invalid or does not exist."
        }
      },
      "app.pod.InstanceNotFound": {
        "value": {
          "error": "InstanceNotFound",
          "message": "The instance specified does not exist, or is not an instance of the given application."
        }
      },
      "report.InvalidMetric": {
        "value": {
          "error": "InvalidMetric",
          "message": "The metric given is invalid."
        }
      },
      "report.InvalidDateFormat": {
        "value": {
          "error": "InvalidDateFormat",
          "message": "Invalid parameter {startTime | endTime}. {startTime | endTime} is not a valid RFC3339 timestamp. The timestamp should be in \"yyyy-MM-dd'T'HH:mm:ss'Z'\" format."
        }
      },
      "report.InvalidRange": {
        "value": {
          "error": "InvalidRange",
          "message": "The max time span of {interval} report must be no more than {xxx days}."
        }
      },
      "report.InvalidRange(1)": {
        "value": {
          "error": "InvalidRange",
          "message": "The parameter 'startTime' cannot be a time in the future."
        }
      },
      "report.InvalidRange(2)": {
        "value": {
          "error": "InvalidRange",
          "message": "The parameter 'endTime' should be after 'startTime'."
        }
      },
      "report.InvalidInterval": {
        "value": {
          "error": "InvalidInterval",
          "message": "The interval requested is invalid."
        }
      },
      "report.InvalidReportRange": {
        "value": {
          "error": "InvalidReportRange",
          "message": "A valid report range shall be “self-only”, “children-only”, or “self+children”."
        }
      },
      "report.5mintraffic": {
        "value": {
          "data": [
            {
              "timestamp": "2020-10-02T15:00:00Z",
              "value": 216326
            },
            {
              "timestamp": "2020-10-02T15:05:00Z",
              "value": 214326
            },
            {
              "timestamp": "2020-10-02T15:10:00Z",
              "value": 216226
            },
            {
              "timestamp": "2020-10-02T15:15:00Z",
              "value": 212126
            },
            {
              "timestamp": "2020-10-02T15:20:00Z",
              "value": 215326
            }
          ]
        }
      },
      "quota.AccessDenied": {
        "value": {
          "error": "AccessDenied",
          "message": "A regular customer is not allowed to make this call."
        }
      },
      "quota.InvalidCustomerID": {
        "value": {
          "error": "InvalidCustomerID",
          "message": "The customer ID given does not exist or is not a child of the caller."
        }
      },
      "quota.ServiceQuotaExists": {
        "value": {
          "error": "ServiceQuotaExists",
          "message": "The customer specified already has an existing service quota."
        }
      },
      "quota.RecreateServiceQuotaNotAllowed": {
        "value": {
          "error": "RecreateServiceQuotaNotAllowed",
          "message": "A service quota for the customer existed before. Recreating a deleted service quota is not allowed."
        }
      },
      "quota.NoSubscription": {
        "value": {
          "error": "NoSubscription",
          "message": "The customer specified is not subscribed to ECP service. Please add \"ECP\" to the products list of the customer first."
        }
      },
      "quota.InvalidNamespace": {
        "value": {
          "error": "InvalidNamespace",
          "message": "The namespace specified is invalid. A valid namespace must be of no more than 63 characters, and must not contain characters other than digits, lower-case letters, and hyphens."
        }
      },
      "quota.InvalidStatus": {
        "value": {
          "error": "InvalidStatus",
          "message": "The status specified is invalid. Must be one of \"trial\", 'suspended' and 'active'"
        }
      },
      "quota.InvalidAllowDeploymentInChina": {
        "value": {
          "error": "InvalidAllowDeploymentInChina",
          "message": "The allowDeploymentInChina specified is invalid, must be true or false."
        }
      },
      "quota.NamespaceExists": {
        "value": {
          "error": "NamespaceExists",
          "message": "The namespace is already taken."
        }
      },
      "app.InvalidResourceQuota": {
        "value": {
          "error": "InvalidResourceQuota",
          "message": "The resource quota {quota} specified is invalid. Must be an integer within the range {range}."
        }
      },
      "common.RequiredFieldMissing": {
        "value": {
          "error": "RequiredFieldMissing",
          "message": "The field {field} is required."
        }
      },
      "common.FieldValueTooLong": {
        "value": {
          "error": "FieldValueTooLong",
          "message": "The {field} must be not more than xxx characters."
        }
      },
      "quota.InvalidServiceQuotaID": {
        "value": {
          "error": "InvalidServiceQuotaID",
          "message": "The serviceQuotaID given does not exist or is not for a child customer of the caller."
        }
      },
      "quota.HasResource": {
        "value": {
          "error": "HasResource",
          "message": "This customer still has some {ECP resources}. These resources must be removed before the service quota can be deleted."
        }
      },
      "quota.InvalidCustomerID(1)": {
        "value": {
          "error": "InvalidCustomerID",
          "message": "The customerID given does not exist or the caller does not have permission to access it."
        }
      },
      "quota.InvalidTrialDeadline": {
        "value": {
          "error": "InvalidTrialDeadline",
          "message": "Invalid parameter trialDeadline. {trialDeadline} is not a valid RFC3339 timestamp. The timestamp should be in \"yyyy-MM-dd'T'HH:mm:ss'Z'\" format."
        }
      },
      "quota.InvalidTrialDeadline1": {
        "value": {
          "error": "InvalidTrialDeadline",
          "message": "The trialDeadline specified cannot be a time in the past."
        }
      },
      "quota.InvalidTrialDeadline2": {
        "value": {
          "error": "InvalidTrialDeadline",
          "message": "The trial period cannot be longer than 90 days."
        }
      },
      "quota.TrialDeadlineNotSpecified": {
        "value": {
          "error": "TrialDeadlineNotSpecified",
          "message": "The field trialDeadline is required when customer status is set to “trial”."
        }
      },
      "quota.InvalidBillUsingStripe": {
        "value": {
          "error": "InvalidBillUsingStripe",
          "message": "The billUsingStripe specified is invalid, must be true or false."
        }
      },
      "quota.ContractIDNotSpecified": {
        "value": {
          "error": "ContractIDNotSpecified",
          "message": "The field contractID is required when billUsingStripe is set to true."
        }
      },
      "quota.ContractStartDateNotSpecified": {
        "value": {
          "error": "ContractStartDateNotSpecified",
          "message": "The field contractStartDate is required when contractID is specified."
        }
      },
      "quota.InvalidContractStartDate": {
        "value": {
          "error": "InvalidContractStartDate",
          "message": "The date must be in “yyyy-MM-dd” format."
        }
      },
      "quota.InvalidAccountManagerEmail": {
        "value": {
          "error": "InvalidAccountManagerEmail",
          "message": "The accountManagerEmail specified is not a valid email address."
        }
      },
      "quota.InvalidServiceQuotaStatus": {
        "value": {
          "error": "InvalidServiceQuotaStatus",
          "message": "A serviceQuota not in “suspended” status cannot be deleted."
        }
      },
      "quota.SuspensionDateTooClose": {
        "value": {
          "error": "SuspensionDateTooClose",
          "message": "A serviceQuota that was suspended in the last 90 days cannot be deleted."
        }
      }
    }
  },
  "tags": [
    {
      "name": "Applications",
      "description": "An Application is an ECP resource type which you can use to specify your containerized application and to declare its desired state of deployment on ECP platform. An ECP application typically consists of the following 3 objects.\n\n1. A Kubernetes <a href=\"https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/\">StatefulSet</a>, <a href=\"https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/\">ReplicaSet</a>, or <a href=\"https://kubernetes.io/docs/concepts/workloads/controllers/deployment/\">Deployment</a> workload resource to specify how your application shall be deployed, e.g. what container images you want to run, how the containers shall be started, and how many resources the containers would require. Note that different workload resource type means somewhat different behaviours when your application is created, updated and deleted. Please refer to Kubernetes official documenation for more information. In general, Deployment workload resource is recommended and shall basically meet your requirements. However, if your application requires persistent storage, please choose StatefulSet.\n2. An ECP custom \"LoadBalancer4\" object to expose your application instances (or <a href=\"https://kubernetes.io/docs/concepts/workloads/pods/\">Pods</a> as defined in Kubernetes). If this object is specified, ECP will create a layer 4 load balancer, in each of the ECP locations where your application is distributed, to expose and load balance the application instances running in that location. Alternatively, you can enable public IPv4/IPv6 network interfaces for the application instances and thus directly expose the instances. Refer to examples of the <a href=\"#operation/post-applications\">POST application endpoint</a>.\n3. A Target object that specifies where your application shall be distributed. You can specify the ECP custom \"RegionPreference\" object if you would like to have your application automatically distributed across locations in an <a href=\"#operation/get-regions\">ECP region</a>. If precise placement is preferred, you can specify the ECP custom \"Location\" object to pick the target <a href=\"#operation/get-pops\">ECP locations</a>.\n\nYou can also include Kubernetes <a href=\"https://kubernetes.io/docs/concepts/configuration/configmap/\">ConfigMap</a> and <a href=\"https://kubernetes.io/docs/concepts/configuration/secret/\">Secret</a> objects in an ECP application to manage configurations and sensitive information for your application."
    },
    {
      "name": "imagePullSecrets",
      "description": "An ImagePullSecret is a type of Kubernetes secret that contains encoded image registry credentials. The secret is used by Kubernetes to authenticate with your image registry when pulling your private images from the registry."
    },
    {
      "name": "CNAMEs",
      "description": "A Canonical Name Record (or \"CNAME\") is a DNS record used to alias one domain name to a different domain name. While your application runs on ECP, you can create a CNAME and point the hostname of your application to this CNAME. Then ECP will help intelligently route global traffic for your application by resolving the CNAME to different IP addresses pointing to your application instances at the edge as per user/client location. Incoming requests will be routed to your application instances that are the closest or respond the fastest."
    },
    {
      "name": "Registry Projects",
      "description": "A registry project contains image repositories. You can use a project to group repositories of similar purpose, e.g. repositories for a same application or for a same organization. Such grouping also allows you to manage access control per project."
    },
    {
      "name": "Registry Users",
      "description": "A registry user is an entity that is created and given certain permissions to access/manage repositories and tags in the registry. A registry user usually uses the docker CLI client to access an image registry."
    },
    {
      "name": "ECP Locations",
      "description": "ECP service is available at ECP PoPs and ECP regions. An ECP PoP refers to a specific location where an ECP Kubernetes cluster is operated and offers container service, while an ECP region represents multiple ECP PoPs grouped together (geographically or otherwise). For instance, “APAC” is an ECP region which refers to all ECP PoPs serving in Asia Pacific (excluding mainland China). The endpoints below help you get to know about the global footprint of ECP service and how you can leverage this to run your applications everywhere around the world."
    },
    {
      "name": "Reports",
      "description": "Call our report APIs to get information about your resource usage on ECP."
    },
    {
      "name": "ECP Product Management",
      "description": "These APIs allow you to fetch ECP product settings that apply to your account. If you are a reseller, you can use some of the APIs to manage the product settings of your child customers.\n\nFor each ECP customer, the ECP product settings are wrapped in a \"serviceQuota\" object."
    }
  ]
}